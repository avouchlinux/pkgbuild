# Copyright 2010-2020 Avouch Authors
# Distributed under the terms of the GNU General Public License v2
# Maintainer: Qurban Ullah <qurbanullah@avouch.org>
# Contributor: Qurban Ullah <qurbanullah@avouch.org>

# toolchain build order: linux-api-headers->glibc->binutils->gcc->binutils->glibc
# NOTE: valgrind requires rebuilt with each major glibc version

# NOTE: adjust version in install script when locale files are updated

pkgbase=glibc
pkgname=(glibc lib32-glibc)
pkgver=2.35
pkgrel=1
pkgdesc="GNU C Library"
arch=('x86_64')
groups=('sys-base')
url="http://www.gnu.org/software/libc"
license=('GPL' 'LGPL')
makedepends=(git gd lib32-gcc-libs python)
backup=(etc/gai.conf
        etc/locale.gen
        etc/nscd.conf)
options=(!strip staticlibs)
install=glibc.install
source=(https://ftp.gnu.org/gnu/glibc/$pkgbase-$pkgver.tar.xz
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h)
validpgpkeys=(7273542B39962DF7B299931416792B4EA25340F8 # Carlos O'Donell
              BC7C7372637EC10C57D7AA6579C43DFBF1CF2187) # Siddhesh Poyarekar

_gitbranch=$pkgver

if [ -n "${_gitbranch}" ]; then	
	_basedir=${pkgname}
else
	_basedir=${pkgname}-${pkgver}
fi

getsrc() {
	cd ${srcdir}
	# TO LIST ALL THE BRANCHES AT REMOTE SITE
	# git ls-remote --heads git://sourceware.org/git/glibc.git
	
	# Always clone the stable branch with latest patches	
	#git clone git://sourceware.org/git/glibc.git --branch "release/${pkgver}/master" --single-branch "${pkgbase}"
}

prepare() {
 mkdir -p glibc-build lib32-glibc-build

  # [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc 
  cd $_basedir

  # Disable clone3 syscall for now
  # Can be removed when eletron{9,11,12} and discord are removed or patched:
  # https://github.com/electron/electron/commit/993ecb5bdd5c57024c8718ca6203a8f924d6d574
  # Patch src: https://patchwork.ozlabs.org/project/glibc/patch/87eebkf8ph.fsf@oldenburg.str.redhat.com/
  # patch -Np1 -i "${srcdir}"/disable-clone3.diff

  # Fix C.UTF-8 generation errors
  # https://bugs.archlinux.org/task/73797
  # patch -Np1 -i "${srcdir}"/0001-localedef-Update-LC_MONETARY-handling-Bug-28845.patch
  # patch -Np1 -i "${srcdir}"/0001-localedata-Do-not-generate-output-if-warnings-were-p.patch

  # patch -Np1 -i ../glibc-cs-path.patch
  # patch -Np1 -i ../glibc-localedef-handle-symlinks.patch
  # patch -Np1 -i ../glibc-python3.patch
  # patch -Np1 -i ../glibc-rh827510.patch
  # patch -Np1 -i ../glibc-rh1070416.patch
  # patch -Np1 -i ../glibc-temp-ibmldbl64.patch
}

build() {
  disable_ld_gold
  local _configure_flags=(
      --prefix=/usr
      --with-headers=/usr/include
      --with-bugurl=https://avouch.org/bugs
      --enable-bind-now
      --enable-cet
      --enable-kernel=5.10
      --enable-multi-arch
      --enable-stack-protector=strong
      --enable-systemtap
      --disable-profile
      --disable-crypt
      --disable-werror
  )

  pushd "$srcdir/glibc-build"

    echo "slibdir=/usr/lib" >> configparms
    echo "rtlddir=/usr/lib" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    # remove fortify for building libraries
    export CFLAGS=${CFLAGS/-D_FORTIFY_SOURCE=2/}
    export CFLAGS=${CFLAGS/-fno-plt/}
    export CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}  
    export CXXFLAGS=${CXXFLAGS/-fno-plt/}
    export LDFLAGS=""

    "$srcdir/$_basedir/configure" \
        --libdir=/usr/lib \
        --libexecdir=/usr/lib \
        ${_configure_flags[@]}

    # build libraries with fortify disabled
    echo "build-programs=no" >> configparms
    make -O ${MAKEFLAGS}

    # re-enable fortify for programs
    sed -i "/build-programs=/s#no#yes#" configparms
    echo "CFLAGS += -Wp,-D_FORTIFY_SOURCE=2" >> configparms
    make -O

    # build info pages manually for reprducibility
    make info
  popd


  pushd "$srcdir/lib32-glibc-build"
    export CC="gcc -m32 -mstackrealign"
    export CXX="g++ -m32 -mstackrealign"

    echo "slibdir=/usr/lib32" >> configparms
    echo "rtlddir=/usr/lib32" >> configparms
    echo "sbindir=/usr/bin" >> configparms
    echo "rootsbindir=/usr/bin" >> configparms

    # remove fortify for building libraries
    # CFLAGS=${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2/}
    # export LDFLAGS=${LDFLAGS/-z now/}
    
    # remove fortify for building libraries
    export CFLAGS=${CFLAGS/-D_FORTIFY_SOURCE=2/}
    export CFLAGS=${CFLAGS/-fno-plt/}
    export CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}  
    export CXXFLAGS=${CXXFLAGS/-fno-plt/}
    export LDFLAGS=""

    "$srcdir/$_basedir/configure" \
        --host=i686-pc-linux-gnu \
        --libdir=/usr/lib32 \
        --libexecdir=/usr/lib32 \
        ${_configure_flags[@]}

    # build libraries with fortify disabled
    echo "build-programs=no" >> configparms
    make -O ${MAKEFLAGS}

    # re-enable fortify for programs
    sed -i "/build-programs=/s#no#yes#" configparms
    echo "CFLAGS += -Wp,-D_FORTIFY_SOURCE=2" >> configparms
    make -O
  popd
}


# Credits for skip_test() and check() @allanmcrae
# https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
skip_test() {
  test=$1
  file=$2
  sed -i "s/\b$test\b//" $srcdir/$_basedir/$file
}

check() {
  cd glibc-build

  # adjust/remove buildflags that cause false-positive testsuite failures
  sed -i '/FORTIFY/d' configparms                                     # failure to build testsuite
  sed -i 's/-Werror=format-security/-Wformat-security/' config.make   # failure to build testsuite
  sed -i '/CFLAGS/s/-fno-plt//' config.make                           # 16 failures
  sed -i '/CFLAGS/s/-fexceptions//' config.make                       # 1 failure
  LDFLAGS=${LDFLAGS/-z now/}                                          # 10 failures
  LDFLAGS=${LDFLAGS/,-z,now/}  

  # The following tests fail due to restrictions in the Arch build system
  # The correct fix is to add the following to the systemd-nspawn call:
  # --system-call-filter="@clock @memlock @pkey"
  skip_test test-errno-linux sysdeps/unix/sysv/linux/Makefile
  skip_test tst-ntp_gettime  sysdeps/unix/sysv/linux/Makefile
  skip_test tst-ntp_gettimex sysdeps/unix/sysv/linux/Makefile
  skip_test tst-mlock2       sysdeps/unix/sysv/linux/Makefile
  skip_test tst-pkey         sysdeps/unix/sysv/linux/Makefile
  skip_test tst-adjtime      time/Makefile
  skip_test tst-clock2       time/Makefile

  make -O ${MAKEFLAGS} check
}

package_glibc() {
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen
          etc/nscd.conf)

  install -dm755 "$pkgdir/etc"
  touch "$pkgdir/etc/ld.so.conf"

  make -C glibc-build install_root="$pkgdir" install
  rm -f "$pkgdir"/etc/ld.so.{cache,conf}

  # Shipped in tzdata
  rm -f "$pkgdir"/usr/bin/{tzselect,zdump,zic}

  cd glibc

  install -dm755 "$pkgdir"/usr/lib/{locale,systemd/system,tmpfiles.d}
  install -m644 nscd/nscd.conf "$pkgdir/etc/nscd.conf"
  install -m644 nscd/nscd.service "$pkgdir/usr/lib/systemd/system"
  install -m644 nscd/nscd.tmpfiles "$pkgdir/usr/lib/tmpfiles.d/nscd.conf"
  install -dm755 "$pkgdir/var/db/nscd"

  install -m644 posix/gai.conf "$pkgdir"/etc/gai.conf

  install -m755 "$srcdir/locale-gen" "$pkgdir/usr/bin"

  # Create /etc/locale.gen
  install -m644 "$srcdir/locale.gen.txt" "$pkgdir/etc/locale.gen"
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    "$srcdir/glibc/localedata/SUPPORTED" >> "$pkgdir/etc/locale.gen"

  if check_option 'debug' n; then
    find "$pkgdir"/usr/bin -type f -executable -exec strip $STRIP_BINARIES {} + 2> /dev/null || true
    find "$pkgdir"/usr/lib -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true

    # Do not strip these for gdb and valgrind functionality, but strip the rest
    find "$pkgdir"/usr/lib \
      -not -name 'ld-*.so' \
      -not -name 'libc-*.so' \
      -not -name 'libpthread-*.so' \
      -not -name 'libthread_db-*.so' \
      -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
  fi

  # Provide tracing probes to libstdc++ for exceptions, possibly for other
  # libraries too. Useful for gdb's catch command.
  install -Dm644 "$srcdir/sdt.h" "$pkgdir/usr/include/sys/sdt.h"
  install -Dm644 "$srcdir/sdt-config.h" "$pkgdir/usr/include/sys/sdt-config.h"
}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")
  options+=('!emptydirs')

  cd lib32-glibc-build

  make install_root="$pkgdir" install
  rm -rf "$pkgdir"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "$pkgdir/usr/include" -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "$pkgdir/usr/lib"
  ln -s ../lib32/ld-linux.so.2 "$pkgdir/usr/lib/"

  # Add lib32 paths to the default library search path
  install -Dm644 "$srcdir/lib32-glibc.conf" "$pkgdir/etc/ld.so.conf.d/lib32-glibc.conf"

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "$pkgdir/usr/lib32/locale"

  if check_option 'debug' n; then
    find "$pkgdir"/usr/lib32 -name '*.a' -type f -exec strip $STRIP_STATIC {} + 2> /dev/null || true
    find "$pkgdir"/usr/lib32 \
      -not -name 'ld-*.so' \
      -not -name 'libc-*.so' \
      -not -name 'libpthread-*.so' \
      -not -name 'libthread_db-*.so' \
      -name '*-*.so' -type f -exec strip $STRIP_SHARED {} + 2> /dev/null || true
  fi
}