# Copyright 2010-2024 Avouch Authors
# Distributed under the terms of the GNU General Public License v2
# Maintainer: Qurban Ullah <qurbanullah@avouch.org>
# Contributor: Qurban Ullah <qurbanullah@avouch.org>

pkgbase=linux
pkgver=6.8.7
_pkgver=6.8.7
_baseversion=${pkgver%%.*}
pkgrel=1
arch=('x86_64')
groups=('sys-base')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz

  # htmldocs
  graphviz
  imagemagick
  python-sphinx
  python-yaml
  texlive-latexextra
)
options=(
  !debug
  !strip
)
_srcname=linux
source=("https://cdn.kernel.org/pub/linux/kernel/v$_baseversion.x/linux-$pkgver.tar.xz"
  config         # the main kernel config file
  linux-6.8.7-avouch.patch
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  '8218F88849AAC522E94CF470A5E9288C4FA415FA'  # Jan Alexander Steffens (heftig)
)

export KBUILD_BUILD_HOST=avouch
export KBUILD_BUILD_USER=$pkgbase

_localversion="-$pkgrel"
_localname="-avouch"
KARCH=x86

prepare() {
    # disable gold linker
    use_linker 'ld'
    cd "${srcdir}/${pkgbase}-${_pkgver}"
    message "Setting version..."
    scripts/setlocalversion --save-scmversion
    echo "${_localversion}" > localversion.10-pkgrel
    # echo "${_localname}" > localversion.20-pkgname
    echo "${pkgbase#linux}" > localversion.20-pkgname

   
    patch -Np1 < "../linux-6.8.7-avouch.patch"


    message "Setting config..."
    # cp ../kernel-$pkgver-x86_64.config .config
    cp ../config .config

    # kbuild: Fail if gold linker is detected
    # https://lore.kernel.org/lkml/20190716233708.GA11824@mit.edu/T/    
    # Would it be possible to force ld.bfd with -fuse-ld=bfd when gold is detected?
    # It's probably possible but way beyond my kbuild foo.
    # Adding LD=ld.bfd to the make invocation is the trivial workaround.

    make olddefconfig

    diff -u ../config .config || :

    # rewrite configuration
    # yes "" | make config >/dev/null
    # yes "" | make config

    make -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"
}

build() {
    cd "${srcdir}/${pkgbase}-${_pkgver}"

    # disable peephole2 optimization to avoid build errros
    #export CFLAGS="$CFLAGS -fno-peephole2"

    # UnicodeEncodeError: 'latin-1' codec can't encode characters in position 18-20: ordinal not in range(256)
    # tpo avoid above built error unset lang variable
    # export LANG=""

    make all
    make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
    make htmldocs
}

_package() {
 pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
    
  cd "${srcdir}/${pkgbase}-${_pkgver}"
    
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build




    # a place for external modules,
    # with version file for building modules and running depmod
    # local extradir="$pkgdir/usr/lib/modules/$kernver/extramodules"
    # install -Dm644 version "$extradir/version"

    # add real version for building modules and running depmod from post_install/upgrade
    # install -Dm644 version "${pkgdir}/usr/lib/modules/${kernver}/version"

    # remove build and source links
    # rm "$modulesdir"/{source,build}
    
    # message "Fixing permissions..."
    # chmod -Rc u=rwX,go=rX "$pkgdir"

}

_package-headers() {
    pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"

    cd "${srcdir}/${pkgbase}-${_pkgver}"
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel"

  cd "${srcdir}/${pkgbase}-${_pkgver}"
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"

}

pkgname=(
  "$pkgbase"
  "$pkgbase-headers"
  "$pkgbase-docs"
)
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

