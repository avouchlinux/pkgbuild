From decbb45ac3bda3f7a29d5a4a3471ccf52fedc707 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Albertas=20Vy=C5=A1niauskas?= <thezbyg@gmail.com>
Date: Sun, 27 Dec 2020 23:11:48 +0200
Subject: [PATCH] Remove deprecated GTK function usage.

Remove g_type_class_add_private usage.
Remove G_TYPE_INSTANCE_GET_PRIVATE usage.
---
 source/gtk/ColorComponent.cpp | 30 +++++++++++++--------------
 source/gtk/ColorWheel.cpp     | 38 ++++++++++++++---------------------
 source/gtk/ColorWidget.cpp    | 24 ++++++++++------------
 source/gtk/LayoutPreview.cpp  | 26 ++++++++++--------------
 source/gtk/Range2D.cpp        | 21 +++++++++----------
 source/gtk/Swatch.cpp         | 19 +++++++++---------
 source/gtk/Zoomed.cpp         | 20 +++++++++---------
 7 files changed, 79 insertions(+), 99 deletions(-)

diff --git a/source/gtk/ColorComponent.cpp b/source/gtk/ColorComponent.cpp
index d2eefc4..069c7c8 100644
--- a/source/gtk/ColorComponent.cpp
+++ b/source/gtk/ColorComponent.cpp
@@ -25,20 +25,6 @@
 #include <vector>
 using namespace std;
 
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_COLOR_COMPONENT, GtkColorComponentPrivate))
-G_DEFINE_TYPE(GtkColorComponent, gtk_color_component, GTK_TYPE_DRAWING_AREA);
-struct GtkColorComponentPrivate;
-static gboolean button_release(GtkWidget *widget, GdkEventButton *event);
-static gboolean button_press(GtkWidget *node_system, GdkEventButton *event);
-static gboolean motion_notify(GtkWidget *node_system, GdkEventMotion *event);
-static void update_rgb_color(GtkColorComponentPrivate *ns, Color *c);
-static void finalize(GObject *color_obj);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
-static void size_request(GtkWidget *widget, GtkRequisition *requisition);
-#endif
 enum {
 	COLOR_CHANGED,
 	INPUT_CLICKED,
@@ -67,12 +53,24 @@ struct GtkColorComponentPrivate {
 	GdkDevice *pointer_grab;
 #endif
 };
-
+#define GET_PRIVATE(obj) reinterpret_cast<GtkColorComponentPrivate *>(gtk_color_component_get_instance_private(GTK_COLOR_COMPONENT(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkColorComponent, gtk_color_component, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkColorComponent));
+struct GtkColorComponentPrivate;
+static gboolean button_release(GtkWidget *widget, GdkEventButton *event);
+static gboolean button_press(GtkWidget *node_system, GdkEventButton *event);
+static gboolean motion_notify(GtkWidget *node_system, GdkEventMotion *event);
+static void update_rgb_color(GtkColorComponentPrivate *ns, Color *c);
+static void finalize(GObject *color_obj);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
+static void size_request(GtkWidget *widget, GtkRequisition *requisition);
+#endif
 static void gtk_color_component_class_init(GtkColorComponentClass *color_component_class)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS (color_component_class);
 	obj_class->finalize = finalize;
-	g_type_class_add_private(obj_class, sizeof(GtkColorComponentPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (color_component_class);
 	widget_class->button_release_event = button_release;
 	widget_class->button_press_event = button_press;
diff --git a/source/gtk/ColorWheel.cpp b/source/gtk/ColorWheel.cpp
index 787e0c6..ca9f086 100644
--- a/source/gtk/ColorWheel.cpp
+++ b/source/gtk/ColorWheel.cpp
@@ -22,35 +22,16 @@
 #include "MathUtil.h"
 #include <list>
 #include <iostream>
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_COLOR_WHEEL, GtkColorWheelPrivate))
-
-G_DEFINE_TYPE (GtkColorWheel, gtk_color_wheel, GTK_TYPE_DRAWING_AREA);
-struct GtkColorWheelPrivate;
-struct ColorPoint;
-static GtkWindowClass *parent_class = nullptr;
-static gboolean button_release(GtkWidget *color_wheel, GdkEventButton *event);
-static gboolean button_press(GtkWidget *color_wheel, GdkEventButton *event);
-static gboolean motion_notify(GtkWidget *widget, GdkEventMotion *event);
-static uint32_t get_color_index(GtkColorWheelPrivate *ns, ColorPoint *cp);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *color_wheel, GdkEventExpose *event);
-#endif
-enum
-{
+enum {
 	HUE_CHANGED, SATURATION_VALUE_CHANGED, LAST_SIGNAL
 };
 static guint signals[LAST_SIGNAL] = {0};
-
-struct ColorPoint
-{
+struct ColorPoint {
 	double hue;
 	double lightness;
 	double saturation;
 };
-struct GtkColorWheelPrivate
-{
+struct GtkColorWheelPrivate {
 	ColorPoint cpoint[10];
 	uint32_t n_cpoint;
 	ColorPoint *grab_active;
@@ -67,6 +48,18 @@ struct GtkColorWheelPrivate
 	GdkDevice *pointer_grab;
 #endif
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkColorWheelPrivate *>(gtk_color_wheel_get_instance_private(GTK_COLOR_WHEEL(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkColorWheel, gtk_color_wheel, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkColorWheel));
+static GtkWindowClass *parent_class = nullptr;
+static gboolean button_release(GtkWidget *color_wheel, GdkEventButton *event);
+static gboolean button_press(GtkWidget *color_wheel, GdkEventButton *event);
+static gboolean motion_notify(GtkWidget *widget, GdkEventMotion *event);
+static uint32_t get_color_index(GtkColorWheelPrivate *ns, ColorPoint *cp);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *color_wheel, GdkEventExpose *event);
+#endif
 static void finalize(GObject *color_wheel_obj)
 {
 	GtkColorWheelPrivate *ns = GET_PRIVATE(color_wheel_obj);
@@ -90,7 +83,6 @@ static void gtk_color_wheel_class_init(GtkColorWheelClass *color_wheel_class)
 	widget_class->expose_event = expose;
 #endif
 	parent_class = (GtkWindowClass*)g_type_class_peek_parent(G_OBJECT_CLASS(color_wheel_class));
-	g_type_class_add_private(obj_class, sizeof(GtkColorWheelPrivate));
 	signals[HUE_CHANGED] = g_signal_new("hue_changed", G_OBJECT_CLASS_TYPE(obj_class), G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET(GtkColorWheelClass, hue_changed), nullptr, nullptr, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
 	signals[SATURATION_VALUE_CHANGED] = g_signal_new("saturation_value_changed", G_OBJECT_CLASS_TYPE(obj_class), G_SIGNAL_RUN_FIRST, G_STRUCT_OFFSET(GtkColorWheelClass, saturation_value_changed), nullptr, nullptr, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
 }
diff --git a/source/gtk/ColorWidget.cpp b/source/gtk/ColorWidget.cpp
index 3c90020..f1d085f 100644
--- a/source/gtk/ColorWidget.cpp
+++ b/source/gtk/ColorWidget.cpp
@@ -19,18 +19,6 @@
 #include "ColorWidget.h"
 #include "Color.h"
 #include "Shapes.h"
-
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_COLOR, GtkColorPrivate))
-G_DEFINE_TYPE(GtkColor, gtk_color, GTK_TYPE_DRAWING_AREA);
-static gboolean button_release(GtkWidget *widget, GdkEventButton *event);
-static gboolean button_press(GtkWidget *widget, GdkEventButton *event);
-static void finalize(GObject *color_obj);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
-static void size_request(GtkWidget *widget, GtkRequisition *requisition);
-#endif
 enum {
 	ACTIVATED, LAST_SIGNAL,
 };
@@ -43,11 +31,21 @@ struct GtkColorPrivate {
 	float roundness;
 	transformation::Chain *transformation_chain;
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkColorPrivate *>(gtk_color_get_instance_private(GTK_COLOR(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkColor, gtk_color, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkColor));
+static gboolean button_release(GtkWidget *widget, GdkEventButton *event);
+static gboolean button_press(GtkWidget *widget, GdkEventButton *event);
+static void finalize(GObject *color_obj);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
+static void size_request(GtkWidget *widget, GtkRequisition *requisition);
+#endif
 static void gtk_color_class_init(GtkColorClass *color_class)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS(color_class);
 	obj_class->finalize = finalize;
-	g_type_class_add_private(obj_class, sizeof(GtkColorPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS(color_class);
 	widget_class->button_release_event = button_release;
 	widget_class->button_press_event = button_press;
diff --git a/source/gtk/LayoutPreview.cpp b/source/gtk/LayoutPreview.cpp
index d4658da..5984f2d 100644
--- a/source/gtk/LayoutPreview.cpp
+++ b/source/gtk/LayoutPreview.cpp
@@ -24,35 +24,31 @@
 #include <typeinfo>
 using namespace math;
 using namespace layout;
-
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_LAYOUT_PREVIEW, GtkLayoutPreviewPrivate))
-G_DEFINE_TYPE(GtkLayoutPreview, gtk_layout_preview, GTK_TYPE_DRAWING_AREA);
-static gboolean button_release(GtkWidget *layout_preview, GdkEventButton *event);
-static gboolean button_press(GtkWidget *layout_preview, GdkEventButton *event);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *layout_preview, GdkEventExpose *event);
-#endif
-enum
-{
+enum {
 	COLOR_CHANGED,
 	EMPTY,
 	LAST_SIGNAL
 };
 static guint signals[LAST_SIGNAL] = {};
-struct GtkLayoutPreviewPrivate
-{
+struct GtkLayoutPreviewPrivate {
 	System *system;
 	Rect2<float> area;
 	Style* selected_style;
 	Box* selected_box;
 	transformation::Chain *transformation_chain;
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkLayoutPreviewPrivate *>(gtk_layout_preview_get_instance_private(GTK_LAYOUT_PREVIEW(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkLayoutPreview, gtk_layout_preview, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkLayoutPreview));
+static gboolean button_release(GtkWidget *layout_preview, GdkEventButton *event);
+static gboolean button_press(GtkWidget *layout_preview, GdkEventButton *event);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *layout_preview, GdkEventExpose *event);
+#endif
 static void gtk_layout_preview_class_init(GtkLayoutPreviewClass *klass)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS(klass);
-	g_type_class_add_private(obj_class, sizeof(GtkLayoutPreviewPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS(klass);
 	widget_class->button_release_event = button_release;
 	widget_class->button_press_event = button_press;
diff --git a/source/gtk/Range2D.cpp b/source/gtk/Range2D.cpp
index b2f8266..7cd9f91 100644
--- a/source/gtk/Range2D.cpp
+++ b/source/gtk/Range2D.cpp
@@ -20,16 +20,6 @@
 #include "Color.h"
 using namespace std;
 
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_RANGE_2D, GtkRange2DPrivate))
-G_DEFINE_TYPE (GtkRange2D, gtk_range_2d, GTK_TYPE_DRAWING_AREA);
-static gboolean button_release(GtkWidget *range_2d, GdkEventButton *event);
-static gboolean button_press(GtkWidget *range_2d, GdkEventButton *event);
-static gboolean motion_notify(GtkWidget *widget, GdkEventMotion *event);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *range_2d, GdkEventExpose *event);
-#endif
 enum {
 	VALUES_CHANGED, LAST_SIGNAL
 };
@@ -46,6 +36,16 @@ struct GtkRange2DPrivate {
 	GdkDevice *pointer_grab;
 #endif
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkRange2DPrivate *>(gtk_range_2d_get_instance_private(GTK_RANGE_2D(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkRange2D, gtk_range_2d, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkRange2D));
+static gboolean button_release(GtkWidget *range_2d, GdkEventButton *event);
+static gboolean button_press(GtkWidget *range_2d, GdkEventButton *event);
+static gboolean motion_notify(GtkWidget *widget, GdkEventMotion *event);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *range_2d, GdkEventExpose *event);
+#endif
 static void finalize(GObject *range_2d_obj)
 {
 	GtkRange2DPrivate *ns = GET_PRIVATE(range_2d_obj);
@@ -62,7 +62,6 @@ static void gtk_range_2d_class_init(GtkRange2DClass *range_2d_class)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS(range_2d_class);
 	obj_class->finalize = finalize;
-	g_type_class_add_private(obj_class, sizeof(GtkRange2DPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS(range_2d_class);
 	widget_class->button_release_event = button_release;
 	widget_class->button_press_event = button_press;
diff --git a/source/gtk/Swatch.cpp b/source/gtk/Swatch.cpp
index bb39244..f8c39e2 100644
--- a/source/gtk/Swatch.cpp
+++ b/source/gtk/Swatch.cpp
@@ -21,15 +21,6 @@
 #include <math.h>
 #include <boost/math/special_functions/round.hpp>
 
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_SWATCH, GtkSwatchPrivate))
-G_DEFINE_TYPE (GtkSwatch, gtk_swatch, GTK_TYPE_DRAWING_AREA);
-static gboolean button_release(GtkWidget *swatch, GdkEventButton *event);
-static gboolean button_press(GtkWidget *swatch, GdkEventButton *event);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
-#endif
 enum {
 	ACTIVE_COLOR_CHANGED, COLOR_CHANGED, COLOR_ACTIVATED, CENTER_ACTIVATED, LAST_SIGNAL
 };
@@ -44,6 +35,15 @@ struct GtkSwatchPrivate
 	GtkStyleContext *context;
 #endif
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkSwatchPrivate *>(gtk_swatch_get_instance_private(GTK_SWATCH(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkSwatch, gtk_swatch, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkSwatch));
+static gboolean button_release(GtkWidget *swatch, GdkEventButton *event);
+static gboolean button_press(GtkWidget *swatch, GdkEventButton *event);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
+#endif
 static void finalize(GObject *obj)
 {
 #if GTK_MAJOR_VERSION >= 3
@@ -56,7 +56,6 @@ static void gtk_swatch_class_init(GtkSwatchClass *swatch_class)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS(swatch_class);
 	obj_class->finalize = finalize;
-	g_type_class_add_private(obj_class, sizeof(GtkSwatchPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS(swatch_class);
 	widget_class->button_release_event = button_release;
 	widget_class->button_press_event = button_press;
diff --git a/source/gtk/Zoomed.cpp b/source/gtk/Zoomed.cpp
index c64664b..772d62a 100644
--- a/source/gtk/Zoomed.cpp
+++ b/source/gtk/Zoomed.cpp
@@ -23,16 +23,6 @@
 #include <algorithm>
 #include <sstream>
 #include <vector>
-
-#define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), GTK_TYPE_ZOOMED, GtkZoomedPrivate))
-G_DEFINE_TYPE(GtkZoomed, gtk_zoomed, GTK_TYPE_DRAWING_AREA);
-static void finalize(GObject *zoomed_obj);
-static gboolean button_press(GtkWidget *node_system, GdkEventButton *event);
-#if GTK_MAJOR_VERSION >= 3
-static gboolean draw(GtkWidget *widget, cairo_t *cr);
-#else
-static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
-#endif
 enum {
 	COLOR_CHANGED,
 	ACTIVATED,
@@ -57,11 +47,19 @@ struct GtkZoomedPrivate {
 	GtkStyleContext *context;
 #endif
 };
+#define GET_PRIVATE(obj) reinterpret_cast<GtkZoomedPrivate *>(gtk_zoomed_get_instance_private(GTK_ZOOMED(obj)))
+G_DEFINE_TYPE_WITH_CODE(GtkZoomed, gtk_zoomed, GTK_TYPE_DRAWING_AREA, G_ADD_PRIVATE(GtkZoomed));
+static void finalize(GObject *zoomed_obj);
+static gboolean button_press(GtkWidget *node_system, GdkEventButton *event);
+#if GTK_MAJOR_VERSION >= 3
+static gboolean draw(GtkWidget *widget, cairo_t *cr);
+#else
+static gboolean expose(GtkWidget *widget, GdkEventExpose *event);
+#endif
 static void gtk_zoomed_class_init(GtkZoomedClass *zoomed_class)
 {
 	GObjectClass *obj_class = G_OBJECT_CLASS(zoomed_class);
 	obj_class->finalize = finalize;
-	g_type_class_add_private(obj_class, sizeof(GtkZoomedPrivate));
 	GtkWidgetClass *widget_class = GTK_WIDGET_CLASS(zoomed_class);
 	widget_class->button_press_event = button_press;
 #if GTK_MAJOR_VERSION >= 3
