{"version_major": 1, "version_minor": 1, "meson_version": "1.4.0", "functions": {"add_global_arguments": {"name": "add_global_arguments", "description": "Adds global arguments to the compiler command line.", "since": null, "deprecated": null, "notes": ["Usually you should use [[add_project_arguments]] instead, because that works even when you project is used as a subproject.", "You must pass always arguments individually `arg1, arg2, ...` rather than as a string `'arg1 arg2', ...`"], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"language": {"name": "language", "description": "Specifies the language(s) that the arguments should be\napplied to. If a list of languages is given, the arguments are added\nto each of the corresponding compiler command lines. Note that there\nis no way to remove an argument set in this way. If you have an\nargument that is only used in a subset of targets, you have to specify\nit in per-target flags.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "A boolean specifying whether the arguments should be\napplied to the native or cross compilation. If `true` the arguments\nwill only be used for native compilations. If `false` the arguments\nwill only be used in cross compilations. If omitted, the flags are\nadded to native compilations if compiling natively and cross\ncompilations (only) when cross compiling.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Compiler argument", "description": "The compiler arguments to add", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_global_link_arguments": {"name": "add_global_link_arguments", "description": "Adds global arguments to the linker command line.\n\nLike [[add_global_arguments]] but the arguments are passed to the linker.", "since": null, "deprecated": null, "notes": ["Usually you should use [[add_project_link_arguments]] instead, because that works even when you project is used as a subproject.", "You must pass always arguments individually `arg1, arg2, ...` rather than as a string `'arg1 arg2', ...`"], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"language": {"name": "language", "description": "Specifies the language(s) that the arguments should be\napplied to. If a list of languages is given, the arguments are added\nto each of the corresponding compiler command lines. Note that there\nis no way to remove an argument set in this way. If you have an\nargument that is only used in a subset of targets, you have to specify\nit in per-target flags.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "A boolean specifying whether the arguments should be\napplied to the native or cross compilation. If `true` the arguments\nwill only be used for native compilations. If `false` the arguments\nwill only be used in cross compilations. If omitted, the flags are\nadded to native compilations if compiling natively and cross\ncompilations (only) when cross compiling.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Linker argument", "description": "The linker arguments to add", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_languages": {"name": "add_languages", "description": "Add programming languages used by the project.\n\nThis is equivalent to having\nthem in the `project` declaration. This function is usually used to\nadd languages that are only used under some conditions.\n\nReturns `true` if all languages specified were found and `false` otherwise.\n\nIf `native` is omitted, the languages may be used for either build or host\nmachine, but are never required for the build machine.  (i.e. it is equivalent\nto `add_languages(*langs*, native: false, required: *required*) and\nadd_languages(*langs*, native: true, required: false)`. This default behaviour\nmay change to `native: false` in a future Meson version.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\nproject('foobar', 'c')\n\nif compiling_for_osx\n  add_languages('objc')\nendif\nif add_languages('cpp', required : false)\n  executable('cpp-app', 'main.cpp')\nendif\n\n# More code...\n```\n", "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {"native": {"name": "native", "description": "If set to `true`, the language will be used to compile for the build\nmachine, if `false`, for the host machine.\n", "since": "0.54.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "If set to `true`, Meson will halt if any of the languages\nspecified are not found. *(since 0.47.0)* The value of a\n[`feature`](Build-options.md#features) option can also be passed.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Language", "description": "The languages to add", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_project_arguments": {"name": "add_project_arguments", "description": "Adds project specific arguments to the compiler command line.\n\nThis function behaves in the same way as [[add_global_arguments]] except\nthat the arguments are only used for the current project, they won't\nbe used in any other subproject.", "since": null, "deprecated": null, "notes": ["You must pass always arguments individually `arg1, arg2, ...` rather than as a string `'arg1 arg2', ...`"], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"language": {"name": "language", "description": "Specifies the language(s) that the arguments should be\napplied to. If a list of languages is given, the arguments are added\nto each of the corresponding compiler command lines. Note that there\nis no way to remove an argument set in this way. If you have an\nargument that is only used in a subset of targets, you have to specify\nit in per-target flags.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "A boolean specifying whether the arguments should be\napplied to the native or cross compilation. If `true` the arguments\nwill only be used for native compilations. If `false` the arguments\nwill only be used in cross compilations. If omitted, the flags are\nadded to native compilations if compiling natively and cross\ncompilations (only) when cross compiling.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Compiler argument", "description": "The compiler arguments to add", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_project_dependencies": {"name": "add_project_dependencies", "description": "Adds arguments to the compiler and linker command line, so that the\ngiven set of dependencies is included in all build products for this\nproject.", "since": "0.63.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"language": {"name": "language", "description": "Specifies the language(s) that the arguments should be\napplied to. If a list of languages is given, the arguments are added\nto each of the corresponding compiler command lines. Note that there\nis no way to remove an argument set in this way. If you have an\nargument that is only used in a subset of targets, you have to specify\nit in per-target flags.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "A boolean specifying whether the arguments should be\napplied to the native or cross compilation. If `true` the arguments\nwill only be used for native compilations. If `false` the arguments\nwill only be used in cross compilations. If omitted, the flags are\nadded to native compilations if compiling natively and cross\ncompilations (only) when cross compiling.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "dependencies", "description": "The dependencies to add; if internal dependencies are included, they must not include any built object.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}], "type_str": "dep", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_project_link_arguments": {"name": "add_project_link_arguments", "description": "Adds project specific arguments to the linker command line.\n\nLike [[add_project_arguments]] but the arguments are passed to the linker.", "since": null, "deprecated": null, "notes": ["You must pass always arguments individually `arg1, arg2, ...` rather than as a string `'arg1 arg2', ...`"], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"language": {"name": "language", "description": "Specifies the language(s) that the arguments should be\napplied to. If a list of languages is given, the arguments are added\nto each of the corresponding compiler command lines. Note that there\nis no way to remove an argument set in this way. If you have an\nargument that is only used in a subset of targets, you have to specify\nit in per-target flags.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "A boolean specifying whether the arguments should be\napplied to the native or cross compilation. If `true` the arguments\nwill only be used for native compilations. If `false` the arguments\nwill only be used in cross compilations. If omitted, the flags are\nadded to native compilations if compiling natively and cross\ncompilations (only) when cross compiling.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Linker argument", "description": "The linker arguments to add", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_test_setup": {"name": "add_test_setup", "description": "Add a custom test setup. This setup can be used to run the tests with a\ncustom setup, for example under Valgrind.\n\nTo use the test setup, run `meson test --setup=*name*` inside the\nbuild dir.\n\nNote that all these options are also available while running the\n`meson test` script for running tests instead of `ninja test` or\n`msbuild RUN_TESTS.vcxproj`, etc depending on the backend.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"name": {"name": "name", "description": "The name of the test setup", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"env": {"name": "env", "description": "environment variables to set\n, such as `['NAME1=value1', 'NAME2=value2']`,\nor an [[@env]] object which allows more sophisticated\nenvironment juggling. *(Since 0.52.0)* A dictionary is also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "exclude_suites": {"name": "exclude_suites", "description": "A list of test suites that should be excluded when using this setup. Suites specified in the `--suite` option to `meson test` will always run, overriding `add_test_setup` if necessary.", "since": "0.57.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "exe_wrapper": {"name": "exe_wrapper", "description": "The command or script followed by the arguments to it", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "external_program", "holds": []}]}], "type_str": "list[str|external_program]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gdb": {"name": "gdb", "description": "If `true`, the tests are also run under `gdb`", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "is_default": {"name": "is_default", "description": "Set whether this is the default test setup.\nIf `true`, the setup will be used whenever `meson test` is run\nwithout the `--setup` option.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "timeout_multiplier": {"name": "timeout_multiplier", "description": "A number to multiply the test timeout with.\n*Since 0.57* if timeout_multiplier is `<= 0` the test has infinite duration,\nin previous versions of Meson the test would fail with a timeout immediately.\n", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "1", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "alias_target": {"name": "alias_target", "description": "This function creates a new top-level target. Like all top-level\ntargets, this integrates with the selected backend. For instance, with\nyou can run it as `meson compile target_name`. This is a dummy target\nthat does not execute any command, but ensures that all dependencies\nare built. Dependencies can be any build target. Since 0.60.0, this includes\n[[@run_tgt]].", "since": "0.52.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "alias_tgt", "holds": []}], "returns_str": "alias_tgt", "posargs": {"target_name": {"name": "target_name", "description": "The name of the alias target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "Dep", "description": "The targets to depend on", "since": null, "deprecated": null, "type": [{"obj": "tgt", "holds": []}], "type_str": "tgt", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "assert": {"name": "assert", "description": "Abort with an error message if `condition` evaluates to `false`.", "since": null, "deprecated": null, "notes": ["The `message` argument is optional since 0.53.0 and defaults to print the condition statement."], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"condition": {"name": "condition", "description": "Abort if this evaluates to `false`", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"message": {"name": "message", "description": "The error message to print.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "benchmark": {"name": "benchmark", "description": "Creates a benchmark item that will be run when the benchmark target is\nrun. The behavior of this function is identical to [[test]]\nexcept for:\n\n* benchmark() has no `is_parallel` keyword because benchmarks are not run in parallel\n* benchmark() does not automatically add the `MALLOC_PERTURB_` environment variable\n\nDefined benchmarks can be run in a backend-agnostic way by calling\n`meson test --benchmark` inside the build dir, or by using backend-specific\ncommands, such as `ninja benchmark` or `msbuild RUN_TESTS.vcxproj`.", "since": null, "deprecated": null, "notes": ["Prior to 0.52.0 benchmark would warn that `depends` and `priority` were unsupported, this is incorrect."], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"name": {"name": "name", "description": "The *unique* test id", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "executable": {"name": "executable", "description": "The program to execute. *(Since 1.4.0)* A CustomTarget is also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "exe", "holds": []}, {"obj": "jar", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "exe|jar|external_program|file|custom_tgt|custom_idx", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Arguments to pass to the executable", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "tgt", "holds": []}]}], "type_str": "list[str|file|tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "specifies that this test depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where test finds those\ntargets internally, e.g. plugins or globbing. Those targets are built\nbefore test is executed even if they have `build_by_default : false`.\n", "since": "0.46.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "env": {"name": "env", "description": "environment variables to set, such as `['NAME1=value1',\n'NAME2=value2']`, or an [[@env]] object which allows more sophisticated\nenvironment juggling. *(Since 0.52.0)* A dictionary is also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "priority": {"name": "priority", "description": "specifies the priority of a test. Tests with a\nhigher priority are *started* before tests with a lower priority.\nThe starting order of tests with identical priorities is\nimplementation-defined. The default priority is 0, negative numbers are\npermitted.\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "0", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "protocol": {"name": "protocol", "description": "specifies how the test results are parsed and can\nbe one of `exitcode`, `tap`, or `gtest`. For more information about test\nharness protocol read [Unit Tests](Unit-tests.md). The following values are\naccepted:\n\n- `exitcode`: the executable's exit code is used by the test harness\n  to record the outcome of the test).\n- `tap`: [Test Anything Protocol](https://www.testanything.org/).\n- `gtest` *(since 0.55.0)*: for Google Tests.\n- `rust` *(since 0.56.0)*: for native rust tests\n", "since": "0.50.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'exitcode'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "should_fail": {"name": "should_fail", "description": "when true the test is considered passed if the\nexecutable returns a non-zero return value (i.e. reports an error)\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "suite": {"name": "suite", "description": "`'label'` (or list of labels `['label1', 'label2']`)\nattached to this test. The suite name is qualified by a (sub)project\nname resulting in `(sub)project_name:label`. In the case of a list\nof strings, the suite names will be `(sub)project_name:label1`,\n`(sub)project_name:label2`, etc.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "timeout": {"name": "timeout", "description": "the amount of seconds the test is allowed to run, a test\nthat exceeds its time limit is always considered failed, defaults to\n30 seconds. *Since 0.57* if timeout is `<= 0` the test has infinite duration,\nin previous versions of Meson the test would fail with a timeout immediately.\n", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "30", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "verbose": {"name": "verbose", "description": "if true, forces the test results to be logged as if `--verbose` was passed\nto `meson test`.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "workdir": {"name": "workdir", "description": "absolute path that will be used as the working directory\nfor the test\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "both_libraries": {"name": "both_libraries", "description": "Builds both a static and shared library with the given sources.\nPositional and keyword arguments are otherwise the same as for\n[[library]]. Source files will be compiled only once and\nobject files will be reused to build both shared and static libraries,\nunless `b_staticpic` user option or `pic` argument are set to false in\nwhich case sources will be compiled twice.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "both_libs", "holds": []}], "returns_str": "both_libs", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_shared_args": {"name": "<lang>_shared_args", "description": "Arguments that are only passed to a shared library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_static_args": {"name": "<lang>_static_args", "description": "Arguments that are only passed to a static library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "darwin_versions": {"name": "darwin_versions", "description": "Defines the `compatibility version` and `current version` for the dylib on macOS.\nIf a list is specified, it must be\neither zero, one, or two elements. If only one element is specified\nor if it's not a list, the specified value will be used for setting\nboth compatibility version and current version. If unspecified, the\n`soversion` will be used as per the aforementioned rules.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|int|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pic": {"name": "pic", "description": "Builds the library as positional independent code\n(so it can be linked into a shared library). This\noption has no effect on Windows and OS X since it doesn't make\nsense on Windows and PIC cannot be disabled on OS X.\n", "since": "0.36.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prelink": {"name": "prelink", "description": "If `true` the object files in the target will be prelinked,\nmeaning that it will contain only one prelinked\nobject file rather than the individual object files.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"rlib\" or \"dylib\" crate depending on the library\n  type being build.\n- 'c': Create a \"cdylib\" or \"staticlib\" crate depending on the library\n  type being build.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "soversion": {"name": "soversion", "description": "A string or integer specifying the soversion of this shared library,\nsuch as `0`. On Linux and Windows this is used to set the\nsoversion (or equivalent) in the filename. For example, if\n`soversion` is `4`, a Windows DLL will be called `foo-4.dll` and one\nof the aliases of the Linux shared library would be\n`libfoo.so.4`. If this is not specified, the first part of `version`\nis used instead (see below). For example, if `version` is `3.6.0` and\n`soversion` is not defined, it is set to `3`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}], "type_str": "str|int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_shared_args": {"name": "vala_shared_args", "description": "Arguments that are only passed to a shared library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_static_args": {"name": "vala_static_args", "description": "Arguments that are only passed to a static library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "A string specifying the version of this shared library,\nsuch as `1.1.0`. On Linux and OS X, this is used to set the shared\nlibrary version in the filename, such as `libfoo.so.1.1.0` and\n`libfoo.1.1.0.dylib`. If this is not specified, `soversion` is used\ninstead (see above).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\n*(Since 1.3.0)* [[@custom_idx]] are supported\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "build_target": {"name": "build_target", "description": "Creates a build target whose type can be set dynamically with the\n`target_type` keyword argument.\n\n`target_type` may be set to one of:\n\n- `executable` (see [[executable]])\n- `shared_library` (see [[shared_library]])\n- `shared_module` (see [[shared_module]])\n- `static_library` (see [[static_library]])\n- `both_libraries` (see [[both_libraries]])\n- `library` (see [[library]])\n- `jar` (see [[jar]])*\n\nThis declaration:\n\n```meson\nexecutable(<arguments and keyword arguments>)\n```\n\nis equivalent to this:\n\n```meson\nbuild_target(<arguments and keyword arguments>, target_type : 'executable')\n```\n\nThe lists for the kwargs (such as `sources`, `objects`, and `dependencies`) are\nalways flattened, which means you can freely nest and add lists while\ncreating the final list.\n\nThe returned object also has methods that are documented in [[@build_tgt]].\n\n*\"jar\" is deprecated because it is fundementally a different thing than the\nother build_target types.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "build_tgt", "holds": []}], "returns_str": "build_tgt", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_shared_args": {"name": "<lang>_shared_args", "description": "Arguments that are only passed to a shared library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_static_args": {"name": "<lang>_static_args", "description": "Arguments that are only passed to a static library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "darwin_versions": {"name": "darwin_versions", "description": "Defines the `compatibility version` and `current version` for the dylib on macOS.\nIf a list is specified, it must be\neither zero, one, or two elements. If only one element is specified\nor if it's not a list, the specified value will be used for setting\nboth compatibility version and current version. If unspecified, the\n`soversion` will be used as per the aforementioned rules.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|int|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "export_dynamic": {"name": "export_dynamic", "description": "when set to true causes the target's symbols to be\n dynamically exported, allowing modules built using the\n [[shared_module]] function to refer to functions,\n variables and other symbols defined in the executable itself. Implies\n the `implib` argument.\n", "since": "0.45.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implib": {"name": "implib", "description": "When set to true, an import library is generated for the\nexecutable (the name of the import library is based on *exe_name*).\nAlternatively, when set to a string, that gives the base name for\nthe import library.  The import library is used when the returned\nbuild target object appears in `link_with:` elsewhere.  Only has any\neffect on platforms where that is meaningful (e.g. Windows). Implies\nthe `export_dynamic` argument.\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "str", "holds": []}], "type_str": "bool|str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "java_resources": {"name": "java_resources", "description": "Resources to be added to the jar", "since": "0.62.0", "deprecated": null, "type": [{"obj": "structured_src", "holds": []}], "type_str": "structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "main_class": {"name": "main_class", "description": "Main class for running the built jar", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pic": {"name": "pic", "description": "Builds the library as positional independent code\n(so it can be linked into a shared library). This\noption has no effect on Windows and OS X since it doesn't make\nsense on Windows and PIC cannot be disabled on OS X.\n", "since": "0.36.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pie": {"name": "pie", "description": "Build a position-independent executable.", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prelink": {"name": "prelink", "description": "If `true` the object files in the target will be prelinked,\nmeaning that it will contain only one prelinked\nobject file rather than the individual object files.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"rlib\" or \"dylib\" crate depending on the library\n  type being build.\n- 'c': Create a \"cdylib\" or \"staticlib\" crate depending on the library\n  type being build.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "soversion": {"name": "soversion", "description": "A string or integer specifying the soversion of this shared library,\nsuch as `0`. On Linux and Windows this is used to set the\nsoversion (or equivalent) in the filename. For example, if\n`soversion` is `4`, a Windows DLL will be called `foo-4.dll` and one\nof the aliases of the Linux shared library would be\n`libfoo.so.4`. If this is not specified, the first part of `version`\nis used instead (see below). For example, if `version` is `3.6.0` and\n`soversion` is not defined, it is set to `3`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}], "type_str": "str|int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "target_type": {"name": "target_type", "description": "The actual target type to build", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_shared_args": {"name": "vala_shared_args", "description": "Arguments that are only passed to a shared library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_static_args": {"name": "vala_static_args", "description": "Arguments that are only passed to a static library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "A string specifying the version of this shared library,\nsuch as `1.1.0`. On Linux and OS X, this is used to set the shared\nlibrary version in the filename, such as `libfoo.so.1.1.0` and\n`libfoo.1.1.0.dylib`. If this is not specified, `soversion` is used\ninstead (see above).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\nThis can be used to expose which functions a shared_module loaded by an\nexecutable will be allowed to use.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "configuration_data": {"name": "configuration_data", "description": "Creates an empty configuration object. You should add your\nconfiguration with the [[@cfg_data]] method calls and\nfinally use it in a call to [[configure_file]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "cfg_data", "holds": []}], "returns_str": "cfg_data", "posargs": {}, "optargs": {"data": {"name": "data", "description": "Optional dictionary to specify an initial data set. If\nprovided, each key/value pair is added into the [[@cfg_data]] object\nas if the [[cfg_data.set]] method was called for each of them.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "dict[str|bool|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "configure_file": {"name": "configure_file", "description": "This function can run in three modes depending on the keyword arguments\npassed to it.\n\nWhen a [[@cfg_data]] object is passed\nto the `configuration:` keyword argument, it takes a template file as\nthe `input:` (optional) and produces the `output:` (required) by\nsubstituting values from the configuration data as detailed in [the\nconfiguration file documentation](Configuration.md). *(since 0.49.0)*\nA dictionary can be passed instead of a\n[[@cfg_data]] object.\n\nWhen a list of strings is passed to the `command:` keyword argument,\nit takes any source or configured file as the `input:` and assumes\nthat the `output:` is produced when the specified command is run.\n\n*(since 0.47.0)* When the `copy:` keyword argument is set to `true`,\nthis function will copy the file provided in `input:` to a file in the\nbuild directory with the name `output:` in the current directory.", "since": null, "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values between 0.62 -- 1.1.0."], "example": null, "returns": [{"obj": "file", "holds": []}], "returns_str": "file", "posargs": {}, "optargs": {}, "kwargs": {"capture": {"name": "capture", "description": "When this argument is set to true,\nMeson captures `stdout` of the `command` and writes it to the target\nfile specified as `output`.\n", "since": "0.41.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "command": {"name": "command", "description": "As explained above, if specified, Meson does not create\nthe file itself but rather runs the specified command, which allows\nyou to do fully custom file generation. *(since 0.52.0)* The command can contain\nfile objects and more than one file can be passed to the `input` keyword\nargument, see [[custom_target]] for details about string\nsubstitutions.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "configuration": {"name": "configuration", "description": "As explained above, when passed this will provide the replacement\ndata for the input file (if provided) or key value pairs to be\nwritten to the output.\n", "since": null, "deprecated": null, "type": [{"obj": "cfg_data", "holds": []}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "cfg_data|dict[str|int|bool]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "copy": {"name": "copy", "description": "As explained above, if specified Meson only\ncopies the file from input to output.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depfile": {"name": "depfile", "description": "A dependency file that the command can write listing\nall the additional files this target depends on. A change\nin any one of these files triggers a reconfiguration.\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "encoding": {"name": "encoding", "description": "Set the file encoding for the input and output file.\nThe supported encodings are those of python3, see\n[standard-encodings](https://docs.python.org/3/library/codecs.html#standard-encodings).\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'utf-8'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "format": {"name": "format", "description": "The format of defines. It defaults to `'meson'`, and so substitutes\n`#mesondefine` statements and variables surrounded by `@` characters, you can also use `'cmake'`\nto replace `#cmakedefine` statements and variables with the `${variable}` syntax. Finally you can use\n`'cmake@'` in which case substitutions will apply on `#cmakedefine` statements and variables with\nthe `@variable@` syntax.\n", "since": "0.46.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'meson'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "input": {"name": "input", "description": "The input file name. If it's not specified in configuration\nmode, all the variables in the `configuration:` object (see above)\nare written to the `output:` file.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When true, this generated file is installed during\nthe install step, and `install_dir` must be set and not empty. When false, this\ngenerated file is not installed regardless of the value of `install_dir`.\nWhen omitted it defaults to true when `install_dir` is set and not empty,\nfalse otherwise.\n", "since": "0.50.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "The subdirectory to install the generated file to\n(e.g. `share/myproject`), if omitted or given the value of empty\nstring, the file is not installed.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default the file has no install\ntag which means it is not being installed when `--tags` argument is specified.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "macro_name": {"name": "macro_name", "description": "When specified, macro guards will be used instead of '#pragma once'. The\nmacro guard name will be the specified name.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output": {"name": "output", "description": "The output file name. *(since 0.41.0)* may contain\n`@PLAINNAME@` or `@BASENAME@` substitutions. In configuration mode,\nthe permissions of the input file (if it is specified) are copied to\nthe output file.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output_format": {"name": "output_format", "description": "The format of the output to generate when no input\nwas specified. It defaults to `c`, in which case preprocessor directives\nwill be prefixed with `#`, you can also use `nasm`, in which case the\nprefix will be `%`. *(since 1.3.0)* `json` format can also be used.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "custom_target": {"name": "custom_target", "description": "Create a custom top level build target. The only positional argument\nis the name of this target and cannot contain path separators (`/` or `\\`).\nThe name of custom target might not be used by every backends, for instance with\nthe Ninja backend, `subdir/meson.build` containing the example below,\n`ninja -C builddir foo` or `ninja -C builddir subdir/foo` won't work,\nit is instead `ninja -C builddir subdir/file.txt`. However, `meson compile subdir/foo`\nis accepted.\n```meson\ncustom_target('foo', output: 'file.txt', ...)\n```\n\n*Since 0.60.0* the name argument is optional and defaults to the basename of the first\noutput (`file.txt` in the example above).\n\nThe list of strings passed to the `command` keyword argument accept\nthe following special string substitutions:\n\n- `@INPUT@`: the full path to the input passed to `input`. If more than\n  one input is specified, all of them will be substituted as separate\n  arguments only if the command uses `'@INPUT@'` as a\n  standalone-argument. For instance, this would not work: `command :\n  ['cp', './@INPUT@']`, but this would: `command : ['cp', '@INPUT@']`.\n- `@OUTPUT@`: the full path to the output passed to `output`. If more\n  than one outputs are specified, the behavior is the same as\n  `@INPUT@`.\n- `@INPUT0@` `@INPUT1@` `...`: the full path to the input with the specified array index in `input`\n- `@OUTPUT0@` `@OUTPUT1@` `...`: the full path to the output with the specified array index in `output`\n- `@OUTDIR@`: the full path to the directory where the output(s) must be written\n- `@DEPFILE@`: the full path to the dependency file passed to `depfile`\n- `@PLAINNAME@`: the input filename, without a path\n- `@BASENAME@`: the input filename, with extension removed\n- `@PRIVATE_DIR@` *(since 0.50.1)*: path to a directory where the custom target must store all its intermediate files.\n- `@SOURCE_ROOT@`: the path to the root of the source tree. Depending on the backend,\n  this may be an absolute or a relative to current workdir path.\n- `@BUILD_ROOT@`: the path to the root of the build tree. Depending on the backend,\n  this may be an absolute or a relative to current workdir path.\n- `@CURRENT_SOURCE_DIR@`: this is the directory where the currently\n  processed meson.build is located in.  Depending on the backend,\n  this may be an absolute or a relative to current workdir path.\n\n*(since 0.47.0)* The `depfile` keyword argument also accepts the\n`@BASENAME@` and `@PLAINNAME@` substitutions.\n\nThe returned object also has methods that are documented in [[@custom_tgt]].", "since": null, "deprecated": null, "notes": ["Assuming that `command:` is executed by a POSIX `sh` shell\nis not portable, notably to Windows. Instead, consider using a\n`native: true` [[executable]], or a python script.\n"], "warnings": ["the `install_mode` kwarg ignored integer values between 0.60.0 -- 1.1.0."], "example": null, "returns": [{"obj": "custom_tgt", "holds": []}], "returns_str": "custom_tgt", "posargs": {}, "optargs": {"name": {"name": "name", "description": "The *unique* id of the custom target\n\nThis posarg is optional *since 0.60.0*. It defaults to the basename\nof the first output.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {"build_always": {"name": "build_always", "description": "If `true` this target is always considered out of\ndate and is rebuilt every time.  Equivalent to setting both\n`build_always_stale` and `build_by_default` to true.\n", "since": null, "deprecated": "0.47.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_always_stale": {"name": "build_always_stale", "description": "If `true` the target is always considered out of date.\nUseful for things such as build timestamps or revision control tags.\nThe associated command is run even if the outputs are up to date.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to true, to\nhave this target be built by default. This means it will be built when\n`meson compile` is called without any arguments. The default value is `false`.\n\n*(since 0.50.0)* If `build_by_default` is explicitly set to false, `install`\nwill no longer override it. If `build_by_default` is not set, `install` will\nstill determine its default.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "capture": {"name": "capture", "description": "There are some compilers that can't be told to write\ntheir output to a file but instead write it to standard output. When\nthis argument is set to true, Meson captures `stdout` and writes it\nto the target file. Note that your command argument list may not\ncontain `@OUTPUT@` when capture mode is active.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "command": {"name": "command", "description": "Command to run to create outputs from inputs. The command\nmay be strings or the return value of functions that return file-like\nobjects such as [[find_program]],\n[[executable]], [[configure_file]],\n[[files]], [[custom_target]], etc.\nMeson will automatically insert the appropriate dependencies on\ntargets and files listed in this keyword argument.\nNote: always specify commands in array form `['commandname',\n'-arg1', '-arg2']` rather than as a string `'commandname -arg1\n-arg2'` as the latter will *not* work.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "exe", "holds": []}, {"obj": "external_program", "holds": []}]}], "type_str": "list[str|file|exe|external_program]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "console": {"name": "console", "description": "Keyword argument conflicts with `capture`, and is meant\nfor commands that are resource-intensive and take a long time to\nfinish. With the Ninja backend, setting this will add this target\nto [Ninja's `console` pool](https://ninja-build.org/manual.html#_the_literal_console_literal_pool),\nwhich has special properties such as not buffering stdout and\nserializing all targets in this pool.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depend_files": {"name": "depend_files", "description": "files ([[@str]],\n[[@file]], or the return value of [[configure_file]] that\nthis target depends on but are not listed in the `command` keyword\nargument. Useful for adding regen dependencies.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "Specifies that this target depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where you have a tool that\ne.g. does globbing internally. Usually you should just put the\ngenerated sources as inputs and Meson will set up all dependencies\nautomatically.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depfile": {"name": "depfile", "description": "A dependency file that the command can write listing\nall the additional files this target depends on, for example a C\ncompiler would list all the header files it included, and a change\nin any one of these files triggers a recompilation.\n\n*(since 0.47.0)* the `@BASENAME@` and `@PLAINNAME@` substitutions\nare also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "env": {"name": "env", "description": "environment variables to set, such as\n`{'NAME1': 'value1', 'NAME2': 'value2'}` or `['NAME1=value1', 'NAME2=value2']`,\nor an [[@env]] object which allows more\nsophisticated environment juggling.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "feed": {"name": "feed", "description": "There are some compilers that can't be told to read\ntheir input from a file and instead read it from standard input. When this\nargument is set to `true`, Meson feeds the input file to `stdin`. Note that\nyour argument list may not contain `@INPUT@` when feed mode is active.\n", "since": "0.59.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "input": {"name": "input", "description": "List of source files. *(since 0.41.0)* the list is flattened.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When true, one or more files of this target are installed during the install step (see `install_dir` for details).", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "If only one install_dir is provided, all outputs are installed there.\n*Since 0.40.0* Allows you to specify the installation directory for each\ncorresponding output. For example:\n```meson\ncustom_target('different-install-dirs',\n  output : ['first.file', 'second.file'],\n  install : true,\n  install_dir : ['somedir', 'otherdir'])\n```\nThis would install `first.file` to `somedir` and `second.file` to `otherdir`.\n\nTo only install some outputs, pass `false` for the outputs that you\ndon't want installed. For example:\n```meson\n    custom_target('only-install-second',\n      output : ['first.file', 'second.file'],\n      install : true,\n      install_dir : [false, 'otherdir'])\n```\nThis would install `second.file` to `otherdir` and not install `first.file`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|list[str|bool]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "The file mode and optionally the owner/uid and group/gid.\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A list of strings, one per output, used by the `meson install --tags` command\nto install only a subset of the files.\n\nBy default all outputs have no install tag which means they are not being\ninstalled when `--tags` argument is specified. If only one tag is specified,\nit is assumed that all outputs have the same tag. `false` can be used for\noutputs that have no tag or are not installed.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output": {"name": "output", "description": "List of output files.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "debug": {"name": "debug", "description": "Write the argument string to the meson build log.", "since": "0.63.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"message": {"name": "message", "description": "The message to print", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "msg", "description": "Additional parameters will be separated by spaces", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "declare_dependency": {"name": "declare_dependency", "description": "This function returns a [[@dep]] object that\nbehaves like the return value of [[dependency]] but is\ninternal to the current build. The main use case for this is in\nsubprojects. This allows a subproject to easily specify how it should\nbe used. This makes it interchangeable with the same dependency that\nis provided externally by the system.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {}, "optargs": {}, "kwargs": {"compile_args": {"name": "compile_args", "description": "Compile arguments to use.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "the directories to add to the string search path (i.e. `-J` switch for DMD).\nMust be [[@inc]] objects or plain strings.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "str|int|list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Other dependencies needed to use this dependency.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "extra files to add to targets.\nmostly used for IDE integration.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "the directories to add to header search path,\nmust be [[@inc]] objects or *(since 0.50.0)* plain strings.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Link arguments to use.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Libraries to link fully, same as [[executable]].", "since": "0.46.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}]}], "type_str": "list[lib]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "Libraries to link against.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}]}], "type_str": "list[lib]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "a list of object files, to be linked directly into the targets that use the\ndependency.\n", "since": "1.1.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}]}], "type_str": "list[extracted_obj]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "sources to add to targets\n(or generated header files\nthat should be built before sources including them are built)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}]}], "type_str": "list[str|file|custom_tgt|custom_idx|generated_list]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "variables": {"name": "variables", "description": "a dictionary of arbitrary strings,\nthis is meant to be used\nin subprojects where special variables would be provided via cmake or\npkg-config. *since 0.56.0* it can also be a list of `'key=value'` strings.\n", "since": "0.54.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "the version of this dependency,\nsuch as `1.2.3`. Defaults to the project version.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "dependency": {"name": "dependency", "description": "Finds an external dependency (usually a library installed on your\nsystem) with the given name with `pkg-config` and [with\nCMake](Dependencies.md#cmake) if `pkg-config` fails. Additionally,\nframeworks (OSX only) and [library-specific fallback detection\nlogic](Dependencies.md#dependencies-with-custom-lookup-functionality)\nare also supported.\n\n*Since 0.60.0* more than one name can be provided, they will be tried in order\nand the first name to be found will be used. The fallback subproject will be\nused only if none of the names are found on the system. Once one of the name has\nbeen found, all other names are added into the cache so subsequent calls for any\nof those name will return the same value. This is useful in case a dependency\ncould have different names, such as `png` and `libpng`.\n\n* Since *0.64.0* a dependency fallback can be provided by WrapDB. Simply download\nthe database locally using `meson wrap update-db` command and Meson will\nautomatically fallback to subprojects provided by WrapDB if the dependency is\nnot found on the system and the project does not ship their own `.wrap` file.\n\nDependencies can also be resolved in two other ways:\n\n* if the same name was used in a `meson.override_dependency` prior to\n  the call to `dependency`, the overriding dependency will be returned\n  unconditionally; that is, the overriding dependency will be used\n  independent of whether an external dependency is installed in the system.\n  Typically, `meson.override_dependency` will have been used by a\n  subproject.\n\n* by a fallback subproject which, if needed, will be brought into the current\n  build specification as if [`subproject()`](#subproject) had been called.\n  The subproject can be specified with the `fallback` argument.  Alternatively,\n  if the `fallback` argument is absent, *since 0.55.0* Meson can\n  automatically identify a subproject as a fallback if a wrap file\n  [provides](Wrap-dependency-system-manual.md#provide-section) the\n  dependency, or if a subproject has the same name as the dependency.\n  In the latter case, the subproject must use `meson.override_dependency` to\n  specify the replacement, or Meson will report a hard error.  See the\n  [Wrap documentation](Wrap-dependency-system-manual.md#provide-section)\n  for more details.  This automatic search can be controlled using the\n  `allow_fallback` keyword argument.\n\nIf `dependency_name` is `''`, the dependency is always not found. So\nwith `required: false`, this always returns a dependency object for\nwhich the `found()` method returns `false`, and which can be passed\nlike any other dependency to the `dependencies:` keyword argument of a\n`build_target`. This can be used to implement a dependency which is\nsometimes not required e.g. in some branches of a conditional, or with\na `fallback:` kwarg, can be used to declare an optional dependency\nthat only looks in the specified subproject, and only if that's\nallowed by `--wrap-mode`.\n\nThe returned object [[@dep]] also has additional methods.", "since": null, "deprecated": null, "notes": ["This function supports additional [library-specific](Dependencies.md#dependencies-with-custom-lookup-functionality) keyword arguments that may also be accepted (e.g. `modules` specifies submodules to use for dependencies such as Qt5 or Boost. `components` allows the user to manually add CMake `COMPONENTS` for the `find_package` lookup)"], "warnings": [], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {}, "optargs": {}, "kwargs": {"allow_fallback": {"name": "allow_fallback", "description": "Specifies whether Meson should automatically pick a fallback subproject\nin case the dependency\nis not found in the system.  If `true` and the dependency is not found\non the system, Meson will fallback to a subproject that provides this\ndependency. If `false`, Meson will not fallback even if a subproject\nprovides this dependency.  By default, Meson will do so if `required`\nis `true` or  [`enabled`](Build-options.md#features); see the [Wrap\ndocumentation](Wrap-dependency-system-manual.md#provide-section)\nfor more details.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "default_options": {"name": "default_options", "description": "An array of default option values\nthat override those set in the subproject's `meson.options`\n(like `default_options` in [[project]], they only have\neffect when Meson is run for the first time, and command line\narguments override any default options in build files)\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "disabler": {"name": "disabler", "description": "Returns a [[disabler]] object instead of a not-found dependency\nif this kwarg is set to `true` and the dependency couldn't be found.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "fallback": {"name": "fallback", "description": "Manually specifies a subproject fallback\nto use in case the dependency is not found in the system.\nThis is useful if the automatic search is not applicable or if you\nwant to support versions of Meson older than 0.55.0.  If the value is an\narray `['subproj_name', 'subproj_dep']`, the first value is the name\nof the subproject and the second is the variable name in that\nsubproject that contains a dependency object such as the return\nvalue of [[declare_dependency]] or\n[[dependency]], etc. Note that this means the\nfallback dependency may be a not-found dependency, in which\ncase the value of the `required:` kwarg will be obeyed.\n*Since 0.54.0* the value can be a single string, the subproject name;\nin this case the subproject must use\n`meson.override_dependency('dependency_name', subproj_dep)`\nto specify the dependency object used in the superproject.\nIf the value is an empty list, it has the same effect as\n`allow_fallback: false`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "str", "holds": []}], "type_str": "list[str]|str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_type": {"name": "include_type", "description": "An enum flag, marking how the dependency\nflags should be converted. Supported values are `'preserve'`, `'system'` and\n`'non-system'`. System dependencies may be handled differently on some\nplatforms, for instance, using `-isystem` instead of `-I`, where possible.\nIf `include_type` is set to `'preserve'`, no additional conversion will be\nperformed.\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'preserve'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "language": {"name": "language", "description": "Defines what language-specific dependency to find\nif it's available for multiple languages.\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "method": {"name": "method", "description": "Defines the way the dependency is detected, the default is\n`auto` but can be overridden to be e.g. `qmake` for Qt development,\nand [different dependencies support different values](\nDependencies.md#dependencies-with-custom-lookup-functionality)\nfor this (though `auto` will work on all of them)\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'auto'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "If set to `true`, causes Meson to find the dependency on\nthe build machine system rather than the host system (i.e. where the\ncross compiled binary will run on), usually only needed if you build\na tool to be used during compilation.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "not_found_message": {"name": "not_found_message", "description": "An optional string that will be printed as a [[message]] if the dependency was not found.", "since": "0.50.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `false`, Meson will proceed with the build\neven if the dependency is not found.\n\nWhen set to a [`feature`](Build-options.md#features) option, the feature\nwill control if it is searched and whether to fail if not found.\n\n*(since 0.47.0)* The value of a `feature` option can also be passed.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "static": {"name": "static", "description": "Tells the dependency provider to try to get static\nlibraries instead of dynamic ones (note that this is not supported\nby all dependency backends)\n\n*Since 0.60.0* it also sets `default_library` option accordingly on the fallback\nsubproject if it was not set explicitly in `default_options` keyword argument.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "Specifies the required version,\na string containing a\ncomparison operator followed by the version string, examples include\n`>1.0.0`, `<=2.3.5` or `3.1.4` for exact matching.\nYou can also specify multiple restrictions by passing a list to this\nkeyword argument, such as: `['>=3.14.0', '<=4.1.0']`.\nThese requirements are never met if the version is unknown.\n", "since": "0.37.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "str", "holds": []}], "type_str": "list[str]|str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "names", "description": "The names of the dependency to look up. The dependencies are looked up in\nthe order they are provided here. The first found dependency will then be\nused. The fallback subproject will be used only if none of the names are\nfound on the system. Once one of the name has been found, all other names\nare added into the cache so subsequent calls for any of those name will\nreturn the same value. This is useful in case a dependency could have\ndifferent names, such as `png` and `libpng`.\n\n**NOTE:** Before *0.60.0* only a single dependency name was allowed.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "disabler": {"name": "disabler", "description": "Returns a [[@disabler]] object.", "since": "0.44.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "disabler", "holds": []}], "returns_str": "disabler", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "environment": {"name": "environment", "description": "Returns an empty [[@env]] object.", "since": "0.35.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "env", "holds": []}], "returns_str": "env", "posargs": {}, "optargs": {"env": {"name": "env", "description": "If provided, each key/value pair is added into the [[@env]] object\nas if [[env.set]] method was called for each of them.\nSince *0.62.0* list of strings is allowed in dictionary values. In that\ncase values are joined using the separator.\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "str|list[str]|dict[str]|dict[list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {"method": {"name": "method", "description": "Must be one of 'set', 'prepend', or 'append'\n(defaults to 'set'). Controls if initial values defined in the first\npositional argument are prepended, appended or replace the current value\nof the environment variable.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "separator": {"name": "separator", "description": "The separator to use for the initial values defined in\nthe first positional argument. If not explicitly specified, the default\npath separator for the host operating system will be used, i.e. ';' for\nWindows and ':' for UNIX/POSIX systems.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": false}, "error": {"name": "error", "description": "Print the argument string and halts the build process.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"message": {"name": "message", "description": "The message to print", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "msg", "description": "Additional parameters will be separated by spaces", "since": "0.58.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": false}, "executable": {"name": "executable", "description": "Creates a new executable. The first argument specifies its name and\nthe remaining positional arguments define the input files to use.\n\nThe lists for the kwargs (such as `sources`, `objects`, and `dependencies`) are\nalways flattened, which means you can freely nest and add lists while\ncreating the final list.\n\nThe returned object also has methods that are documented in [[@exe]].\n\n*Since 1.3.0* executable names can be the same across multiple targets as\nlong as they each have a different `name_suffix`.", "since": null, "deprecated": null, "notes": [], "warnings": ["The `link_language` kwarg was broken until 0.55.0"], "example": null, "returns": [{"obj": "exe", "holds": []}], "returns_str": "exe", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "export_dynamic": {"name": "export_dynamic", "description": "when set to true causes the target's symbols to be\n dynamically exported, allowing modules built using the\n [[shared_module]] function to refer to functions,\n variables and other symbols defined in the executable itself. Implies\n the `implib` argument.\n", "since": "0.45.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implib": {"name": "implib", "description": "When set to true, an import library is generated for the\nexecutable (the name of the import library is based on *exe_name*).\nAlternatively, when set to a string, that gives the base name for\nthe import library.  The import library is used when the returned\nbuild target object appears in `link_with:` elsewhere.  Only has any\neffect on platforms where that is meaningful (e.g. Windows). Implies\nthe `export_dynamic` argument.\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "str", "holds": []}], "type_str": "bool|str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pie": {"name": "pie", "description": "Build a position-independent executable.", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\nThis can be used to expose which functions a shared_module loaded by an\nexecutable will be allowed to use.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "files": {"name": "files", "description": "This command takes the strings given to it in arguments and returns\ncorresponding File objects that you can use as sources for build\ntargets. The difference is that file objects remember the subdirectory\nthey were defined in and can be used anywhere in the source tree.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "As an example suppose you have source file `foo.cpp` in subdirectory\n`bar1` and you would like to use it in a build target that is defined\nin `bar2`. To make this happen you first create the object in `bar1`\nlike this:\n\n```meson\n    foofile = files('foo.cpp')\n```\n\nThen you can use it in `bar2` like this:\n\n```meson\n    executable('myprog', 'myprog.cpp', foofile, ...)\n```\n\nMeson will then do the right thing.\n", "returns": [{"obj": "list", "holds": [{"obj": "file", "holds": []}]}], "returns_str": "list[file]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "file", "description": "Path to the file.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "find_program": {"name": "find_program", "description": "`program_name` here is a string that can be an executable or script\nto be searched for in `PATH` or other places inside the project.\nThe search order is:\n\n1. Program overrides set via [[meson.override_find_program]]\n1. [`[provide]` sections](Wrap-dependency-system-manual.md#provide-section)\n  in subproject wrap files, if [`wrap_mode`](Builtin-options.md#core-options) is\n  set to `forcefallback`\n1. [`[binaries]` section](Machine-files.md#binaries) in your machine files\n1. Directories provided using the `dirs:` kwarg (see below)\n1. Project's source tree relative to the current subdir\n   - If you use the return value of [[configure_file]], the\n     current subdir inside the build tree is used instead\n1. `PATH` environment variable\n1. [`[provide]` sections](Wrap-dependency-system-manual.md#provide-section) in\n  subproject wrap files, if [`wrap_mode`](Builtin-options.md#core-options) is\n  set to anything other than `nofallback`\n\nMeson will also autodetect scripts with a shebang line and run them\nwith the executable/interpreter specified in it both on Windows\n(because the command invocator will reject the command otherwise) and\nUnixes (if the script file does not have the executable bit set).\nHence, you *must not* manually add the interpreter while using this\nscript as part of a list of commands. Since *0.50.0* if the \"python3\"\nprogram is requested and it is not found in the system, Meson will return\nits current interpreter.\n\nIf you need to check for a program in a non-standard location, you can\njust pass an absolute path to `find_program`, e.g.\n\n```meson\nsetcap = find_program('setcap', '/usr/sbin/setcap', '/sbin/setcap', required : false)\n```\n\nIt is also possible to pass an array to `find_program` in case you\nneed to construct the set of paths to search on the fly:\n\n```meson\nsetcap = find_program(['setcap', '/usr/sbin/setcap', '/sbin/setcap'], required : false)\n```\n\n*Since 1.2.0* `find_program('meson')` is automatically overridden to the Meson\ncommand used to execute the build script.\n\nThe returned [[@external_program]] object also has documented methods.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "external_program", "holds": []}], "returns_str": "external_program", "posargs": {"program_name": {"name": "program_name", "description": "The name of the program to search, or a [[@file]] object to be used\nwithout searching.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"default_options": {"name": "default_options", "description": "An array of default option values\nthat override those set in the subproject's `meson.options`\n(like `default_options` in [[project]], they only have\neffect when Meson is run for the first time, and command line\narguments override any default options in build files)\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dirs": {"name": "dirs", "description": "extra list of absolute paths where to look for program names.", "since": "0.53.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "disabler": {"name": "disabler", "description": "If `true` and the program couldn't be found, return a [[@disabler]] object\ninstead of a not-found object.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Defines how this executable should be searched. By default\nit is set to `false`, which causes Meson to first look for the\nexecutable in the cross file (when cross building) and if it is not\ndefined there, then from the system. If set to `true`, the cross\nfile is ignored and the program is only searched from the system.\n", "since": "0.43.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When `true`, Meson will abort if no program can be found.\nIf `required` is set to `false`,\nMeson continue even if none of the programs can be found. You can\nthen use the `.found()` method on the returned [[@external_program]] to check\nwhether it was found or not. *(since 0.47.0)* The value of a\n[`feature`](Build-options.md#features) option can also be passed to the\n`required` keyword argument.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "Specifies the required version, see\n[[dependency]] for argument format. The version of the program\nis determined by running `program_name --version` command. If stdout is empty\nit fallbacks to stderr. If the output contains more text than simply a version\nnumber, only the first occurrence of numbers separated by dots is kept.\nIf the output is more complicated than that, the version checking will have to\nbe done manually using [[run_command]].\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "fallback", "description": "These parameters are used as fallback names to search for.\nThis is meant to be used for cases where the\nprogram may have many alternative names, such as `foo` and\n`foo.py`. The function will check for the arguments one by one and the\nfirst one that is found is returned.\n", "since": "0.37.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "generator": {"name": "generator", "description": "See also: [[custom_target]]\n\nThis function creates a [[@generator]] object that can\nbe used to run custom compilation commands. The only positional\nargument is the executable to use. It can either be a self-built\nexecutable or one returned by find_program.\n\nThe template strings passed to all the keyword arguments accept\nthe following special substitutions:\n\n- `@PLAINNAME@`: the complete input file name, e.g: `foo.c` becomes `foo.c` (unchanged)\n- `@BASENAME@`: the base of the input filename, e.g.: `foo.c.y` becomes `foo.c` (extension is removed)\n\nEach string passed to the `output` keyword argument *must* be\nconstructed using one or both of these two substitutions.\n\nIn addition to the above substitutions, the `arguments` keyword\nargument also accepts the following:\n\n- `@OUTPUT@`: the full path to the output file\n- `@INPUT@`: the full path to the input file\n- `@DEPFILE@`: the full path to the depfile\n- `@SOURCE_DIR@`: the full path to the root of the source tree\n- `@CURRENT_SOURCE_DIR@`: this is the directory where the currently processed meson.build is located in\n- `@BUILD_DIR@`: the full path to the root of the build dir where the output will be placed\n\nNOTE: Generators should only be used for outputs that will ***only***\nbe used as inputs for a [[build_target]] or a [[custom_target]].\nWhen you use the processed output of a\ngenerator in multiple targets, the generator will be run multiple\ntimes to create outputs for each target. Each output will be created\nin a target-private directory `@BUILD_DIR@`.\n\nIf you want to generate files for general purposes such as for\ngenerating headers to be used by several sources, or data that will be\ninstalled, and so on, use a [[custom_target]] instead.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "generator", "holds": []}], "returns_str": "generator", "posargs": {"exe": {"name": "exe", "description": "Executable for the command to run", "since": null, "deprecated": null, "type": [{"obj": "exe", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "exe|external_program", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"arguments": {"name": "arguments", "description": "A list of template strings that will be the command line arguments passed to the executable.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "capture": {"name": "capture", "description": "When this argument is set to true, Meson captures `stdout`\nof the `executable` and writes it to the target file\nspecified as `output`.\n", "since": "0.43.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "An array of build targets that must be built before\nthis generator can be run. This is used if you have a generator that calls\na second executable that is built in this project.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depfile": {"name": "depfile", "description": "A template string pointing to a dependency file that a\ngenerator can write listing all the additional files this target\ndepends on, for example a C compiler would list all the header files\nit included, and a change in any one of these files triggers a\nrecompilation,\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output": {"name": "output", "description": "Template string (or list of template strings) defining\nhow an output file name is (or multiple output names are) generated\nfrom a single source file name.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "get_option": {"name": "get_option", "description": "Obtains the value of the [project build option](Build-options.md)\nspecified in the positional argument.\n\nNote that the value returned for built-in options that end in `dir`\nsuch as `bindir` and `libdir` is usually a path relative to (and\ninside) the `prefix` but you should not rely on that, as it can also\nbe an absolute path [in some cases](Builtin-options.md#universal-options).\n[`install_dir` arguments](Installing.md) handle that as expected\nbut if you need an absolute path, e.g. to use in a define etc.,\nyou should use the path concatenation operator like this:\n`get_option('prefix') / get_option('localstatedir')`.\nNever manually join paths as if they were strings.\n\nFor options of type `feature` a\n[[@feature]] option object\nis returned instead of a string.\nSee [`feature` options](Build-options.md#features)\ndocumentation for more details.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "returns_str": "str|int|bool|feature|list[str|int|bool]", "posargs": {"option_name": {"name": "option_name", "description": "Name of the option to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_variable": {"name": "get_variable", "description": "This function can be used to dynamically obtain a variable. `res =\nget_variable(varname, fallback)` takes the value of `varname` (which\nmust be a string) and stores the variable of that name into `res`. If\nthe variable does not exist, the variable `fallback` is stored to\n`res`instead. If a fallback is not specified, then attempting to read\na non-existing variable will cause a fatal error.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"variable_name": {"name": "variable_name", "description": "Name of the variable to get", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"default": {"name": "default", "description": "Fallback value to return when the variable does not exist", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "import": {"name": "import", "description": "Imports the given extension module. Returns an object that can be used to call\nthe methods of the module. Here's an example for a hypothetical `testmod`\nmodule.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntmod = import('testmod')\ntmod.do_something()\n```\n", "returns": [{"obj": "module", "holds": []}], "returns_str": "module", "posargs": {"module_name": {"name": "module_name", "description": "Name of the module to import.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"disabler": {"name": "disabler", "description": "Returns a [[@disabler]] object when not found.", "since": "0.59.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `false`, Meson will proceed with the build even if the module is not found.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "0.59.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "include_directories": {"name": "include_directories", "description": "Returns an opaque object which contains the directories (relative to\nthe current directory) given in the positional arguments. The result\ncan then be passed to the `include_directories:` keyword argument when\nbuilding executables or libraries. You can use the returned object in\nany subdirectory you want, Meson will make the paths work\nautomatically.\n\nNote that this function call itself does not add the directories into\nthe search path, since there is no global search path. For something\nlike that, see [`add_project_arguments()`](#add_project_arguments).\n\nSee also `implicit_include_directories` parameter of\n[[executable]], which adds current source and build\ndirectories to include path.\n\nEach directory given is converted to two include paths: one that is\nrelative to the source root and one relative to the build root.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "For example, with the following source tree layout in\n`/home/user/project.git`:\n\n`meson.build`:\n```meson\nproject(...)\n\nsubdir('include')\nsubdir('src')\n\n...\n```\n\n`include/meson.build`:\n```meson\ninc = include_directories('.')\n\n...\n```\n\n`src/meson.build`:\n```meson\nsources = [...]\n\nexecutable('some-tool', sources,\n  include_directories : inc,\n  ...)\n\n...\n```\n\nIf the build tree is `/tmp/build-tree`, the following include paths\nwill be added to the `executable()` call: `-I/tmp/build-tree/include\n-I/home/user/project.git/include`.\n", "returns": [{"obj": "inc", "holds": []}], "returns_str": "inc", "posargs": {}, "optargs": {}, "kwargs": {"is_system": {"name": "is_system", "description": "If set to `true`, flags the specified directories as system directories.\nThis means that\nthey will be used with the `-isystem` compiler argument rather than\n`-I` on compilers that support this flag (in practice everything\nexcept Visual Studio).\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "includes", "description": "Include paths to add.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "install_data": {"name": "install_data", "description": "Installs files from the source tree that are listed as positional arguments.\n\nSee [Installing](Installing.md) for more examples.", "since": null, "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values between 0.59.0 -- 1.1.0.", "an omitted `install_dir` kwarg did not work correctly inside of a subproject until 1.3.0.", "an omitted `install_dir` kwarg did not work correctly when combined with the `preserve_path` kwarg untill 1.3.0."], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"follow_symlinks": {"name": "follow_symlinks", "description": "If true, dereferences links and copies their target instead.  The default\nvalue will become false in the future.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "The absolute or relative path to the installation directory.\nIf this is a relative path, it is assumed to be relative to the prefix.\n\nIf omitted, the directory defaults to `{datadir}/{projectname}` *(since 0.45.0)*.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "specify the file mode in symbolic format and\noptionally the owner/uid and group/gid for the installed files. For\nexample:\n\n`install_mode: 'rw-r--r--'` for just the file mode\n\n`install_mode: ['rw-r--r--', 'nobody', 'nogroup']` for the file mode and the user/group\n\n`install_mode: ['rw-r-----', 0, 0]` for the file mode and uid/gid\n\nTo leave any of these three as the default, specify `false`.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default these files have no install\ntag which means they are not being installed when `--tags` argument is specified.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "preserve_path": {"name": "preserve_path", "description": "Disable stripping child-directories from data files when installing.\n\nThis is equivalent to GNU Automake's `nobase` option.\n", "since": "0.64.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rename": {"name": "rename", "description": "If specified renames each source file into corresponding file from `rename` list.\nNested paths are allowed and they are\njoined with `install_dir`. Length of `rename` list must be equal to\nthe number of sources.\n", "since": "0.46.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional files to install.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "file", "description": "Files to install.", "since": null, "deprecated": null, "type": [{"obj": "file", "holds": []}, {"obj": "str", "holds": []}], "type_str": "file|str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "install_emptydir": {"name": "install_emptydir", "description": "Installs a new directory entry to the location specified by the positional\nargument. If the directory exists and is not empty, the contents are left in\nplace.", "since": "0.60.0", "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values before 1.1.0."], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format and optionally the owner/uid and\ngroup/gid for the created directory.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command to install only a\nsubset of the files. By default this directory has no install tag which\nmeans it is not installed when the `--tags` argument is specified.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "dirpath", "description": "Directory to create during installation.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "install_headers": {"name": "install_headers", "description": "Installs the specified header files from the source tree into the\nsystem header directory (usually `/{prefix}/include`) during the\ninstall step. This directory can be overridden by specifying it with\nthe `install_dir` keyword argument. If you just want to install into a\nsubdirectory of the system header directory, then use the `subdir`\nargument. As an example if this has the value `myproj` then the\nheaders would be installed to `/{prefix}/include/myproj`.", "since": null, "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values between 0.59.0 -- 1.1.0."], "example": "For example, this will install `common.h` and `kola.h` into\n`/{prefix}/include`:\n\n```meson\ninstall_headers('common.h', 'proj/kola.h')\n```\n\nThis will install `common.h` and `kola.h` into `/{prefix}/include/myproj`:\n\n```meson\ninstall_headers('common.h', 'proj/kola.h', subdir : 'myproj')\n```\n\nThis will install `common.h` and `kola.h` into `/{prefix}/cust/myproj`:\n\n```meson\ninstall_headers('common.h', 'proj/kola.h', install_dir : 'cust', subdir : 'myproj')\n```\n\nThis will install `common.h` into `/{prefix}/include` and `kola.h`\ninto `/{prefix}/include/proj/`:\n\n```meson\ninstall_headers('common.h, 'proj/kola.h', preserve_path : true)\n```\n", "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"follow_symlinks": {"name": "follow_symlinks", "description": "If true, dereferences links and copies their target instead.  The default\nvalue will become false in the future.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "Where to install to.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "preserve_path": {"name": "preserve_path", "description": "Disable stripping child-directories from header files when installing.\n\nThis is equivalent to GNU Automake's `nobase` option.\n", "since": "0.63.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "subdir": {"name": "subdir", "description": "Install to the `subdir` subdirectory of the default includedir.\n\nIncompatible with the `install_dir` kwarg.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "file", "description": "Header files to install.", "since": null, "deprecated": null, "type": [{"obj": "file", "holds": []}, {"obj": "str", "holds": []}], "type_str": "file|str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "install_man": {"name": "install_man", "description": "Installs the specified man files from the source tree into system's man directory\nduring the install step. This directory can be\noverridden by specifying it with the `install_dir` keyword argument.\n\n*(since 0.49.0)* [manpages are no longer compressed implicitly][install_man_49].\n\n[install_man_49]:\nhttps://mesonbuild.com/Release-notes-for-0-49-0.html#manpages-are-no-longer-compressed-implicitly", "since": null, "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values between 0.59.0 -- 1.1.0."], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {"install_dir": {"name": "install_dir", "description": "Where to install to.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "locale": {"name": "locale", "description": "Can be used to specify the locale\ninto which the\nman page will be installed within the manual page directory tree.\nAn example manual might be `foo.fr.1` with a locale of `fr`, such\nthat `{mandir}/{locale}/man{num}/foo.1` becomes the installed file.\n", "since": "0.58.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "file", "description": "Man pages to install.", "since": null, "deprecated": null, "type": [{"obj": "file", "holds": []}, {"obj": "str", "holds": []}], "type_str": "file|str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "install_subdir": {"name": "install_subdir", "description": "Installs the entire given subdirectory and its contents from the\nsource tree to the location specified by the keyword argument\n`install_dir`.\n\n*(since 0.45.0, deprecated since 0.60.0)* If the subdirectory does not exist\nin the source tree, an empty directory is created in the specified location.\nA newly created subdirectory may only be created in the keyword argument\n`install_dir`. There are a number of flaws with this method, and it was never\nintentionally designed to work this way, please use [[install_emptydir]]\ninstead.", "since": null, "deprecated": null, "notes": [], "warnings": ["the `install_mode` kwarg ignored integer values between 0.59.0 -- 1.1.0."], "example": "For a given directory `foo`:\n```text\nfoo/\n  bar/\n    file1\n  file2\n```\n`install_subdir('foo', install_dir : 'share', strip_directory : false)` creates\n```text\nshare/\n  foo/\n    bar/\n      file1\n    file2\n```\n\n`install_subdir('foo', install_dir : 'share', strip_directory : true)` creates\n```text\nshare/\n  bar/\n    file1\n  file2\n```\n\n`install_subdir('foo/bar', install_dir : 'share', strip_directory : false)` creates\n```text\nshare/\n  bar/\n    file1\n```\n\n`install_subdir('foo/bar', install_dir : 'share', strip_directory : true)` creates\n```text\nshare/\n  file1\n```\n\n`install_subdir('new_directory', install_dir : 'share')` creates\n```text\nshare/\n  new_directory/\n```\n", "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"subdir_name": {"name": "subdir_name", "description": "The sub-directory to install", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"exclude_directories": {"name": "exclude_directories", "description": "A list of directory names that should not be installed.\nNames are interpreted as paths relative to the `subdir_name` location.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "exclude_files": {"name": "exclude_files", "description": "A list of file names that should not be installed.\nNames are interpreted as paths relative to the `subdir_name` location.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "follow_symlinks": {"name": "follow_symlinks", "description": "If true, dereferences links and copies their target instead.  The default\nvalue will become false in the future.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "Where to install to.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default these files have no install\ntag which means they are not being installed when `--tags` argument is specified.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "strip_directory": {"name": "strip_directory", "description": "Install directory contents.\nIf `strip_directory=true` only the last component of the source path is used.\n", "since": "0.45.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "install_symlink": {"name": "install_symlink", "description": "Installs a symbolic link to `pointing_to` target under install_dir.", "since": "0.61.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"link_name": {"name": "link_name", "description": "Name of the created link under `install_dir`.\nIt cannot contain path separators. Those should go in `install_dir`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"install_dir": {"name": "install_dir", "description": "The absolute or relative path to the installation directory for the links.\nIf this is a relative path, it is assumed to be relative to the prefix.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default these files have no install\ntag which means they are not being installed when `--tags` argument is specified.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pointing_to": {"name": "pointing_to", "description": "Target to point the link to.\nCan be absolute or relative and that will be respected when creating the link.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "is_disabler": {"name": "is_disabler", "description": "Returns true if a variable is a disabler and false otherwise.", "since": "0.52.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"var": {"name": "var", "description": "The variable to test", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "is_variable": {"name": "is_variable", "description": "Returns true if a variable of the given name exists and false otherwise.", "since": "0.52.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"var": {"name": "var", "description": "The variable to test", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "jar": {"name": "jar", "description": "Build a jar from the specified Java source files. Keyword arguments\nare the same as [[executable]]'s, with the addition of\n`main_class` which specifies the main class to execute when running\nthe jar with `java -jar file.jar`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "jar", "holds": []}], "returns_str": "jar", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "java_resources": {"name": "java_resources", "description": "Resources to be added to the jar", "since": "0.62.0", "deprecated": null, "type": [{"obj": "structured_src", "holds": []}], "type_str": "structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "main_class": {"name": "main_class", "description": "Main class for running the built jar", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "join_paths": {"name": "join_paths", "description": "Joins the given strings into a file system path segment. For example\n`join_paths('foo', 'bar')` results in `foo/bar`. If any one of the\nindividual segments is an absolute path, all segments before it are\ndropped. That means that `join_paths('foo', '/bar')` returns `/bar`.\n\n*(since 0.49.0)* Using the `/` operator on strings is equivalent to calling\n[[join_paths]].\n\n```meson\n# res1 and res2 will have identical values\nres1 = join_paths(foo, bar)\nres2 = foo / bar\n```", "since": "0.36.0", "deprecated": null, "notes": [], "warnings": ["Don't use [[join_paths]] for sources in [[library]] and [[executable]]. You should use [[files]] instead."], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "part", "description": "The path parts to join.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "library": {"name": "library", "description": "Builds a library that is either static, shared or both depending on\nthe value of `default_library`\nuser [option](https://mesonbuild.com/Builtin-options.html).\nYou should use this instead of [[shared_library]],\n[[static_library]] or\n[[both_libraries]] most of the time. This allows you\nto toggle your entire project (including subprojects) from shared to\nstatic with only one option. This option applies to libraries being\nbuilt internal to the entire project. For external dependencies, the\ndefault library type preferred is shared. This can be adapted on a per\nlibrary basis using the [[dependency]] `static` keyword.\n\nThe keyword arguments for this are the same as for\n[[build_target]]", "since": null, "deprecated": null, "notes": [], "warnings": ["using <lang>_shared_args and/or <lang>_static_args may lead to much higher compilation times with both_library, as object files cannot be shared between the static and shared targets. It is guaranteed to not duplicate the build if these arguments are empty arrays"], "example": null, "returns": [{"obj": "lib", "holds": []}], "returns_str": "lib", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_shared_args": {"name": "<lang>_shared_args", "description": "Arguments that are only passed to a shared library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_static_args": {"name": "<lang>_static_args", "description": "Arguments that are only passed to a static library", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "darwin_versions": {"name": "darwin_versions", "description": "Defines the `compatibility version` and `current version` for the dylib on macOS.\nIf a list is specified, it must be\neither zero, one, or two elements. If only one element is specified\nor if it's not a list, the specified value will be used for setting\nboth compatibility version and current version. If unspecified, the\n`soversion` will be used as per the aforementioned rules.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|int|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pic": {"name": "pic", "description": "Builds the library as positional independent code\n(so it can be linked into a shared library). This\noption has no effect on Windows and OS X since it doesn't make\nsense on Windows and PIC cannot be disabled on OS X.\n", "since": "0.36.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prelink": {"name": "prelink", "description": "If `true` the object files in the target will be prelinked,\nmeaning that it will contain only one prelinked\nobject file rather than the individual object files.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"rlib\" or \"dylib\" crate depending on the library\n  type being build.\n- 'c': Create a \"cdylib\" or \"staticlib\" crate depending on the library\n  type being build.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "soversion": {"name": "soversion", "description": "A string or integer specifying the soversion of this shared library,\nsuch as `0`. On Linux and Windows this is used to set the\nsoversion (or equivalent) in the filename. For example, if\n`soversion` is `4`, a Windows DLL will be called `foo-4.dll` and one\nof the aliases of the Linux shared library would be\n`libfoo.so.4`. If this is not specified, the first part of `version`\nis used instead (see below). For example, if `version` is `3.6.0` and\n`soversion` is not defined, it is set to `3`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}], "type_str": "str|int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_shared_args": {"name": "vala_shared_args", "description": "Arguments that are only passed to a shared library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_static_args": {"name": "vala_static_args", "description": "Arguments that are only passed to a static library\nLike `vala_args`, [[files]] is allowed in addition to string", "since": "1.3.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "A string specifying the version of this shared library,\nsuch as `1.1.0`. On Linux and OS X, this is used to set the shared\nlibrary version in the filename, such as `libfoo.so.1.1.0` and\n`libfoo.1.1.0.dylib`. If this is not specified, `soversion` is used\ninstead (see above).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\n*(Since 1.3.0)* [[@custom_idx]] are supported\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "message": {"name": "message", "description": "This function prints its argument to stdout.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"text": {"name": "text", "description": "The message to print.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "more_text", "description": "Additional text that will be printed separated by spaces.", "since": "0.54.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": false}, "project": {"name": "project", "description": "The first function called in each project, to initialize Meson.\n\nThe first argument to this function must be a string defining the name\nof this project.\n\nThe project name can be any string you want, it's not used for\nanything except descriptive purposes. However since it is written to\ne.g. the dependency manifest is usually makes sense to have it be the\nsame as the project tarball or pkg-config name. So for example you\nwould probably want to use the name _libfoobar_ instead of _The Foobar\nLibrary_.\n\nIt may be followed by the list of programming languages that the project uses.\n\n*(since 0.40.0)* The list of languages is optional.\n\nThese languages may be used both for `native: false` (the default)\n(host machine) targets and for `native: true` (build machine) targets.\n*(since 0.56.0)* The build machine compilers for the specified\nlanguages are not required.\n\nSupported values for languages are `c`, `cpp` (for `C++`), `cuda`,\n`cython`, `d`, `objc`, `objcpp`, `fortran`, `java`, `cs` (for `C#`),\n`vala` and `rust`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"project_name": {"name": "project_name", "description": "The name of the project.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"default_options": {"name": "default_options", "description": "Accepts strings in the form `key=value`\nwhich have the same format as options to `meson configure`.\nFor example to set the default project type you would\nset this: `default_options : ['buildtype=debugoptimized']`. Note\nthat these settings are only used when running Meson for the first\ntime. Global options such as `buildtype` can only be specified in\nthe master project, settings in subprojects are ignored. Project\nspecific options are used normally even in subprojects.\n\nNote that some options can override the default behavior;\nfor example, using `c_args` here means that the `CFLAGS`\nenvironment variable is not used. Consider using\n[[add_project_arguments()]] instead.\n\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "license": {"name": "license", "description": "Takes a string or array of strings describing the license(s) the code is under.\n\nThis *should* be an [SPDX license expression](https://spdx.dev/ids/),\nusing the standardized license identifier from the [SPDX license\nlist](https://spdx.org/licenses/).  Usually this would be something like\n`license : 'GPL-2.0-or-later'`. If there are multiple licenses you can use the\n`AND` and `OR` operators to join them: `license : 'Apache-2.0 OR GPL-2.0'`.\n\nFor backwards compatibility reasons you can also pass an array of\nlicenses here. This is not recommended, as it is ambiguous: `license :\n['Apache-2.0', 'GPL-2.0-only']` instead use an SPDX expression: `license\n: 'Apache-2.0 OR GPL-2.0-only'`, which makes it clear that the license\nmean OR, not AND.\n\nNote that the text is informal and is only written to the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with `meson.project_license()`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "license_files": {"name": "license_files", "description": "Takes a string or array of strings with the paths to the license file(s)\nthe code is under.\n\nThis enhances the value of the `license` kwarg by allowing to specify both\nthe short license name and the full license text. Usually this would be\nsomething like `license_files: ['COPYING']`.\n\nNote that the files are informal and are only installed with the dependency\nmanifest. Meson does not do any license validation, you are responsible\nfor verifying that you abide by all licensing terms. You can access the\nvalue in your Meson build files with [[meson.project_license_files]].\n", "since": "1.1.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "meson_version": {"name": "meson_version", "description": "Takes a string describing which Meson version the project requires.\nUsually something like `>=0.28.0`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "subproject_dir": {"name": "subproject_dir", "description": "Specifies the top level directory name that holds Meson subprojects.\nThis is only meant as a compatibility option\nfor existing code bases that house their embedded source code in a\ncustom directory. All new projects should not set this but instead\nuse the default value. It should be noted that this keyword\nargument is ignored inside subprojects. There can be only one\nsubproject dir and it is set in the top level Meson file.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'subprojects'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "A free form string describing the version of this project.\nYou can access the value in your Meson build files\nwith [[meson.project_version]]. *(Since 0.57.0)* this can also be a\n[[@file]] object pointing to a file that contains exactly one line of\ntext.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "language", "description": "The languages that Meson should initialize.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "range": {"name": "range", "description": "Return an opaque object that can be only be used in `foreach` statements.\n\n<pre><code class=\"language-meson\">[[@range]] range([[@int]] <b>stop</b>)\n[[@range]] range([[@int]] <b>start</b>, [[@int]] <b>stop</b>[, [[@int]] <b>step</b>])</code></pre>\n\n- `start` must be integer greater or equal to 0. Defaults to 0.\n- `stop` must be integer greater or equal to `start`.\n- `step` must be integer greater or equal to 1. Defaults to 1.\n\nIt cause the `foreach` loop to be called with the value from `start` included\nto `stop` excluded with an increment of `step` after each loop.", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Loop 15 times with i from 0 to 14 included.\nforeach i : range(15)\n  ...\nendforeach\n```\n\nThe range object can also be assigned to a variable and indexed.\n```meson\nr = range(5, 10, 2)\nassert(r[2] == 9)\n```\n", "returns": [{"obj": "range", "holds": []}], "returns_str": "range", "posargs": {}, "optargs": {"start": {"name": "start", "description": "The start of the range", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "0", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "stop": {"name": "stop", "description": "The end of the range", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "step": {"name": "step", "description": "The loop increment", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "1", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "run_command": {"name": "run_command", "description": "Runs the command specified in positional arguments. `command` can be a\nstring, or the output of [[find_program]],\n[[files]] or [[configure_file]], or [a\ncompiler object](#compiler-object).\n\nReturns a [[@runresult]] object containing the result\nof the invocation. The command is run from an *unspecified* directory,\nand Meson will set three environment variables `MESON_SOURCE_ROOT`,\n`MESON_BUILD_ROOT` and `MESON_SUBDIR` that specify the source\ndirectory, build directory and subdirectory the target was defined in,\nrespectively.\n\nSee also [External commands](External-commands.md).", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "runresult", "holds": []}], "returns_str": "runresult", "posargs": {}, "optargs": {}, "kwargs": {"capture": {"name": "capture", "description": "If `true`, any output generated on stdout will be captured and returned by\nthe `.stdout()` method. If it is false, then `.stdout()` will return an\nempty string.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "check": {"name": "check", "description": "If `true`, the exit status code of the command will be checked,\nand the configuration will fail if it is non-zero. Note that\nthe default value will be `true` in future releases.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "env": {"name": "env", "description": "environment variables to set,\nsuch as `['NAME1=value1', 'NAME2=value2']`,\nor an [[@env]] object which allows more sophisticated\nenvironment juggling. *(Since 0.52.0)* A dictionary is also accepted.\n", "since": "0.50.0", "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "command", "description": "The command to execute during the setup process.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "str|file|external_program", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "run_target": {"name": "run_target", "description": "This function creates a new top-level target that runs a specified\ncommand with the specified arguments. Like all top-level targets, this\nintegrates with the selected backend. For instance, you can run it as\n`meson compile target_name`. Note that a run target produces no output\nas far as Meson is concerned. It is only meant for tasks such as\nrunning a code formatter or flashing an external device's firmware\nwith a built file.\n\nThe command is run from an *unspecified* directory, and Meson will set\nthree environment variables `MESON_SOURCE_ROOT`, `MESON_BUILD_ROOT`\nand `MESON_SUBDIR` that specify the source directory, build directory\nand subdirectory the target was defined in, respectively.\n\n*Since 0.57.0* The template strings passed to `command` keyword arguments accept\nthe following special substitutions:\n- `@SOURCE_ROOT@`: the path to the root of the source tree. Depending on the backend,\n  this may be an absolute or a relative to current workdir path.\n- `@BUILD_ROOT@`: the path to the root of the build tree. Depending on the backend,\n  this may be an absolute or a relative to current workdir path.\n- `@CURRENT_SOURCE_DIR@` *Since 0.57.1*: this is the directory where the currently\n  processed meson.build is located in. Depending on the backend,\n  this may be an absolute or a relative to current workdir path.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "run_tgt", "holds": []}], "returns_str": "run_tgt", "posargs": {"target_name": {"name": "target_name", "description": "The name of the run target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"command": {"name": "command", "description": "A list containing the command to run and the arguments\nto pass to it. Each list item may be a string or a target. For\ninstance, passing the return value of [[executable]]\nas the first item will run that executable, or passing a string as\nthe first item will find that command in `PATH` and run it.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "exe", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[exe|external_program|custom_tgt|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "A list of targets that this target depends on but which\nare not listed in the command array (because, for example, the\nscript does file globbing internally)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "env": {"name": "env", "description": "environment variables to set, such as\n`{'NAME1': 'value1', 'NAME2': 'value2'}` or `['NAME1=value1', 'NAME2=value2']`,\nor an [[@env]] object which allows more sophisticated environment juggling.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "set_variable": {"name": "set_variable", "description": "Assigns a value to the given variable name. Calling\n`set_variable('foo', bar)` is equivalent to `foo = bar`.\n\n*(since 0.46.1)* The `value` parameter can be an array type.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"variable_name": {"name": "variable_name", "description": "The name of the variable to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "value": {"name": "value", "description": "The value to set the variable to", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "shared_library": {"name": "shared_library", "description": "Builds a shared library with the given sources.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "lib", "holds": []}], "returns_str": "lib", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "darwin_versions": {"name": "darwin_versions", "description": "Defines the `compatibility version` and `current version` for the dylib on macOS.\nIf a list is specified, it must be\neither zero, one, or two elements. If only one element is specified\nor if it's not a list, the specified value will be used for setting\nboth compatibility version and current version. If unspecified, the\n`soversion` will be used as per the aforementioned rules.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|int|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"dylib\" crate.\n- 'c': Create a \"cdylib\" crate.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "soversion": {"name": "soversion", "description": "A string or integer specifying the soversion of this shared library,\nsuch as `0`. On Linux and Windows this is used to set the\nsoversion (or equivalent) in the filename. For example, if\n`soversion` is `4`, a Windows DLL will be called `foo-4.dll` and one\nof the aliases of the Linux shared library would be\n`libfoo.so.4`. If this is not specified, the first part of `version`\nis used instead (see below). For example, if `version` is `3.6.0` and\n`soversion` is not defined, it is set to `3`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}], "type_str": "str|int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "A string specifying the version of this shared library,\nsuch as `1.1.0`. On Linux and OS X, this is used to set the shared\nlibrary version in the filename, such as `libfoo.so.1.1.0` and\n`libfoo.1.1.0.dylib`. If this is not specified, `soversion` is used\ninstead (see above).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\n*(Since 1.3.0)* [[@custom_idx]] are supported\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "shared_module": {"name": "shared_module", "description": "Builds a shared module with the given sources.\n\nThis is useful for building modules that will be `dlopen()`ed and\nhence may contain undefined symbols that will be provided by the\nlibrary that is loading it.\n\nIf you want the shared module to be able to refer to functions and\nvariables defined in the [[executable]] it is loaded by,\nyou will need to set the `export_dynamic` argument of the executable to\n`true`.", "since": "0.37.0", "deprecated": null, "notes": ["*Linking to a shared module on platforms other than Android is deprecated, and will be an error\nin the future*.\nIt was previously allowed because it was the only way to have a shared-library-like target that\ncontained references to undefined symbols. However, since 0.40.0, the `override_options:`\n[[build_target]] keyword argument can be used to create such a [[shared_library]] by passing\n`override_options: 'b_lundef=false'`. Shared modules have other characteristics that make\nthem incompatible with linking, such as a lack of SONAME.\nOn macOS and iOS, linking to shared modules is disallowed by the linker, so we disallow it at\nconfigure time.\nOn Android, if a shared module `foo` uses symbols from another shared module `bar`, `foo` must\nalso be linked to `bar`. Hence, linking one shared module to another will always be allowed when\nbuilding for Android.\n"], "warnings": [], "example": null, "returns": [{"obj": "build_tgt", "holds": []}], "returns_str": "build_tgt", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"dylib\" crate.\n- 'c': Create a \"cdylib\" crate.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vs_module_defs": {"name": "vs_module_defs", "description": "Specify a Microsoft module definition file for controlling symbol exports,\netc., on platforms where that is possible (e.g. Windows).\n\n*(Since 1.3.0)* [[@custom_idx]] are supported\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "static_library": {"name": "static_library", "description": "Builds a static library with the given sources.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "lib", "holds": []}], "returns_str": "lib", "posargs": {"target_name": {"name": "target_name", "description": "The *unique* name of the build target", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"<lang>_args": {"name": "<lang>_args", "description": "compiler flags to use for the given language;\neg: `cpp_args` for C++\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "<lang>_pch": {"name": "<lang>_pch", "description": "precompiled header file to use for the given language", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_by_default": {"name": "build_by_default", "description": "Causes, when set to `true`, to have this target be built by default.\nThis means it will be built when `meson compile` is called without any\narguments. The default value is `true` for all built target types.\n", "since": "0.38.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "build_rpath": {"name": "build_rpath", "description": "A string to add to target's rpath definition in the build dir,\nbut which will be removed on install\n", "since": "0.42.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_debug": {"name": "d_debug", "description": "The [D version identifiers](https://dlang.org/spec/version.html#version) to add\nduring the compilation of D source files.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_import_dirs": {"name": "d_import_dirs", "description": "List of directories to look in for string imports used in the D programming language.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_module_versions": {"name": "d_module_versions", "description": "List of module version identifiers set when compiling D sources.", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "d_unittest": {"name": "d_unittest", "description": "When set to true, the D modules are compiled in debug mode.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "one or more dependency objects\ncreated with\n[[dependency]] or [[compiler.find_library]]\n(for external deps) or [[declare_dependency]]\n(for deps built by the project)\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_files": {"name": "extra_files", "description": "Not used for the build itself but are shown as source files in IDEs\nthat group files by targets (such as Visual Studio)\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gnu_symbol_visibility": {"name": "gnu_symbol_visibility", "description": "Specifies how symbols should be exported, see\ne.g [the GCC Wiki](https://gcc.gnu.org/wiki/Visibility) for more\ninformation. This value can either be an empty string or one of\n`default`, `internal`, `hidden`, `protected` or `inlineshidden`, which\nis the same as `hidden` but also includes things like C++ implicit\nconstructors as specified in the GCC manual. Ignored on compilers that\ndo not support GNU visibility arguments.\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "gui_app": {"name": "gui_app", "description": "When set to true flags this target as a GUI application\non platforms where this makes a difference, **deprecated** since\n0.56.0, use `win_subsystem` instead.\n", "since": null, "deprecated": "0.56.0", "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "implicit_include_directories": {"name": "implicit_include_directories", "description": "Controls whether Meson adds the current source and build directories to the include path", "since": "0.42.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "one or more objects created with the [[include_directories]] function,\nor *(since 0.50.0)* strings, which will be transparently expanded to include directory objects\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "inc", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[inc|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install": {"name": "install", "description": "When set to true, this executable should be installed.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_dir": {"name": "install_dir", "description": "override install directory for this file. If the value is a relative path,\nit will be considered relative the `prefix` option.\nFor example, if you want to install plugins into a subdir, you'd use\nsomething like this: `install_dir : get_option('libdir') / 'projectname-1.0'`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_mode": {"name": "install_mode", "description": "Specify the file mode in symbolic format\nand optionally the owner/uid and group/gid for the installed files.\n\nSee the `install_mode` kwarg of [[install_data]] for more information.\n", "since": "0.47.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}]}], "type_str": "list[str|int]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_rpath": {"name": "install_rpath", "description": "A string to set the target's rpath to after install\n(but *not* before that). On Windows, this argument has no effect.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files. By default all build targets have the\ntag `runtime` except for static libraries that have the `devel` tag.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Flags to use during linking. You can use UNIX-style\nflags here for all platforms.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_depends": {"name": "link_depends", "description": "Strings, files, or custom targets the link step depends on\nsuch as a symbol visibility map. The purpose is to\nautomatically trigger a re-link (but not a re-compile) of the target\nwhen this file changes.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_language": {"name": "link_language", "description": "Makes the linker for this target be for the specified language.\nIt is generally unnecessary to set\nthis, as Meson will detect the right linker to use in most cases. There are\nonly two cases where this is needed. One, your main function in an\nexecutable is not in the language Meson picked, or second you want to force\na library to use only one ABI.\n\n*(broken until 0.55.0)*\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_whole": {"name": "link_whole", "description": "Links all contents of the given static libraries whether they are used or\nnot, equivalent to the `-Wl,--whole-archive` argument flag of GCC, or the\n'/WHOLEARCHIVE' MSVC linker option. This allows the linked target to\nre-export symbols from all objects in the static libraries.\n\n*(since 0.41.0)* If passed a list that list will be flattened.\n\n*(since 0.51.0)* This argument also accepts outputs produced by\ncustom targets. The user must ensure that the output is a library in\nthe correct format.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_with": {"name": "link_with", "description": "One or more shared or static libraries\n(built by this project) that this target should be linked with. *(since 0.41.0)* If passed a\nlist this list will be flattened. *(since 0.51.0)* The arguments can also be custom targets.\nIn this case Meson will assume that merely adding the output file in the linker command\nline is sufficient to make linking work. If this is not sufficient,\nthen the build system writer must write all other steps manually.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "lib", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}]}], "type_str": "list[lib|custom_tgt|custom_idx]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_prefix": {"name": "name_prefix", "description": "The string that will be used as the prefix for the\ntarget output filename by overriding the default (only used for\nlibraries). By default this is `lib` on all platforms and compilers,\nexcept for MSVC shared libraries where it is omitted to follow\nconvention, and Cygwin shared libraries where it is `cyg`.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name_suffix": {"name": "name_suffix", "description": "The string that will be used as the extension for the\ntarget by overriding the default. By default on Windows this is\n`exe` for executables and on other platforms it is omitted.\n\nFor shared libraries, the default value\nis `dylib` on macOS, `dll` on Windows, and `so` everywhere else.\nFor static libraries, it is `a` everywhere. By convention MSVC\nstatic libraries use the `lib` suffix, but we use `a` to avoid a\npotential name clash with shared libraries which also generate\nimport libraries with a `lib` suffix.\n\nSet this to `[]`, or omit the keyword argument for the default behaviour.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "void", "holds": []}]}], "type_str": "str|list[void]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "native": {"name": "native", "description": "Controls whether the target is compiled for the build or host machines.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "objects": {"name": "objects", "description": "List of object files that should be linked in this target.\n\n**Since 1.1.0** this can include generated files in addition to\nobject files that you don't have source to or that object files\nproduced by other build targets.  In earlier release, generated\nobject files had to be placed in `sources`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "extracted_obj", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[extracted_obj|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "override_options": {"name": "override_options", "description": "takes an array of strings in the same format as `project`'s `default_options`\noverriding the values of these options\nfor this target only.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.40.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pic": {"name": "pic", "description": "Builds the library as positional independent code\n(so it can be linked into a shared library). This\noption has no effect on Windows and OS X since it doesn't make\nsense on Windows and PIC cannot be disabled on OS X.\n", "since": "0.36.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prelink": {"name": "prelink", "description": "If `true` the object files in the target will be prelinked,\nmeaning that it will contain only one prelinked\nobject file rather than the individual object files.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_abi": {"name": "rust_abi", "description": "Set the specific ABI to compile (when compiling rust).\n- 'rust' (default): Create a \"rlib\" crate.\n- 'c': Create a \"staticlib\" crate.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_crate_type": {"name": "rust_crate_type", "description": "Set the specific type of rust crate to compile (when compiling rust).\n\nIf the target is an [[executable]] this defaults to \"bin\", the only\nallowed value.\n\nIf it is a [[static_library]] it defaults to \"lib\", and may be \"lib\",\n\"staticlib\", or \"rlib\". If \"lib\" then Rustc will pick a default, \"staticlib\"\nmeans a C ABI library, \"rlib\" means a Rust ABI.\n\nIf it is a [[shared_library]] it defaults to \"lib\", and may be \"lib\",\n\"dylib\", \"cdylib\", or \"proc-macro\". If \"lib\" then Rustc will pick a\ndefault, \"cdylib\" means a C ABI library, \"dylib\" means a Rust ABI, and\n\"proc-macro\" is a special rust procedural macro crate.\n\n\"proc-macro\" is new in 0.62.0.\n\n*Since 1.3.0* this is deprecated and replaced by \"rust_abi\" keyword argument.\n`proc_macro` crates are now handled by the [`rust.proc_macro()`](Rust-module.md#proc_macro)\nmethod.\n", "since": "0.42.0", "deprecated": "1.3.0", "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "rust_dependency_map": {"name": "rust_dependency_map", "description": "On rust targets this provides a map of library names to the crate name\nwith which it would be available inside the rust code.\n\nThis allows renaming similar to the dependency renaming feature of cargo\nor `extern crate foo as bar` inside rust code.\n", "since": "1.2.0", "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Additional source files. Same as the source varargs.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}, {"obj": "structured_src", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list|structured_src", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "vala_args": {"name": "vala_args", "description": "Compiler flags for Vala. Unlike other languages this may contain Files\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}]}], "type_str": "list[str|file]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "win_subsystem": {"name": "win_subsystem", "description": "Specifies the subsystem type to use\non the Windows platform. Typical values include `console` for text\nmode programs and `windows` for gui apps. The value can also contain\nversion specification such as `windows,6.0`. See [MSDN\ndocumentation](https://docs.microsoft.com/en-us/cpp/build/reference/subsystem-specify-subsystem)\nfor the full list.\n", "since": "0.56.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'console'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to compile. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n\nThese input files can be sources, objects, libraries, or any other\nfile. Meson will automatically categorize them based on the extension\nand use them accordingly. For instance, sources (`.c`, `.cpp`,\n`.vala`, `.rs`, etc) will be compiled and objects (`.o`, `.obj`) and\nlibraries (`.so`, `.dll`, etc) will be linked.\n\nWith the Ninja backend, Meson will create a build-time [order-only\ndependency](https://ninja-build.org/manual.html#ref_dependencies) on\nall generated input files, including unknown files. This is needed to\nbootstrap the generation of the real dependencies in the\n[depfile](https://ninja-build.org/manual.html#ref_headers) generated\nby your compiler to determine when to rebuild sources. Ninja relies on\nthis dependency file for all input files, generated and non-generated.\nThe behavior is similar for other backends.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "structured_sources": {"name": "structured_sources", "description": "Create a StructuredSource object, which is opaque and may be passed as a source\nto any build_target (including static_library, shared_library, executable,\netc.). This is useful for languages like Rust, which use the filesystem layout\nto determine import names. This is only allowed in Rust targets, and cannot be\nmixed with non structured inputs.", "since": "0.62.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "structured_src", "holds": []}], "returns_str": "structured_src", "posargs": {"root": {"name": "root", "description": "Sources to put at the root of the generated structure", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}]}], "type_str": "list[str|file|custom_tgt|custom_idx|generated_list]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"additional": {"name": "additional", "description": "Additional sources, where the key is the directory under the root to place\nthe values\n", "since": null, "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}]}], "type_str": "dict[str|file|custom_tgt|custom_idx|generated_list]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "subdir": {"name": "subdir", "description": "Enters the specified subdirectory and executes the `meson.build` file in it.\nOnce that is done, it returns and execution continues on the\nline following this `subdir()` command. Variables defined in that\n`meson.build` file are then available for use in later parts of the\ncurrent build file and in all subsequent build files executed with\n`subdir()`.\n\nNote that this means that each `meson.build` file in a source tree can\nand must only be executed once.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"dir_name": {"name": "dir_name", "description": "Directory relative to the current `meson.build` to enter.\n\nCannot contain `..`\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"if_found": {"name": "if_found", "description": "Only enter the subdir if all [[dep.found]] methods return `true`.", "since": "0.44.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "subdir_done": {"name": "subdir_done", "description": "Stops further interpretation of the Meson script file from the point\nof the invocation. All steps executed up to this point are valid and\nwill be executed by Meson. This means that all targets defined before\nthe call of [[subdir_done]] will be build.\n\nIf the current script was called by `subdir` the execution returns to\nthe calling directory and continues as if the script had reached the\nend. If the current script is the top level script Meson configures\nthe project as defined up to this point.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": "```meson\nproject('example exit', 'cpp')\nexecutable('exe1', 'exe1.cpp')\nsubdir_done()\nexecutable('exe2', 'exe2.cpp')\n```\n\nThe executable `exe1` will be build, while the executable `exe2` is not\nbuild.\n", "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "subproject": {"name": "subproject", "description": "Takes the project specified in the positional argument and brings that\nin the current build specification by returning a [[@subproject]] object.\nSubprojects must always be placed inside\nthe `subprojects` directory at the top source directory. So for\nexample a subproject called `foo` must be located in\n`${MESON_SOURCE_ROOT}/subprojects/foo`.\n\n- `default_options` *(since 0.37.0)*: an array of default option values\n  that override those set in the subproject's `meson.options`\n  (like `default_options` in `project`, they only have effect when\n  Meson is run for the first time, and command line arguments override\n  any default options in build files).\n  *(since 0.54.0)*: `default_library` built-in option can also be overridden.\n  *(since 1.2.0)*: A dictionary may be passed instead of array.\n- `version`: works just like the same as in `dependency`.\n  It specifies what version the subproject should be, as an example `>=1.0.1`\n- `required` *(since 0.48.0)*: By default, `required` is `true` and\n  Meson will abort if the subproject could not be setup. You can set\n  this to `false` and then use the `.found()` method on the [[@subproject]]\n  object. You may also pass the value of a\n  [`feature`](Build-options.md#features) option, same as\n  [[dependency]].\n\nNote that you can use the returned [[@subproject]] object\nto access any variable in the\nsubproject. However, if you want to use a dependency object from\ninside a subproject, an easier way is to use the `fallback:` keyword\nargument to [[dependency]].\n\n[See additional documentation](Subprojects.md).", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "subproject", "holds": []}], "returns_str": "subproject", "posargs": {"subproject_name": {"name": "subproject_name", "description": "Name of the subproject. The subproject must exist in the `subprojects`\ndirectory (or the directory specified in the `subproject_dir` of\n[[project]]) as a directory or wrap file.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"default_options": {"name": "default_options", "description": "An array of default option values\nthat override those set in the subproject's `meson.options`\n(like `default_options` in [[project]], they only have effect when\nMeson is run for the first time, and command line arguments override\nany default options in build files).\n*(since 0.54.0)*: `default_library` built-in option can also be overridden.\n*(since 1.2.0)*: A dictionary may now be passed.\n", "since": "0.37.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "list[str]|dict[str|bool|int|list[str]]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "Works just the same as in [[dependency]].\n", "since": "0.48.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "version": {"name": "version", "description": "Works just like the same as in [[dependency]].\nIt specifies what version the subproject should be, as an example `>=1.0.1`.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "summary": {"name": "summary", "description": "This function is used to summarize build configuration at the end of the build\nprocess. This function provides a way for projects (and subprojects) to report\nthis information in a clear way.\n\nThe content is a series of key/value pairs grouped into sections. If\nthe section keyword argument is omitted, those key/value pairs are\nimplicitly grouped into a section with no title. key/value pairs can\noptionally be grouped into a dictionary, but keep in mind that\ndictionaries do not guarantee ordering. `key` must be string,\n`value` can be:\n\n- an integer, boolean or string\n- *since 0.57.0* an external program or a dependency\n- *since 0.58.0* a feature option\n- a list of those.\n\nInstead of calling summary as `summary(key, value)`, it is also possible to\ndirectly pass a dictionary to the [[summary]] function, as seen in the example\nbelow.\n\n`summary()` can be called multiple times as long as the same\nsection/key pair doesn't appear twice. All sections will be collected\nand printed at the end of the configuration in the same order as they\nhave been called.", "since": "0.53.0", "deprecated": null, "notes": [], "warnings": [], "example": "Example `meson.build`:\n```meson\nproject('My Project', version : '1.0')\nsummary({'bindir': get_option('bindir'),\n        'libdir': get_option('libdir'),\n        'datadir': get_option('datadir'),\n        }, section: 'Directories')\nsummary({'Some boolean': false,\n        'Another boolean': true,\n        'Some string': 'Hello World',\n        'A list': ['string', 1, true],\n        }, section: 'Configuration')\n```\n\nOutput:\n```\nMy Project 1.0\n\n  Directories\n    prefix         : /opt/gnome\n    bindir         : bin\n    libdir         : lib/x86_64-linux-gnu\n    datadir        : share\n\n  Configuration\n    Some boolean   : False\n    Another boolean: True\n    Some string    : Hello World\n    A list         : string\n                     1\n                     True\n```\n", "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"key_or_dict": {"name": "key_or_dict", "description": "The name of the new entry, or a dict containing multiple entries.  If a\ndict is passed it is equivalent to calling summary() once for each\nkey-value pair.  Keep in mind that dictionaries do not guarantee\nordering.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "dep", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "dep", "holds": []}, {"obj": "external_program", "holds": []}]}]}], "type_str": "str|dict[str|bool|int|dep|external_program|list[str|bool|int|dep|external_program]]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"value": {"name": "value", "description": "The value to print for the `key`.  Only valid if `key_or_dict` is a str.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "dep", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "int", "holds": []}, {"obj": "dep", "holds": []}, {"obj": "external_program", "holds": []}]}], "type_str": "str|bool|int|dep|external_program|list[str|bool|int|dep|external_program]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {"bool_yn": {"name": "bool_yn", "description": "Convert bool values to yes and no", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "list_sep": {"name": "list_sep", "description": "The separator to use when printing list values in this summary.  If no\nseparator is given, each list item will be printed on its own line.\n", "since": "0.54.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "section": {"name": "section", "description": "The section to put this summary information under.  If the section keyword argument is omitted, key/value pairs are implicitly grouped into a section with no title.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": false}, "test": {"name": "test", "description": "Defines a test to run with the test harness. Takes two positional\narguments, the first is the name of the test and the second is the\nexecutable to run. The executable can be an [[@exe]] object returned by\n[[executable]] or an [[@external_program]] object] returned by\n[[find_program]].\n\n*(since 0.55.0)* When cross compiling, if an exe_wrapper is needed and\ndefined the environment variable `MESON_EXE_WRAPPER` will be set to\nthe string value of that wrapper (implementation detail: using\n`mesonlib.join_args`). Test scripts may use this to run cross built\nbinaries. If your test needs `MESON_EXE_WRAPPER` in cross build\nsituations it is your responsibility to return code 77 to tell the\nharness to report \"skip\".\n\nBy default, environment variable\n[`MALLOC_PERTURB_`](http://man7.org/linux/man-pages/man3/mallopt.3.html)\nis automatically set by `meson test` to a random value between 1..255.\nThis can help find memory leaks on configurations using glibc,\nincluding with non-GCC compilers. However, this can have a performance\nimpact, and may fail a test due to external libraries whose internals\nare out of the user's control. To check if this feature is causing an\nexpected runtime crash, disable the feature by temporarily setting\nenvironment variable `MALLOC_PERTURB_=0`. While it's preferable to\nonly temporarily disable this check, if a project requires permanent\ndisabling of this check in meson.build do like:\n\n```meson\nnomalloc = environment({'MALLOC_PERTURB_': '0'})\n\ntest(..., env: nomalloc, ...)\n```\n\nBy default, the environment variables `ASAN_OPTIONS`, `UBSAN_OPTIONS`,\nand `MSAN_OPTIONS` are set to enable aborting on detected violations and to\ngive a backtrace. To suppress this, `ASAN_OPTIONS`, `UBSAN_OPTIONS`, or\n`MSAN_OPTIONS` can be set in the environment.\n\nIn addition to running individual executables as test cases, `test()`\ncan also be used to invoke an external test harness.  In this case,\nit is best to use `verbose: true` *(since 0.62.0)* and, if supported\nby the external harness, `protocol: 'tap'` *(since 0.50.0)*.  This will\nensure that Meson logs each subtest as it runs, instead of including\nthe whole log at the end of the run.\n\nDefined tests can be run in a backend-agnostic way by calling\n`meson test` inside the build dir, or by using backend-specific\ncommands, such as `ninja test` or `msbuild RUN_TESTS.vcxproj`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"name": {"name": "name", "description": "The *unique* test id", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "executable": {"name": "executable", "description": "The program to execute. *(Since 1.4.0)* A CustomTarget is also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "exe", "holds": []}, {"obj": "jar", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "exe|jar|external_program|file|custom_tgt|custom_idx", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Arguments to pass to the executable", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "tgt", "holds": []}]}], "type_str": "list[str|file|tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "specifies that this test depends on the specified\ntarget(s), even though it does not take any of them as a command\nline argument. This is meant for cases where test finds those\ntargets internally, e.g. plugins or globbing. Those targets are built\nbefore test is executed even if they have `build_by_default : false`.\n", "since": "0.46.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "env": {"name": "env", "description": "environment variables to set, such as `['NAME1=value1',\n'NAME2=value2']`, or an [[@env]] object which allows more sophisticated\nenvironment juggling. *(Since 0.52.0)* A dictionary is also accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "is_parallel": {"name": "is_parallel", "description": "when false, specifies that no other test must be\nrunning at the same time as this test\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "priority": {"name": "priority", "description": "specifies the priority of a test. Tests with a\nhigher priority are *started* before tests with a lower priority.\nThe starting order of tests with identical priorities is\nimplementation-defined. The default priority is 0, negative numbers are\npermitted.\n", "since": "0.52.0", "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "0", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "protocol": {"name": "protocol", "description": "specifies how the test results are parsed and can\nbe one of `exitcode`, `tap`, or `gtest`. For more information about test\nharness protocol read [Unit Tests](Unit-tests.md). The following values are\naccepted:\n\n- `exitcode`: the executable's exit code is used by the test harness\n  to record the outcome of the test).\n- `tap`: [Test Anything Protocol](https://www.testanything.org/).\n- `gtest` *(since 0.55.0)*: for Google Tests.\n- `rust` *(since 0.56.0)*: for native rust tests\n", "since": "0.50.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'exitcode'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "should_fail": {"name": "should_fail", "description": "when true the test is considered passed if the\nexecutable returns a non-zero return value (i.e. reports an error)\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "suite": {"name": "suite", "description": "`'label'` (or list of labels `['label1', 'label2']`)\nattached to this test. The suite name is qualified by a (sub)project\nname resulting in `(sub)project_name:label`. In the case of a list\nof strings, the suite names will be `(sub)project_name:label1`,\n`(sub)project_name:label2`, etc.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "timeout": {"name": "timeout", "description": "the amount of seconds the test is allowed to run, a test\nthat exceeds its time limit is always considered failed, defaults to\n30 seconds. *Since 0.57* if timeout is `<= 0` the test has infinite duration,\nin previous versions of Meson the test would fail with a timeout immediately.\n", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "30", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "verbose": {"name": "verbose", "description": "if true, forces the test results to be logged as if `--verbose` was passed\nto `meson test`.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "workdir": {"name": "workdir", "description": "absolute path that will be used as the working directory\nfor the test\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "unset_variable": {"name": "unset_variable", "description": "Unsets a variable.\nReferencing a variable which has been unset is an error until it has been set again.", "since": "0.60.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"varname": {"name": "varname", "description": "The variable to unset.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "vcs_tag": {"name": "vcs_tag", "description": "This command detects revision control commit information at build time\nand places it in the specified output file. This file is guaranteed to\nbe up to date on every build. Keywords are similar to [[custom_target]].\n\nMeson will read the contents of `input`, substitute the\n`replace_string` with the detected revision number, and write the\nresult to `output`. This method returns a\n[[@custom_tgt]] object that (as usual) should be\nused to signal dependencies if other targets use the file outputted\nby this.\n\nFor example, if you generate a header with this and want to use that\nin a build target, you must add the return value to the sources of\nthat build target. Without that, Meson will not know the order in\nwhich to build the targets.\n\nIf you desire more specific behavior than what this command provides,\nyou should use [[custom_target]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "custom_tgt", "holds": []}], "returns_str": "custom_tgt", "posargs": {}, "optargs": {}, "kwargs": {"command": {"name": "command", "description": "The command to execute, see [[custom_target]] for details\non how this command must be specified.\n\nThis parameter is optional. If it is absent, Meson will try\nits best to find a suitable default command.\n\n*(since 0.62.0)* [[@file]] is accepted.\n\n*(since 0.63.0)* [[@custom_tgt]], [[@exe]], and [[@external_program]] are accepted.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "exe", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "file", "holds": []}, {"obj": "str", "holds": []}]}], "type_str": "list[exe|external_program|custom_tgt|file|str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "fallback": {"name": "fallback", "description": "Version number to use when no revision control information is present,\nsuch as when building from a release tarball.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "[[meson.project_version]]", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "input": {"name": "input", "description": "File to modify (e.g. `version.c.in`).", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output": {"name": "output", "description": "File to write the results to (e.g. `version.c`).", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "replace_string": {"name": "replace_string", "description": "String in the input file to substitute with the commit information.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'@VCS_TAG@'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "warning": {"name": "warning", "description": "This function prints its argument to stdout prefixed with WARNING:.", "since": "0.44.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"text": {"name": "text", "description": "The message to print.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "more_text", "description": "Additional text that will be printed separated by spaces.", "since": "0.54.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}]}], "type_str": "str|int|bool|list[str|int|bool]|dict[str|int|bool]", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": false}}, "objects": {"alias_tgt": {"name": "alias_tgt", "description": "Opaque object returned by [[alias_target]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "tgt", "returned_by": ["alias_target"], "extended_by": [], "methods": {}}, "any": {"name": "any", "description": "A placeholder representing all types.\nThis includes builtin, as well as returned objects.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": false, "example": null, "extends": null, "returned_by": ["get_variable", "get", "get", "get_cross_property", "get_external_property", "get_variable"], "extended_by": [], "methods": {}}, "bool": {"name": "bool", "description": "A boolean object which is either `true` or `false`", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": false, "example": null, "extends": null, "returned_by": ["add_languages", "get_option", "is_disabler", "is_variable", "found", "get", "get_unquoted", "has", "check_header", "compiles", "has_argument", "has_define", "has_function", "has_function_attribute", "has_header", "has_header_symbol", "has_link_argument", "has_member", "has_members", "has_multi_arguments", "has_multi_link_arguments", "has_type", "links", "symbols_have_underscore_prefix", "found", "has_key", "found", "found", "allowed", "auto", "disabled", "enabled", "is_even", "is_odd", "contains", "can_run_host_binaries", "has_exe_wrapper", "has_external_property", "is_cross_build", "is_subproject", "is_unity", "found", "compiled", "contains", "endswith", "startswith", "version_compare", "found"], "extended_by": [], "methods": {"to_int": {"name": "to_int", "description": "Returns `1` if `true` and `0` if `false`", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_string": {"name": "to_string", "description": "Returns the string `'true'` if the boolean is true or `'false'` otherwise.\nYou can also pass it two strings as positional\narguments to specify what to return for true/false. For instance,\n`bool.to_string('yes', 'no')` will return `yes` if the boolean is\ntrue and `no` if it is false.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {"true_str": {"name": "true_str", "description": "The string to return when the boolean is `true`", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'true'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "false_str": {"name": "false_str", "description": "The string to return when the boolean is `false`", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'false'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "both_libs": {"name": "both_libs", "description": "Container for both a static and shared library.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "lib", "returned_by": ["both_libraries"], "extended_by": [], "methods": {"get_shared_lib": {"name": "get_shared_lib", "description": "Returns the stored shared library", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "lib", "holds": []}], "returns_str": "lib", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_static_lib": {"name": "get_static_lib", "description": "Returns the stored static library", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "lib", "holds": []}], "returns_str": "lib", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "build_machine": {"name": "build_machine", "description": "Provides information about the build machine -- the machine that is doing the actual compilation.\nSee [Cross-compilation](Cross-compilation.md).\n\nCurrently, these values are populated using\n[`platform.system()`](https://docs.python.org/3.7/library/platform.html#platform.system) and\n[`platform.machine()`](https://docs.python.org/3.7/library/platform.html#platform.machine).\nIf you think the returned values for any of these are incorrect for\nyour system or CPU, or if your OS is not in the linked table, please\n[file a bug](https://github.com/mesonbuild/meson/issues/new) report\nwith details and we'll look into it.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "BUILTIN", "is_container": false, "example": null, "extends": null, "returned_by": [], "extended_by": ["host_machine", "target_machine"], "methods": {"cpu": {"name": "cpu", "description": "Returns a more specific CPU name, such as `i686`, `amd64`, etc.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "cpu_family": {"name": "cpu_family", "description": "Returns the CPU family name.\n[This table](Reference-tables.md#cpu-families) contains\nall known CPU families. These are guaranteed to continue working.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "endian": {"name": "endian", "description": "returns `'big'` on big-endian systems and `'little'` on little-endian systems.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "system": {"name": "system", "description": "Returns the operating system name.\n[This table](Reference-tables.md#operating-system-names) Lists\nall of the currently known Operating System names, these are\nguaranteed to continue working.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "build_tgt": {"name": "build_tgt", "description": "A build target is either an executable, shared library, static library,\nboth shared and static library or shared module.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "tgt", "returned_by": ["build_target", "shared_module"], "extended_by": ["exe", "jar", "lib"], "methods": {"extract_all_objects": {"name": "extract_all_objects", "description": "Acts the same as `extract_objects`, but returns all object files generated\nby this target.\n\nBy default only objects built for this target are returned to maintain\nbackward compatibility with previous versions.  The default value for the\n`recursive` kwarg will eventually be changed to `true` in a future version.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "extracted_obj", "holds": []}], "returns_str": "extracted_obj", "posargs": {}, "optargs": {}, "kwargs": {"recursive": {"name": "recursive", "description": "Also return objects passed to the `objects` argument of this target.\n", "since": "0.46.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "extract_objects": {"name": "extract_objects", "description": "Returns an opaque value representing the object files generated for those\nsource files. This is typically used to take single object files and link\nthem to unit tests or to compile some source files with custom flags. To\nuse the object file(s) in another build target, use the\n`objects:` keyword argument to a [[build_target]] or [[declare_dependency]],\nor include them in the command line of a [[custom_target]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "extracted_obj", "holds": []}], "returns_str": "extracted_obj", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "source", "description": "Source filenames for which the built objects should be extracted.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "found": {"name": "found", "description": "Always returns `true`. This function is meant to make executables\nobjects feature compatible with [[@external_program]] objects. This\nsimplifies use-cases where an executable is used instead of\nan [[@external_program]].", "since": "0.59.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "full_path": {"name": "full_path", "description": "Returns a full path pointing to the result target file.\n**NOTE:** In most cases using the object itself will do the same job\nas this and will also allow Meson to setup inter-target dependencies\ncorrectly. Please file a bug if that doesn't work for you.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "name": {"name": "name", "description": "Returns the name of the target.", "since": "0.54.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "path": {"name": "path", "description": "Does the exact same as [[build_tgt.full_path]]. **NOTE**: This\nfunction is solely kept for compatibility with [[@external_program]] objects.\nIt will be removed once the, also deprecated, corresponding `path()`\nfunction in the [[@external_program]] object is removed.", "since": "0.59.0", "deprecated": "0.59.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "private_dir_include": {"name": "private_dir_include", "description": "Returns a value that works like [[include_directories]], but points to the\nprivate directory of this target. Usually only needed if an another target\nneeds to access some generated internal headers of this target.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "inc", "holds": []}], "returns_str": "inc", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "cfg_data": {"name": "cfg_data", "description": "This object encapsulates\nconfiguration values to be used for generating configuration files. A\nmore in-depth description can be found in the [the configuration wiki\npage](Configuration.md).", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["configuration_data"], "extended_by": [], "methods": {"get": {"name": "get", "description": "Returns the value of `varname`, if the\nvalue has not been set returns `default_value` if it is defined\n*(since 0.38.0)* and errors out if not", "since": "0.38.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "returns_str": "str|int|bool", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"default_value": {"name": "default_value", "description": "The default value to return when `varname` does not exist", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "type_str": "str|int|bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_unquoted": {"name": "get_unquoted", "description": "Returns the value\nof `varname` but without surrounding double quotes (`\"`). If the value has\nnot been set returns `default_value` if it is defined and errors out if not.", "since": "0.44.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "returns_str": "str|int|bool", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"default_value": {"name": "default_value", "description": "The default value to return when `varname` does not exist", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "type_str": "str|int|bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "has": {"name": "has", "description": "returns `true` if the specified variable is set", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "keys": {"name": "keys", "description": "Returns an array of keys of\nthe configuration data object.\n\nYou can iterate over this array with the [`foreach`\nstatement](Syntax.md#foreach-statements).", "since": "0.57.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "merge_from": {"name": "merge_from", "description": "Takes as argument a different\nconfiguration data object and copies all entries from that object to\nthe current.", "since": "0.42.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"other": {"name": "other", "description": "The other [[@cfg_data]] object to merge into this one.", "since": null, "deprecated": null, "type": [{"obj": "cfg_data", "holds": []}], "type_str": "cfg_data", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "set": {"name": "set", "description": "Sets a variable to a given value", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "value": {"name": "value", "description": "The value to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "type_str": "str|int|bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"description": {"name": "description", "description": "Message / Comment that will be written in the\nresult file. The replacement assumes a file with C syntax. If your\ngenerated file is source code in some other language, you probably\ndon't want to add a description field because it most likely will\ncause a syntax error.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "set10": {"name": "set10", "description": "Is the same as [[cfg_data.set]] but the value\nis either `true` or `false` and will be written as 1 or 0,\nrespectively", "since": null, "deprecated": null, "notes": [], "warnings": ["numeric values < 0 have the surprising behavior of being converted to `true`, values > 1 have the more expected but unintentional behavior of being interpreted as `true`."], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "value": {"name": "value", "description": "The value to set as either `1` or `0`\n\nPassing numbers was never intended to work, and since 0.62 it has been\ndeprecated. It will be removed in a future version of Meson. If you\nneed to pass numbers use the `.set` method.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "int", "holds": []}], "type_str": "bool|int", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"description": {"name": "description", "description": "Message / Comment that will be written in the\nresult file. The replacement assumes a file with C syntax. If your\ngenerated file is source code in some other language, you probably\ndon't want to add a description field because it most likely will\ncause a syntax error.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "set_quoted": {"name": "set_quoted", "description": "Is same as [[cfg_data.set]] but quotes the value in double quotes (`\"`)", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"varname": {"name": "varname", "description": "The name of the variable to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "value": {"name": "value", "description": "The value to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "int", "holds": []}, {"obj": "bool", "holds": []}], "type_str": "str|int|bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"description": {"name": "description", "description": "Message / Comment that will be written in the\nresult file. The replacement assumes a file with C syntax. If your\ngenerated file is source code in some other language, you probably\ndon't want to add a description field because it most likely will\ncause a syntax error.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}}}, "cmake": {"name": "cmake", "description": "The CMake module", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "MODULE", "is_container": false, "example": null, "extends": null, "returned_by": [], "extended_by": [], "methods": {"subproject_options": {"name": "subproject_options", "description": "Returns an empty `cmake_options` object.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "cmake_options", "holds": []}], "returns_str": "cmake_options", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "cmake_options": {"name": "cmake_options", "description": "Central configuration object for CMake subprojects", "since": "0.55.0", "deprecated": null, "notes": [], "warnings": [], "defined_by_module": "cmake", "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["subproject_options"], "extended_by": [], "methods": {"add_cmake_defines": {"name": "add_cmake_defines", "description": "Add CMake defines (`-D<VAR>=<VAL>`) to the CMake commandline", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "defines", "description": "A `key` `value` map of CMake defines to add (`-D<key>=<val>`)", "since": null, "deprecated": null, "type": [{"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "dict[str]", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}}}, "compiler": {"name": "compiler", "description": "This object is returned by [[meson.get_compiler]].\nIt represents a compiler for a given language and allows you to query its properties.", "since": null, "deprecated": null, "notes": ["These compiler checks do not use compiler arguments added\nwith `add_*_arguments()`, via `-Dlang_args` on the command-line, or\nthrough `CFLAGS`/`LDFLAGS`, etc in the environment. Hence, you can\ntrust that the tests will be fully self-contained, and won't fail\nbecause of custom flags added by other parts of the build file or by\nusers.\n", "Note that if you have a single prefix with all your dependencies, you\nmight find it easier to append to the environment variables\n`C_INCLUDE_PATH` with GCC/Clang and `INCLUDE` with MSVC to expand the\ndefault include path, and `LIBRARY_PATH` with GCC/Clang and `LIB` with\nMSVC to expand the default library search path.\n\nHowever, with GCC, these variables will be ignored when\ncross-compiling. In that case you need to use a specs file. See:\nhttp://www.mingw.org/wiki/SpecsFileHOWTO\n"], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["get_compiler"], "extended_by": [], "methods": {"alignment": {"name": "alignment", "description": "Returns the alignment of the specified type. For C-like languages,\nFor C-like languages, the header `stddef.h` and `stdio.h` are included\nimplicitly for native compilation, only `stddef.h` is included when\ncross-compiling.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {"typename": {"name": "typename", "description": "The name of the type to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "check_header": {"name": "check_header", "description": "Returns true if the specified header is *usable*\nwith the specified prefix, dependencies, and arguments.", "since": "0.47.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"header_name": {"name": "header_name", "description": "The header to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the header check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "0.50.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "cmd_array": {"name": "cmd_array", "description": "Returns an array containing the command(s) for the compiler.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "compiles": {"name": "compiles", "description": "Returns true if the code compiles.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"code": {"name": "code", "description": "The source code to check.\n\nIf a string is passed, the code is used directly. If a [[@file]] object\nis passed, its content is used for the compiler check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name": {"name": "name", "description": "The name to use for printing a message about the compiler check.\nIf this keyword argument is not passed, no message will be printed about the check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "werror": {"name": "werror", "description": "When set to `true`, compiler warnings are treated as error.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "compute_int": {"name": "compute_int", "description": "Computes the value of the given expression\n(as an example `1 + 2`). When cross compiling this is evaluated with\nan iterative algorithm, you can specify keyword arguments `low`\n(defaults to -1024), `high` (defaults to 1024) and `guess` to\nspecify max and min values for the search and the value to try\nfirst.\nFor C-like languages, the header `stddef.h` and `stdio.h` are included\nimplicitly for native compilation, only `stddef.h` is included when\ncross-compiling.", "since": "0.40.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {"expr": {"name": "expr", "description": "The expression to compute.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "guess": {"name": "guess", "description": "The value to try first.", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "high": {"name": "high", "description": "The max value.", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "1024", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "low": {"name": "low", "description": "The min value.", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "-1024", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "find_library": {"name": "find_library", "description": "Tries to find the library specified in the positional argument.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {"libname": {"name": "libname", "description": "The library to find.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"dirs": {"name": "dirs", "description": "Additional directories to search in.\n\nBy default the library is searched for in the system library directory\n(e.g. /usr/lib). Specifying more directories here, causes Meson to search\nin those directories as well as the system directories.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "disabler": {"name": "disabler", "description": "If `true`, this method will return a [[@disabler]] on a failed check.", "since": "0.49.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "has_headers": {"name": "has_headers", "description": "List of headers that must be found as well.\nThis check is equivalent to checking each header with a\n[[compiler.has_header]] call.\n\nWhen used, kwargs that [[compiler.has_header]] would accept can be\npassed here prefixed with `header_`, and will have the same effect on\nthe header check.\n", "since": "0.50.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "header_args": {"name": "header_args", "description": "When the `has_headers` kwarg is also used, this argument is passed to\n[[compiler.has_header]] as `args`.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "header_dependencies": {"name": "header_dependencies", "description": "When the `has_headers` kwarg is also used, this argument is passed to\n[[compiler.has_header]] as `dependencies`.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "header_include_directories": {"name": "header_include_directories", "description": "When the `has_headers` kwarg is also used, this argument is passed to\n[[compiler.has_header]] as `include_directories`.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "header_no_builtin_args": {"name": "header_no_builtin_args", "description": "When the `has_headers` kwarg is also used, this argument is passed to\n[[compiler.has_header]] as `no_builtin_args`.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "header_prefix": {"name": "header_prefix", "description": "When the `has_headers` kwarg is also used, this argument is passed to\n[[compiler.has_header]] as `prefix`.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "If set `true`, Meson will abort with an error if the library could not\nbe found. Otherwise, Meson will continue and the found method of the\nreturned object will return `false`.\n\nWhen set to a [`feature`](Build-options.md#features) option, the feature\nwill control if it is searched and whether to fail if not found.\n\n*(since 0.47.0)* The value of a `feature` option can also be passed here.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "true", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "static": {"name": "static", "description": "If `true`, the search is limited to static libraries only.\nSetting this value to `false` (the default) will search for both shared\n*and* static libraries.\n", "since": "0.51.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "first_supported_argument": {"name": "first_supported_argument", "description": "Given a list of strings, returns a single-element list containing the first\nargument that passes the [[compiler.has_argument]] test or an empty array if\nnone pass.", "since": "0.43.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "arg", "description": "The arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "first_supported_link_argument": {"name": "first_supported_link_argument", "description": "Given a list of strings, returns the first argument that passes the\n[[compiler.has_link_argument]] test or an empty array if none pass.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "arg", "description": "The link arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "get_argument_syntax": {"name": "get_argument_syntax", "description": "returns a string identifying the type of arguments the compiler takes.\nCan be one of `gcc`, `msvc`, or an undefined\nstring value. This method is useful for identifying compilers that are not\ngcc or msvc, but use the same argument syntax as one of those two compilers\nsuch as clang or icc, especially when they use different syntax on different\noperating systems.", "since": "0.49.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_define": {"name": "get_define", "description": "Returns the given preprocessor symbol's value\nas a string or empty string if it is not defined.\n\n*(since 0.47.0)* This method will concatenate string literals as\nthe compiler would. E.g. `\"a\" \"b\"` will become `\"ab\"`.", "since": "0.40.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {"definename": {"name": "definename", "description": "The define to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "get_id": {"name": "get_id", "description": "Returns a string identifying the compiler.\nFor example, `gcc`, `msvc`, [and more](Reference-tables.md#compiler-ids).", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_linker_id": {"name": "get_linker_id", "description": "Returns a string identifying the linker.\nFor example, `ld.bfd`, `link`, [and more](Reference-tables.md#linker-ids).", "since": "0.53.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_supported_arguments": {"name": "get_supported_arguments", "description": "Returns an array containing only the arguments supported by the compiler,\nas if [[compiler.has_argument]] were called on them individually.", "since": "0.43.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {"checked": {"name": "checked", "description": "Supported values:\n  - `'off'`: Quietly ignore unsupported arguments\n  - `'warn'`: Print a warning for unsupported arguments\n  - `'require'`: Abort if at least one argument is not supported\n", "since": "0.59.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "'off'", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "arg", "description": "The arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "get_supported_function_attributes": {"name": "get_supported_function_attributes", "description": "Returns an array containing any names that are supported GCC style attributes.\nEquivalent to [[compiler.has_function_attribute]] was called on each of\nthem individually.", "since": "0.48.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_supported_link_arguments": {"name": "get_supported_link_arguments", "description": "Returns an array containing only the arguments supported by the compiler,\nas if [[compiler.has_link_argument]] were called on them individually.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "arg", "description": "The link arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "has_argument": {"name": "has_argument", "description": "Returns `true` if the compiler accepts the specified command line argument,\nthat is, can compile code without erroring out or printing a warning about\nan unknown flag.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"argument": {"name": "argument", "description": "The argument to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_define": {"name": "has_define", "description": "Returns true if the given preprocessor symbol is *defined*.", "since": "1.3.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"definename": {"name": "definename", "description": "The define to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_function": {"name": "has_function", "description": "Returns true if the given function is provided\nby the standard library or a library passed in with the `args` keyword.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"funcname": {"name": "funcname", "description": "The function to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_function_attribute": {"name": "has_function_attribute", "description": "Returns `true` if the compiler supports the GNU style (`__attribute__(...)`) `name`.\nThis is preferable to manual compile checks as it may be optimized for compilers that\ndo not support such attributes.\n[This table](Reference-tables.md#gcc-__attribute__) lists all of the supported attributes.", "since": "0.48.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"name": {"name": "name", "description": "The attribute name to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_header": {"name": "has_header", "description": "Returns true if the specified header is *exists*\nwith the specified prefix, dependencies, and arguments.\n\nThis method is faster than [[compiler.check_header]] since it only does a\npre-processor check.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"header_name": {"name": "header_name", "description": "The header to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the header check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "0.50.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_header_symbol": {"name": "has_header_symbol", "description": "Detects whether a particular symbol is declared in the specified header.\n\nSymbols here include function, variable, `#define`, type definition, etc.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"header": {"name": "header", "description": "The header to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "symbol": {"name": "symbol", "description": "The symbol to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the header check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "0.50.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_link_argument": {"name": "has_link_argument", "description": "Returns `true` if the linker accepts the specified command line argument,\nthat is, can\ncompile and link code without erroring out or printing a warning\nabout an unknown flag. Link arguments will be passed to the\ncompiler, so should usually have the `-Wl,` prefix. On VisualStudio\na `/link` argument will be prepended.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"argument": {"name": "argument", "description": "The argument to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_member": {"name": "has_member", "description": "Returns true if the type has the specified member.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"typename": {"name": "typename", "description": "The type to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "membername": {"name": "membername", "description": "The member to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "has_members": {"name": "has_members", "description": "Returns `true` if the type has *all* the specified members.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"typename": {"name": "typename", "description": "The type to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "member", "description": "The members to check", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "has_multi_arguments": {"name": "has_multi_arguments", "description": "the same as [[compiler.has_argument]] but takes multiple arguments\nand uses them all in a single compiler invocation.", "since": "0.37.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {"required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "arg", "description": "The arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "has_multi_link_arguments": {"name": "has_multi_link_arguments", "description": "the same as [[compiler.has_link_argument]] but takes multiple arguments\nand uses them all in a single compiler invocation.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {"required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "arg", "description": "The link arguments to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "has_type": {"name": "has_type", "description": "Returns `true` if the specified token is a type.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"typename": {"name": "typename", "description": "The type to check.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "required": {"name": "required", "description": "When set to `true`, Meson will halt if the check fails.\nWhen set to a [`feature`](Build-options.md#features) option, the feature will control if it is searched and whether to fail if not found.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}, {"obj": "feature", "holds": []}], "type_str": "bool|feature", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "links": {"name": "links", "description": "Returns true if the code compiles and links.\n\n*Since 0.60.0*, if the `file` object's\nsuffix does not match the compiler object's language, the compiler\ncorresponding to the suffix is used to compile the source, while the\ntarget of the `links` method is used to link the resulting object file.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"code": {"name": "code", "description": "The source code to check.\n\nIf a string is passed, the code is used directly. If a [[@file]] object\nis passed, its content is used for the compiler check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name": {"name": "name", "description": "The name to use for printing a message about the compiler check.\nIf this keyword argument is not passed, no message will be printed about the check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "werror": {"name": "werror", "description": "When set to `true`, compiler warnings are treated as error.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "preprocess": {"name": "preprocess", "description": "Preprocess a list of source files but do not compile them. The preprocessor\nwill receive the same arguments (include directories, defines, etc) as with\nnormal compilation. That includes for example args added with\n`add_project_arguments()`, or on the command line with `-Dc_args=-DFOO`.", "since": "0.64.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "custom_idx", "holds": []}]}], "returns_str": "list[custom_idx]", "posargs": {}, "optargs": {}, "kwargs": {"compile_args": {"name": "compile_args", "description": "Extra flags to pass to the preprocessor\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required.", "since": "1.1.0", "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "depends": {"name": "depends", "description": "Specifies that this target depends on the specified\ntarget(s). These targets should be built before starting\nto preprocess an input.\n", "since": "1.4.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "build_tgt", "holds": []}, {"obj": "custom_tgt", "holds": []}]}], "type_str": "list[build_tgt|custom_tgt]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "output": {"name": "output", "description": "Template for name of preprocessed files: `@PLAINNAME@` is replaced by\nthe source filename and `@BASENAME@` is replaced by the source filename\nwithout its extension.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "Input source to preprocess. The following types are supported:\n\n- Strings relative to the current source directory\n- [[@file]] objects defined in any preceding build file\n- The return value of configure-time generators such as [[configure_file]]\n- The return value of build-time generators such as\n  [[custom_target]] or [[generator.process]]\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "run": {"name": "run", "description": "Attempts to compile and execute the given code fragment.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "runresult", "holds": []}], "returns_str": "runresult", "posargs": {"code": {"name": "code", "description": "The source code to check.\n\nIf a string is passed, the code is used directly. If a [[@file]] object\nis passed, its content is used for the compiler check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}], "type_str": "str|file", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "name": {"name": "name", "description": "The name to use for printing a message about the compiler check.\nIf this keyword argument is not passed, no message will be printed about the check.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "werror": {"name": "werror", "description": "When set to `true`, compiler warnings are treated as error.", "since": "1.3.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "sizeof": {"name": "sizeof", "description": "returns the size of the given type (e.g. `'int'`) or -1 if the type is unknown.\nFor C-like languages, the header `stddef.h` and `stdio.h` are included\nimplicitly for native compilation, only `stddef.h` is included when\ncross-compiling.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {"typename": {"name": "typename", "description": "The type to compute.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"args": {"name": "args", "description": "Used to pass a list of compiler arguments.\nDefining include paths for headers not in the default include path\nvia `-Isome/path/to/header` is generally supported, however, usually not\nrecommended.\n\nThis is because include directories can also be specified via the\n`include_directories` or the `dependency` kwarg (if present).\nThe same is also true for passing libraries to link with `-lfoo`.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dependencies": {"name": "dependencies", "description": "Additionally dependencies required for compiling and / or linking.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}, {"obj": "list", "holds": [{"obj": "dep", "holds": []}]}], "type_str": "dep|list[dep]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "include_directories": {"name": "include_directories", "description": "Extra directories for header searches.", "since": "0.38.0", "deprecated": null, "type": [{"obj": "inc", "holds": []}, {"obj": "list", "holds": [{"obj": "inc", "holds": []}]}], "type_str": "inc|list[inc]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "no_builtin_args": {"name": "no_builtin_args", "description": "When set to `true`, the compiler arguments controlled by built-in configuration options are not added.", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "prefix": {"name": "prefix", "description": "Used to add `#include`s and other things that are required\nfor the symbol to be declared. Since 1.0.0 an array is accepted\ntoo. When an array is passed, the items are concatenated together\nseparated by a newline.\nSystem definitions should be passed via compiler args\n(eg: `_GNU_SOURCE` is often required for some symbols to be exposed\non Linux, and it should be passed via `args` keyword argument).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "str|list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "symbols_have_underscore_prefix": {"name": "symbols_have_underscore_prefix", "description": "Returns `true` if the C symbol mangling is one underscore (`_`) prefixed to the symbol.", "since": "0.37.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "version": {"name": "version", "description": "Returns the compiler's version number as a string.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "custom_idx": {"name": "custom_idx", "description": "References a specific output file of a [[@custom_tgt]] object.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["[index]"], "extended_by": [], "methods": {"full_path": {"name": "full_path", "description": "Returns a full path pointing to the result target file\nNOTE: In most cases using the object itself will do the same job as\nthis and will also allow Meson to setup inter-target dependencies\ncorrectly. Please file a bug if that doesn't work for you.\n\nSee [[custom_tgt.full_path]]", "since": "0.54.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "custom_tgt": {"name": "custom_tgt", "description": "This object is returned by [[custom_target]] and contains a target with the following methods:", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "tgt", "returned_by": ["custom_target", "vcs_tag"], "extended_by": [], "methods": {"[index]": {"name": "[index]", "description": "Returns an opaque object that references this target, and\ncan be used as a source in other targets. When it is used as such it\nwill make that target depend on this custom target, but the only\nsource added will be the one that corresponds to the index of the\ncustom target's output argument.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "custom_idx", "holds": []}], "returns_str": "custom_idx", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "full_path": {"name": "full_path", "description": "Returns a full path pointing to the result target file\nNOTE: In most cases using the object itself will do the same job as\nthis and will also allow Meson to setup inter-target dependencies\ncorrectly. Please file a bug if that doesn't work for you.\n*(since 0.54.0)* It can be also called on indexes objects:\n`custom_targets[i].full_path()`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_list": {"name": "to_list", "description": "Returns a list of opaque objects that references this target,\nand can be used as a source in other targets. This can be used to\niterate outputs with `foreach` loop.", "since": "0.54.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "custom_idx", "holds": []}]}], "returns_str": "list[custom_idx]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "dep": {"name": "dep", "description": "Abstract representation of a dependency", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["declare_dependency", "dependency", "find_library", "as_link_whole", "as_system", "partial_dependency"], "extended_by": [], "methods": {"as_link_whole": {"name": "as_link_whole", "description": "Only dependencies created with [[declare_dependency]],\nreturns a copy of the dependency object with all\nlink_with arguments changed to link_whole. This is useful for example for\nfallback dependency from a subproject built with `default_library=static`.\nNote that all `link_with` objects must be static libraries otherwise an error\nwill be raised when trying to `link_whole` a shared library.", "since": "0.56.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "as_system": {"name": "as_system", "description": "Returns a copy of the dependency object, which has changed the value of `include_type`\nto `value`. The `value` argument is optional and\ndefaults to `'preserve'`.", "since": "0.52.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {}, "optargs": {"value": {"name": "value", "description": "The new value. See [[dependency]] for supported values.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "found": {"name": "found", "description": "Returns whether the dependency was found.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_configtool_variable": {"name": "get_configtool_variable", "description": "Gets the command line argument from the config tool (with `--` prepended), or,\nif invoked on a non config-tool dependency, error out.", "since": "0.44.0", "deprecated": "0.56.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {"var_name": {"name": "var_name", "description": "Name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_pkgconfig_variable": {"name": "get_pkgconfig_variable", "description": "Gets the pkg-config variable specified,\nor, if invoked on a non pkg-config\ndependency, error out.", "since": "0.36.0", "deprecated": "0.56.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {"var_name": {"name": "var_name", "description": "Name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"default": {"name": "default", "description": "The value to return if the variable was not found.\nA warning is issued if the variable is not defined and this kwarg is not set.\n", "since": "0.45.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "define_variable": {"name": "define_variable", "description": "You can also redefine a\nvariable by passing a list to this kwarg\nthat can affect the retrieved variable: `['prefix', '/'])`.\n\n*(Since 1.3.0)* Multiple variables can be specified in pairs.\n", "since": "0.44.0", "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "get_variable": {"name": "get_variable", "description": "A generic variable getter method, which replaces the\n`get_*type*_variable` methods. This allows one to get the variable\nfrom a dependency without knowing specifically how that dependency\nwas found. If `default_value` is set and the value cannot be gotten\nfrom the object then `default_value` is returned, if it is not set\nthen an error is raised.", "since": "0.51.0", "deprecated": null, "notes": [], "warnings": ["Before 1.3.0, specifying multiple pkgconfig_define pairs would silently malform the results. Only the first variable would be redefined, but its value would contain both the second variable name, as well as its value."], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {"varname": {"name": "varname", "description": "This argument is used as a default value\nfor `cmake`, `pkgconfig`, `configtool` and `internal` keyword\narguments. It is useful in the common case where `pkgconfig` and `internal`\nuse the same variable name, in which case it's easier to write `dep.get_variable('foo')`\ninstead of `dep.get_variable(pkgconfig: 'foo', internal: 'foo')`.\n", "since": "0.58.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {"cmake": {"name": "cmake", "description": "The CMake variable name", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "configtool": {"name": "configtool", "description": "The configtool variable name", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "default_value": {"name": "default_value", "description": "The default value to return when the variable does not exist", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "internal": {"name": "internal", "description": "The internal variable name", "since": "0.54.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pkgconfig": {"name": "pkgconfig", "description": "The pkgconfig variable name", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "pkgconfig_define": {"name": "pkgconfig_define", "description": "See [[dep.get_pkgconfig_variable]]", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "include_type": {"name": "include_type", "description": "Returns the value set by the `include_type` kwarg.", "since": "0.52.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "name": {"name": "name", "description": "Returns the name of the dependency that was searched.\nReturns `'internal'` for dependencies created with\n[[declare_dependency]].", "since": "0.48.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "partial_dependency": {"name": "partial_dependency", "description": "Returns a new dependency object with the same name, version, found status,\ntype name, and methods as the object that called it. This new\nobject will only inherit other attributes from its parent as\ncontrolled by keyword arguments.\n\nIf the parent has any dependencies, those will be applied to the new\npartial dependency with the same rules. So, given:\n\n```meson\ndep1 = declare_dependency(compile_args : '-Werror=foo', link_with : 'libfoo')\ndep2 = declare_dependency(compile_args : '-Werror=bar', dependencies : dep1)\ndep3 = dep2.partial_dependency(compile_args : true)\n```\n\ndep3 will add `['-Werror=foo', '-Werror=bar']` to the compiler args\nof any target it is added to, but libfoo will not be added to the\nlink_args.\n\nThe following arguments will add the following attributes:\n\n- compile_args: any arguments passed to the compiler\n- link_args: any arguments passed to the linker\n- links: anything passed via link_with or link_whole\n- includes: any include_directories\n- sources: any compiled or static sources the dependency has", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": ["A bug present until 0.50.1 results in the above behavior not working correctly."], "example": null, "returns": [{"obj": "dep", "holds": []}], "returns_str": "dep", "posargs": {}, "optargs": {}, "kwargs": {"compile_args": {"name": "compile_args", "description": "Whether to include compile_args", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "includes": {"name": "includes", "description": "Whether to include includes", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "link_args": {"name": "link_args", "description": "Whether to include link_args", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "links": {"name": "links", "description": "Whether to include links", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "sources": {"name": "sources", "description": "Whether to include sources", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "type_name": {"name": "type_name", "description": "Returns a string describing the type of the\ndependency, the most common values are `internal` for deps created\nwith [[declare_dependency]] and `pkgconfig` for system dependencies\nobtained with Pkg-config.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "version": {"name": "version", "description": "the version number as a string,\nfor example `1.2.8`.\n`unknown` if the dependency provider doesn't support determining the\nversion.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "dict": {"name": "dict", "description": "Stores a mapping of strings to other objects. See [dictionaries](Syntax.md#dictionaries).\n\nYou can also iterate over dictionaries with the [`foreach`\nstatement](Syntax.md#foreach-statements).\n\n*(since 0.48.0)*: Dictionaries can be added (e.g. `d1 = d2 + d3` and `d1 += d2`).\nValues from the second dictionary overrides values from the first.\n*(since 0.62.0)*: Dictionary order is guaranteed to be insertion order.", "since": "0.47.0", "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": true, "example": null, "extends": null, "returned_by": [], "extended_by": [], "methods": {"get": {"name": "get", "description": "returns the value for the key given as first\nargument if it is present in the dictionary, or the optional\nfallback value given as the second argument. If a single argument\nwas given and the key was not found, causes a fatal error", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"key": {"name": "key", "description": "The key to query.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"fallback": {"name": "fallback", "description": "Fallback value that is returned if the key is not in the [[@dict]].", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "has_key": {"name": "has_key", "description": "Returns `true` if the dictionary contains the key given as argument, `false` otherwise.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"key": {"name": "key", "description": "The key to query.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "keys": {"name": "keys", "description": "Returns an array of keys in the dictionary.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "disabler": {"name": "disabler", "description": "A disabler object is an object that behaves in much the same way as\nNaN numbers do in floating point math. That is when used in any\nstatement (function call, logical op, etc) they will cause the\nstatement evaluation to immediately short circuit to return a disabler\nobject. A disabler object has one method:", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["disabler"], "extended_by": [], "methods": {"found": {"name": "found", "description": "Always returns `false`", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "env": {"name": "env", "description": "This object is returned by [[environment]] and stores\ndetailed information about how environment variables should be set.\nIt should be passed as the `env` keyword argument to tests and other functions.\n\n*Since 0.58.0* [[env.append]] and [[env.prepend]] can be called multiple times\non the same `varname`. Earlier Meson versions would warn and only the last\noperation took effect.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": "```meson\nenv = environment()\n\n# MY_PATH will be '0:1:2:3'\nenv.set('MY_PATH', '1')\nenv.append('MY_PATH', '2')\nenv.append('MY_PATH', '3')\nenv.prepend('MY_PATH', '0')\n```\n", "extends": null, "returned_by": ["environment"], "extended_by": [], "methods": {"append": {"name": "append", "description": "appends the given values to\nthe old value of the environment variable, e.g.  `env.append('FOO',\n'BAR', 'BAZ', separator : ';')` produces `BOB;BAR;BAZ` if `FOO` had\nthe value `BOB` and plain `BAR;BAZ` if the value was not defined.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"variable": {"name": "variable", "description": "The variable to modify", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"separator": {"name": "separator", "description": "The separator to use. If not explicitly specified, the default path\nseparator for the host operating system will be used, i.e. ';' for\nWindows and ':' for UNIX/POSIX systems.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Value", "description": "The values to append", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "prepend": {"name": "prepend", "description": "Same as `append` except that it writes to the beginning of the variable.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"variable": {"name": "variable", "description": "The variable to modify", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"separator": {"name": "separator", "description": "The separator to use. If not explicitly specified, the default path\nseparator for the host operating system will be used, i.e. ';' for\nWindows and ':' for UNIX/POSIX systems.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Value", "description": "The values to prepend", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "set": {"name": "set", "description": "Sets the environment variable\nspecified in the first argument to the values in the varargs\njoined by the separator. For instance, `env.set('FOO', 'BAR'),` sets envvar\n`FOO` to value `BAR`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"variable": {"name": "variable", "description": "The variable to modify", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"separator": {"name": "separator", "description": "The separator to use. If not explicitly specified, the default path\nseparator for the host operating system will be used, i.e. ';' for\nWindows and ':' for UNIX/POSIX systems.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "Value", "description": "The values to set", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "unset": {"name": "unset", "description": "Unset the specified environment variable. If this variable does not exist,\nnothing happens.", "since": "1.4.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "exe": {"name": "exe", "description": "An executable", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "build_tgt", "returned_by": ["executable"], "extended_by": [], "methods": {}}, "external_program": {"name": "external_program", "description": "Opaque object representing an external program", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["find_program"], "extended_by": [], "methods": {"found": {"name": "found", "description": "Returns whether the executable was found.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "full_path": {"name": "full_path", "description": "Returns a string pointing to the script or executable.\n\n**NOTE:** You should not usually need to use this method. Passing the\nobject itself should work in most contexts where a program can appear,\nand allows Meson to setup inter-target dependencies correctly (for\nexample in cases where a program might be overridden by a [[@build_tgt]]).\nOnly use this if you specifically need a string, such as when embedding\na program path into a header file, or storing it into an environment\nvariable.\n\nFor example:\n\n```meson\nrun_command(find_program('foo'), 'arg1', 'arg2')\n```", "since": "0.55.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "path": {"name": "path", "description": "*Deprecated:* Use [[external_program.full_path]] instead.\n\nReturns a string pointing to the script or executable.\n\n**NOTE:** You should not usually need to use this method. Passing the\nobject itself should work in most contexts where a program can appear,\nand allows Meson to setup inter-target dependencies correctly (for\nexample in cases where a program might be overridden by a [[@build_tgt]]).\nOnly use this if you specifically need a string, such as when embedding\na program path into a header file, or storing it into an environment\nvariable.\n\nFor example:\n\n```meson\nrun_command(find_program('foo'), 'arg1', 'arg2')\n```", "since": null, "deprecated": "0.55.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "version": {"name": "version", "description": "The version number as a string, for example `1.2.8`.\n\n`unknown` if the program cannot determine the version via a `--version` argument.", "since": "0.62.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "extracted_obj": {"name": "extracted_obj", "description": "Opaque object representing extracted object files from build targets", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["extract_all_objects", "extract_objects"], "extended_by": [], "methods": {}}, "feature": {"name": "feature", "description": "Meson object representing a [`feature` options](Build-options.md#features)", "since": "0.47.0", "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["get_option", "disable_auto_if", "disable_if", "enable_auto_if", "enable_if", "require"], "extended_by": [], "methods": {"allowed": {"name": "allowed", "description": "Returns whether the feature was set to `'enabled'` or `'auto'`", "since": "0.59.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "auto": {"name": "auto", "description": "Returns whether the feature was set to `'auto'`", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "disable_auto_if": {"name": "disable_auto_if", "description": "Returns the feature, with `'auto'` converted to `'disabled'` if value is true.\n\n| Feature  | `value = true` | `value = false` |\n| -------- | -------------- | --------------- |\n| Auto     | Disabled       | Auto            |\n| Enabled  | Enabled        | Enabled         |\n| Disabled | Disabled       | Disabled        |", "since": "0.59.0", "deprecated": null, "notes": [], "warnings": [], "example": "`disable_auto_if` is useful to give precedence to mutually exclusive dependencies\n(that provide the same API) if either or both are available:\n\n```\n# '-Dfoo=auto -Dbar=enabled' will not pick foo even if installed.\nuse_bar = get_option('bar')\nuse_foo = get_option('foo').disable_auto_if(use_bar.enabled())\ndep_foo = dependency('foo', required: use_foo)\nif not dep_foo.found()\n  dep_foo = dependency('bar', required: use_bar)\nendif\n```\n", "returns": [{"obj": "feature", "holds": []}], "returns_str": "feature", "posargs": {"value": {"name": "value", "description": "See the table above", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "disable_if": {"name": "disable_if", "description": "Returns the object itself if the value is false; an error if the object is\n`'enabled'` and the value is true; a disabled feature if the object\nis `'auto'` or `'disabled'` and the value is true.\n\n| Feature  | `value = true` | `value = false` |\n| -------- | -------------- | --------------- |\n| Auto     | Disabled       | Auto            |\n| Enabled  | Error          | Enabled         |\n| Disabled | Disabled       | Disabled        |\n\nThis is equivalent to `feature_opt.require(not condition)`, but may make\ncode easier to reason about, especially when mixed with `enable_if`", "since": "1.1.0", "deprecated": null, "notes": [], "warnings": [], "example": "`disable_if` is useful to restrict the applicability of `'auto'` features,\nparticularly when passing them to [[dependency]]:\n\n```\nuse_os_feature = get_option('foo') \\\n  .disable_if(host_machine.system() == 'darwin', error_message : 'os feature not supported on MacOS')\ndep_os_feature = dependency('os_feature', required: use_os_feature)\n```\n", "returns": [{"obj": "feature", "holds": []}], "returns_str": "feature", "posargs": {"value": {"name": "value", "description": "The value to check", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"error_message": {"name": "error_message", "description": "The error message to print if the check fails", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "''", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "disabled": {"name": "disabled", "description": "Returns whether the feature was set to `'disabled'`", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "enable_auto_if": {"name": "enable_auto_if", "description": "Returns the feature, with `'auto'` converted to `'enabled'` if value is true.\n\n| Feature  | `value = true` | `value = false` |\n| -------- | -------------- | --------------- |\n| Auto     | Enabled        | Auto            |\n| Enabled  | Enabled        | Enabled         |\n| Disabled | Disabled       | Disabled        |", "since": "1.1.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "feature", "holds": []}], "returns_str": "feature", "posargs": {"value": {"name": "value", "description": "See the table above", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "enable_if": {"name": "enable_if", "description": "Returns the object itself if the value is false; an error if the object is\n`'disabled'` and the value is true; an enabled feature if the object\nis `'auto'` or `'enabled'` and the value is true.\n\n| Feature  | `value = true` | `value = false` |\n| -------- | -------------- | --------------- |\n| Auto     | Enabled        | Auto            |\n| Enabled  | Enabled        | Enabled         |\n| Disabled | Error          | Disabled        |", "since": "1.1.0", "deprecated": null, "notes": [], "warnings": [], "example": "`enable_if` is useful to restrict the applicability of `'auto'` features,\nparticularly when passing them to [[dependency]]:\n\n```\nuse_llvm = get_option('llvm').enable_if(with_clang).enable_if(with_llvm_libs)\ndep_llvm = dependency('llvm', required: use_llvm)\n```\n", "returns": [{"obj": "feature", "holds": []}], "returns_str": "feature", "posargs": {"value": {"name": "value", "description": "The value to check", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"error_message": {"name": "error_message", "description": "The error message to print if the check fails", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "''", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "enabled": {"name": "enabled", "description": "Returns whether the feature was set to `'enabled'`", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "require": {"name": "require", "description": "Returns the object itself if the value is true; an error if the object is\n`'enabled'` and the value is false; a disabled feature if the object\nis `'auto'` or `'disabled'` and the value is false.\n\n| Feature  | `value = true` | `value = false` |\n| -------- | -------------- | --------------- |\n| Auto     | Auto           | Disabled        |\n| Enabled  | Enabled        | Error           |\n| Disabled | Disabled       | Disabled        |", "since": "0.59.0", "deprecated": null, "notes": [], "warnings": [], "example": "`require` is useful to restrict the applicability of `'auto'` features,\nfor example based on other features or on properties of the host machine:\n\n```\nif get_option('directx').require(host_machine.system() == 'windows',\n      error_message: 'DirectX only available on Windows').allowed() then\n  src += ['directx.c']\n  config.set10('HAVE_DIRECTX', true)\nendif\n```\n", "returns": [{"obj": "feature", "holds": []}], "returns_str": "feature", "posargs": {"value": {"name": "value", "description": "The value to check", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"error_message": {"name": "error_message", "description": "The error message to print if the check fails", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "''", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}}}, "file": {"name": "file", "description": "Object that stores the path to an existing file", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["configure_file"], "extended_by": [], "methods": {"full_path": {"name": "full_path", "description": "Returns a full path pointing to the file. This is useful for printing the\npath with e.g [[message]] function for debugging purpose.\n**NOTE:** In most cases using the object itself will do the same job\nas this and will also allow Meson to setup dependencies correctly.", "since": "1.4.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "generated_list": {"name": "generated_list", "description": "Opaque object representing the result of a [[generator.process]] call.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["process"], "extended_by": [], "methods": {}}, "generator": {"name": "generator", "description": "This object is returned by [[generator]] and contains a\ngenerator that is used to transform files from one type to another by\nan executable (e.g. `idl` files into source code and headers).", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["generator"], "extended_by": [], "methods": {"process": {"name": "process", "description": "Takes a list of files, causes them to be processed and returns an object containing the result\nwhich can then, for example, be passed into a build target definition.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "generated_list", "holds": []}], "returns_str": "generated_list", "posargs": {}, "optargs": {}, "kwargs": {"env": {"name": "env", "description": "environment variables to set, such as\n`{'NAME1': 'value1', 'NAME2': 'value2'}` or `['NAME1=value1', 'NAME2=value2']`,\nor an [[@env]] object which allows more\nsophisticated environment juggling.\n", "since": "1.3.0", "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}], "type_str": "env|list[str]|dict[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "extra_args": {"name": "extra_args", "description": "If present, will be used to replace an entry `@EXTRA_ARGS@` in the argument list.\n", "since": null, "deprecated": null, "type": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "type_str": "list[str]", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "preserve_path_from": {"name": "preserve_path_from", "description": "If given, specifies that the output files need to maintain their directory structure\ninside the target temporary directory. The most common value for this is\n`meson.current_source_dir()`. With this value when a file called\n`subdir/one.input` is processed it generates a file `{target private\ndirectory}/subdir/one.out` as opposed to `{target private\ndirectory}/one.out`.\n", "since": "0.45.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "source", "description": "List of sources to process.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}, {"obj": "generated_list", "holds": []}], "type_str": "str|file|custom_tgt|custom_idx|generated_list", "required": false, "default": null, "min_varargs": 1, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}}}, "host_machine": {"name": "host_machine", "description": "Provides information about the host machine -- the machine on which the\ncompiled binary will run. See\n[Cross-compilation](Cross-compilation.md).\n\nIt has the same methods as [[@build_machine]].\n\nWhen not cross-compiling, all the methods return the same values as\n[[@build_machine]] (because the build machine is the host machine)\n\nNote that while cross-compiling, it simply returns the values defined\nin the cross-info file.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "BUILTIN", "is_container": false, "example": null, "extends": "build_machine", "returned_by": [], "extended_by": [], "methods": {}}, "inc": {"name": "inc", "description": "Opaque wrapper for storing include directories", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["include_directories", "private_dir_include"], "extended_by": [], "methods": {}}, "int": {"name": "int", "description": "All integer numbers. See [Numbers](Syntax.md#numbers) for more information.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": false, "example": null, "extends": null, "returned_by": ["get_option", "to_int", "get", "get_unquoted", "alignment", "compute_int", "sizeof", "length", "returncode", "to_int"], "extended_by": [], "methods": {"is_even": {"name": "is_even", "description": "Returns true if the number is even.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "is_odd": {"name": "is_odd", "description": "Returns true if the number is odd", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_string": {"name": "to_string", "description": "Returns the value of the number as a string.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {"fill": {"name": "fill", "description": "Left fill the string with zeros until it reaches the length\nspecified by this argument. A leading negative sign counts towards\nthe length, and is handled by inserting the padding after the `-`\ncharacter rather than before. The original string is returned if the\nvalue provided is less than or equal to the former's length.\n", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "jar": {"name": "jar", "description": "A Java JAR build target", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "build_tgt", "returned_by": ["jar"], "extended_by": [], "methods": {}}, "lib": {"name": "lib", "description": "Represents either a shared or static library", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "build_tgt", "returned_by": ["library", "shared_library", "static_library", "get_shared_lib", "get_static_lib"], "extended_by": ["both_libs"], "methods": {}}, "list": {"name": "list", "description": "An array of elements. See [arrays](Syntax.md#arrays).", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": true, "example": null, "extends": null, "returned_by": ["files", "get_option", "keys", "cmd_array", "first_supported_argument", "first_supported_link_argument", "get_supported_arguments", "get_supported_function_attributes", "get_supported_link_arguments", "preprocess", "to_list", "keys", "project_license", "project_license_files", "split", "splitlines"], "extended_by": [], "methods": {"contains": {"name": "contains", "description": "Returns `true` if the array contains the object\ngiven as argument, `false` otherwise", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"item": {"name": "item", "description": "The item to check", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "get": {"name": "get", "description": "returns the object at the given index,\nnegative indices count from the back of the array, indexing out of\nbounds returns the `fallback` value *(since 0.38.0)* or, if it is\nnot specified, causes a fatal error", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"index": {"name": "index", "description": "Index of the list position to query. Negative values start at the end of the list", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"fallback": {"name": "fallback", "description": "Fallback value that is returned if the index is out of range.", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "length": {"name": "length", "description": "Returns the current size of the array / list.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "meson": {"name": "meson", "description": "The `meson` object allows you to introspect various properties of the\nsystem. This object is always mapped in the `meson` variable.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "BUILTIN", "is_container": false, "example": null, "extends": null, "returned_by": [], "extended_by": [], "methods": {"add_devenv": {"name": "add_devenv", "description": "add an [[@env]] object (returned by [[environment]])\nto the list of environments that will be applied when using [`meson devenv`](Commands.md#devenv)\ncommand line.\n\nThis is useful for developers who wish to use the project without\ninstalling it, it is often needed to set for example the path to plugins\ndirectory, etc. Alternatively, a list or dictionary can be passed as first\nargument.\n\n``` meson\ndevenv = environment()\ndevenv.set('PLUGINS_PATH', meson.current_build_dir())\n...\nmeson.add_devenv(devenv)\n```\n\nAfter configuring and compiling that project, a terminal can be opened with\nthe environment set:\n\n```sh\n$ meson devenv -C <builddir>\n$ echo $PLUGINS_PATH\n/path/to/source/subdir\n```\n\nSee [`meson devenv`](Commands.md#devenv) command documentation for a list of\nenvironment variables that are set by default by Meson.", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"env": {"name": "env", "description": "The [[@env]] object to add.\nSince *0.62.0* list of strings is allowed in dictionary values. In that\ncase values are joined using the separator.\n", "since": null, "deprecated": null, "type": [{"obj": "env", "holds": []}, {"obj": "str", "holds": []}, {"obj": "list", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "str", "holds": []}]}, {"obj": "dict", "holds": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}]}], "type_str": "env|str|list[str]|dict[str]|dict[list[str]]", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"method": {"name": "method", "description": "Must be one of 'set', 'prepend', or 'append'\n(defaults to 'set'). Controls if initial values defined in the first\npositional argument are prepended, appended or replace the current value\nof the environment variable.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "separator": {"name": "separator", "description": "The separator to use for the initial values defined in\nthe first positional argument. If not explicitly specified, the default\npath separator for the host operating system will be used, i.e. ';' for\nWindows and ':' for UNIX/POSIX systems.\n", "since": "0.62.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "add_dist_script": {"name": "add_dist_script", "description": "Causes the script given as argument to run during `dist`\noperation after the\ndistribution source has been generated but before it is\narchived. Note that this runs the script file that is in the\n_staging_ directory, not the one in the source directory. If the\nscript file cannot be found in the staging directory, it is a hard\nerror. The `MESON_DIST_ROOT` environment variables is set when dist scripts is\nrun.\n\n*(since 0.54.0)* The `MESON_SOURCE_ROOT` and `MESON_BUILD_ROOT`\nenvironment variables are set when dist scripts are run. They are path to the\nroot source and build directory of the main project, even when the script\ncomes from a subproject.\n\n*(since 0.58.0)* This command can be invoked from a subproject, it was a hard\nerror in earlier versions. Subproject dist scripts will only be executed\nwhen running `meson dist --include-subprojects`. `MESON_PROJECT_SOURCE_ROOT`,\n`MESON_PROJECT_BUILD_ROOT` and `MESON_PROJECT_DIST_ROOT` environment\nvariables are set when dist scripts are run. They are identical to\n`MESON_SOURCE_ROOT`, `MESON_BUILD_ROOT` and `MESON_DIST_ROOT` for main project\nscripts, but for subproject scripts they have the path to the root of the\nsubproject appended, usually `subprojects/<subproject-name>`.\n\n*(since 1.4.0)* The `MESONREWRITE` environment variable contains the path\nto the rewrite command that corresponds to the `meson` executable that\nwas used to configure the build. (This might be a different path than the\nfirst executable found in `PATH`.) It can be used to remove or replace\nany [[run_command]] that depends on the revision control system from the\nbuild configuration. Note that the value will contain many parts. For\nexample, it may be `python3 /path/to/meson.py introspect`. The user is\nresponsible for splitting the string to an array if needed by splitting\nlexically like a UNIX shell would. If your script uses Python,\n`shlex.split()` is the easiest correct way to do this.", "since": "0.48.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"script_name": {"name": "script_name", "description": "The script to execute.\n\n*(since 0.55.0)* The output of [[find_program]] as well as strings are accepted.\n\n*(since 0.57.0)* [[@file]] objects and the output of [[configure_file]] may be used.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "str|file|external_program", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "arg", "description": "Additional arguments\n\n*(since 0.55.0)* The output of [[configure_file]], [[files]], and [[find_program]]\nas well as strings are accepted.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "str|file|external_program", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_install_script": {"name": "add_install_script", "description": "Causes the script given as an argument to be run during the install step,\nthis script  will have the environment variables `MESON_SOURCE_ROOT`,\n`MESON_BUILD_ROOT`, `MESON_INSTALL_PREFIX`,\n`MESON_INSTALL_DESTDIR_PREFIX`, and `MESONINTROSPECT` set.\nAll positional arguments are passed as parameters.\n\n*(since 0.54.0)* If `meson install` is called with the `--quiet` option, the\nenvironment variable `MESON_INSTALL_QUIET` will be set.\n\n*(since 1.1.0)* If `meson install` is called with the `--dry-run` option, the\nenvironment variable `MESON_INSTALL_DRY_RUN` will be set.\n\nMeson uses the `DESTDIR` environment variable as set by the\ninherited environment to determine the (temporary) installation\nlocation for files. Your install script must be aware of this while\nmanipulating and installing files. The correct way to handle this is\nwith the `MESON_INSTALL_DESTDIR_PREFIX` variable which is always set\nand contains `DESTDIR` (if set) and `prefix` joined together. This\nis useful because both are usually absolute paths and there are\nplatform-specific edge-cases in joining two absolute paths.\n\nIn case it is needed, `MESON_INSTALL_PREFIX` is also always set and\nhas the value of the `prefix` option passed to Meson.\n\n`MESONINTROSPECT` contains the path to the introspect command that\ncorresponds to the `meson` executable that was used to configure the\nbuild. (This might be a different path than the first executable\nfound in `PATH`.) It can be used to query build configuration. Note\nthat the value will contain many parts, f.ex., it may be `python3\n/path/to/meson.py introspect`. The user is responsible for splitting\nthe string to an array if needed by splitting lexically like a UNIX\nshell would. If your script uses Python, `shlex.split()` is the\neasiest correct way to do this.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"script_name": {"name": "script_name", "description": "The script to execute.\n\n*(since 0.55.0)* The output of [[find_program]], [[executable]],\n[[custom_target]], as well as strings are accepted.\n\n*(since 0.57.0)* [[@file]] objects and the output of [[configure_file]] may be used.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "exe", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|external_program|exe|custom_tgt|custom_idx", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"dry_run": {"name": "dry_run", "description": "If `true` the script will be run even if `--dry-run` option is provided to\nthe `meson install` command. The script can use the `MESON_INSTALL_DRY_RUN`\nvariable to determine if it is in dry run mode or not.\n", "since": "1.1.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "install_tag": {"name": "install_tag", "description": "A string used by the `meson install --tags` command\nto install only a subset of the files.\nBy default the script has no install tag which means it is not being run when\n`meson install --tags` argument is specified.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "skip_if_destdir": {"name": "skip_if_destdir", "description": "If `true` the script will not be run if DESTDIR is set during installation.\nThis is useful in the case the script updates system wide\ncache that is only needed when copying files into final destination.\n", "since": "0.57.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": {"name": "arg", "description": "Additional arguments\n\n*(since 0.55.0)* The output of [[find_program]], [[executable]],\n[[custom_target]], as well as strings are accepted.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}, {"obj": "exe", "holds": []}, {"obj": "custom_tgt", "holds": []}, {"obj": "custom_idx", "holds": []}], "type_str": "str|file|external_program|exe|custom_tgt|custom_idx", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "add_postconf_script": {"name": "add_postconf_script", "description": "Runs the given command after all project files have been generated.\nThis script will have the environment variables\n`MESON_SOURCE_ROOT` and `MESON_BUILD_ROOT` set.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"script_name": {"name": "script_name", "description": "The script to execute.\n\n*(since 0.55.0)* The output of [[find_program]] as well as strings are accepted.\n\n*(since 0.57.0)* [[@file]] objects and the output of [[configure_file]] may be used.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "str|file|external_program", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "arg", "description": "Additional arguments\n\n*(since 0.55.0)* The output of [[configure_file]], [[files]], and [[find_program]]\nas well as strings are accepted.\n", "since": "0.49.0", "deprecated": null, "type": [{"obj": "str", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "str|file|external_program", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "backend": {"name": "backend", "description": "Returns a string representing the current backend:\n\n- `ninja`\n- `vs2010`\n- `vs2012`\n- `vs2013`\n- `vs2015`\n- `vs2017`\n- `vs2019`\n- `vs2022`\n- `xcode`", "since": "0.37.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "build_options": {"name": "build_options", "description": "Returns a string with the configuration line used to set the current project up.", "since": "1.1.0", "deprecated": null, "notes": ["**Do not try to parse this string!**\n\nYou should use [[cfg_data.set_quoted]] to safely escape any embedded\nquotes prior to storing it into e.g. a C header macro.\n\nThe contents returned by this function are the same as the\n\"Build Options:\" line reported in `<builddir>/meson-logs/meson-log.txt`.\n"], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "build_root": {"name": "build_root", "description": "Returns a string with the absolute path to the build root directory.\nThis function will return the\nbuild root of the parent project if called from a subproject, which is usually\nnot what you want. Try using [[meson.current_build_dir]] or [[meson.project_build_root]].\nIn the rare cases where the root of the main project is needed,\nuse [[meson.global_build_root]] that has the same behaviour but with a more explicit\nname.", "since": null, "deprecated": "0.56.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "can_run_host_binaries": {"name": "can_run_host_binaries", "description": "Returns true if the build machine can run binaries compiled for the host.\nThis returns `true` unless you are\ncross compiling, need a helper to run host binaries, and don't have one.\nFor example when cross compiling from Linux to Windows, one can use `wine`\nas the helper.", "since": "0.55.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "current_build_dir": {"name": "current_build_dir", "description": "Returns a string with the absolute path to the current build directory.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "current_source_dir": {"name": "current_source_dir", "description": "Returns a string to the current source directory.", "since": null, "deprecated": null, "notes": ["**You do not need to use this function!**\n\nWhen passing files from the current source directory to a function since\nthat is the default. Also, you can use the [[files]] function to\nrefer to files in the current or any other source directory instead\nof constructing paths manually with [[meson.current_source_dir]].\n"], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_compiler": {"name": "get_compiler", "description": "Returns a [[@compiler]] object describing a compiler.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "compiler", "holds": []}], "returns_str": "compiler", "posargs": {"language": {"name": "language", "description": "The language of the compiler to return.\n\nSee our [list of supported languages](Reference-tables.md#language-arguments-parameter-names).\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"native": {"name": "native", "description": "When set to `true` Meson returns the compiler for the build\nmachine (the \"native\" compiler) and when `false` it returns the host\ncompiler (the \"cross\" compiler). If `native` is omitted, Meson\nreturns the \"cross\" compiler if we're currently cross-compiling and\nthe \"native\" compiler if we're not.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "get_cross_property": {"name": "get_cross_property", "description": "Returns the given property from a cross file, the optional fallback_value\nis returned if not cross compiling or the given property is not found.\n\nThis method is replaced by [[meson.get_external_property]].", "since": null, "deprecated": "0.58.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"propname": {"name": "propname", "description": "Name of the property in the cross / native file.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"fallback_value": {"name": "fallback_value", "description": "Value to return if `propname` is not set in the machine file.", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": false}, "get_external_property": {"name": "get_external_property", "description": "Returns the given property from a native or cross file.\nThe optional fallback_value is returned if the given property is not found.", "since": "0.54.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"propname": {"name": "propname", "description": "Name of the property in the cross / native file.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"fallback_value": {"name": "fallback_value", "description": "Value to return if `propname` is not set in the machine file.", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {"native": {"name": "native", "description": "Setting `native` to `true` forces retrieving a variable from the\nnative file, even when cross-compiling.\nIf `native: false` or not specified, the variable is retrieved from the\ncross-file if cross-compiling, and from the native-file when not cross-compiling.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": false}, "global_build_root": {"name": "global_build_root", "description": "Returns a string with the absolute path to the build root directory.\nThis function will return the build root of the\nmain project if called from a subproject, which is usually not what you want.\nIt is usually preferable to use [[meson.current_build_dir]] or [[meson.project_build_root]].", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "global_source_root": {"name": "global_source_root", "description": "Returns a string with the absolute path to the source root directory.\nThis function will return the source root of the\nmain project if called from a subproject, which is usually not what you want.\nIt is usually preferable to use [[meson.current_source_dir]] or [[meson.project_source_root]].", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "has_exe_wrapper": {"name": "has_exe_wrapper", "description": "Use [[meson.can_run_host_binaries]] instead.", "since": null, "deprecated": "0.55.0", "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "has_external_property": {"name": "has_external_property", "description": "Checks whether the given property exist in a native or cross file.", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"propname": {"name": "propname", "description": "Name of the property in the cross / native file.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"native": {"name": "native", "description": "Setting `native` to `true` forces retrieving a variable from the\nnative file, even when cross-compiling.\nIf `native: false` or not specified, the variable is retrieved from the\ncross-file if cross-compiling, and from the native-file when not cross-compiling.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "install_dependency_manifest": {"name": "install_dependency_manifest", "description": "Installs a manifest file\ncontaining a list of all subprojects, their versions and license names\nto the file name given as the argument.\n\nIf license files are defined as well, they will be copied next to the\nmanifest and referenced in it.\n\nIf this function is not used, the builtin option `licensedir` can\nbe used to install the manifest to a given directory with the name\n`depmf.json`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"output_name": {"name": "output_name", "description": "Name of the manifest file to install", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "is_cross_build": {"name": "is_cross_build", "description": "Returns `true` if the current build is a [cross build](Cross-compilation.md) and `false` otherwise.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "is_subproject": {"name": "is_subproject", "description": "Returns `true` if the current project is being built as a subproject of some other project and `false` otherwise.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "is_unity": {"name": "is_unity", "description": "Returns `true` when doing a [unity build](Unity-builds.md) (multiple sources are combined before compilation to reduce build time) and `false` otherwise.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "override_dependency": {"name": "override_dependency", "description": "Specifies that whenever [[dependency]] with `name` is used, Meson should not\nlook it up on the system but instead return `dep_object`, which may either be\nthe result of [[dependency]] or [[declare_dependency]].\n\nDoing this in a subproject allows the parent\nproject to retrieve the dependency without having to know the dependency\nvariable name: `dependency(name, fallback : subproject_name)`.", "since": "0.54.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"name": {"name": "name", "description": "The name of the dependency to override.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "dep_object": {"name": "dep_object", "description": "The dependency to set as the override for `name`.", "since": null, "deprecated": null, "type": [{"obj": "dep", "holds": []}], "type_str": "dep", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {"native": {"name": "native", "description": "If set to `true`, the dependency is always overwritten for the build machine.\nOtherwise, the dependency is overwritten for the host machine, which\ndiffers from the build machine when cross-compiling.\n", "since": null, "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "false", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "static": {"name": "static", "description": "Used to override static and/or shared dependencies separately.\nIf not specified it is assumed\n`dep_object` follows `default_library` option value.\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "bool", "holds": []}], "type_str": "bool", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "varargs": null, "arg_flattening": true}, "override_find_program": {"name": "override_find_program", "description": "specifies that whenever [[find_program]] is used to find a program\nnamed `progname`, Meson should not look it up on the system but\ninstead return `program`, which may either be the result of\n[[find_program]], [[configure_file]] or [[executable]].\n\n*(since 0.55.0)* If a version\ncheck is passed to [[find_program]] for a program that has been overridden with\nan executable, the current project version is used.", "since": "0.46.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "void", "holds": []}], "returns_str": "void", "posargs": {"progname": {"name": "progname", "description": "The name of the program to override.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "program": {"name": "program", "description": "The program to set as the override for `progname`.", "since": null, "deprecated": null, "type": [{"obj": "exe", "holds": []}, {"obj": "file", "holds": []}, {"obj": "external_program", "holds": []}], "type_str": "exe|file|external_program", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_build_root": {"name": "project_build_root", "description": "Returns a string with the absolute path to the build root directory of the current (sub)project.", "since": "0.56.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_license": {"name": "project_license", "description": "Returns the array of licenses specified in [[project]] function call.", "since": "0.45.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_license_files": {"name": "project_license_files", "description": "Returns the array of license files specified in the [[project]] function call.", "since": "1.1.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "list", "holds": [{"obj": "file", "holds": []}]}], "returns_str": "list[file]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_name": {"name": "project_name", "description": "Returns the project name specified in the [[project]] function call.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_source_root": {"name": "project_source_root", "description": "Returns a string with the absolute path to the source root directory of the current (sub)project.", "since": "0.56.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "project_version": {"name": "project_version", "description": "Returns the version string specified in [[project]] function call.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "source_root": {"name": "source_root", "description": "Returns a string with the absolute path to the source root directory.\n\nThis function will return the source root of the\nparent project if called from a subproject, which is usually not what you want.\nTry using [[meson.current_source_dir]] or [[meson.project_source_root]].\nIn the rare cases where the root of the main project is needed,\nuse [[meson.global_source_root]] that has the same behaviour but with a more explicit\nname.", "since": null, "deprecated": "0.56.0", "notes": ["You should use the [[files]] function\nto refer to files in the root source directory instead of\nconstructing paths manually with [[meson.source_root]].\n"], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "version": {"name": "version", "description": "Return a string with the version of Meson.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "module": {"name": "module", "description": "Base type for all modules.\n\nModules provide their own specific implementation methods, but all modules\nprovide the following methods:", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["import"], "extended_by": [], "methods": {"found": {"name": "found", "description": "Returns `true` if the module was successfully imported, otherwise `false`.", "since": "0.59.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "range": {"name": "range", "description": "Opaque object that can be used in a loop and accessed via `[num]`.", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["range"], "extended_by": [], "methods": {}}, "run_tgt": {"name": "run_tgt", "description": "Opaque object returned by [[run_target]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": "tgt", "returned_by": ["run_target"], "extended_by": [], "methods": {}}, "runresult": {"name": "runresult", "description": "This object encapsulates the result of trying to compile and run a\nsample piece of code with [[compiler.run]] or\n[[run_command]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["run_command", "run"], "extended_by": [], "methods": {"compiled": {"name": "compiled", "description": "If `true`, the compilation succeeded, if `false` it did not\nand the other methods return unspecified data. This is only available\nfor `compiler.run()` results.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "returncode": {"name": "returncode", "description": "The return code of executing the compiled binary", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "stderr": {"name": "stderr", "description": "The standard error produced when the command was run.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "stdout": {"name": "stdout", "description": "The standard out produced when the command was run.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "str": {"name": "str", "description": "All [strings](Syntax.md#strings) have the following methods. Strings\nare immutable, all operations return their results as a new string.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": false, "example": null, "extends": null, "returned_by": ["get_option", "join_paths", "to_string", "cpu", "cpu_family", "endian", "system", "full_path", "name", "path", "get", "get_unquoted", "get_argument_syntax", "get_define", "get_id", "get_linker_id", "version", "full_path", "full_path", "get_configtool_variable", "get_pkgconfig_variable", "get_variable", "include_type", "name", "type_name", "version", "full_path", "path", "version", "full_path", "to_string", "backend", "build_options", "build_root", "current_build_dir", "current_source_dir", "global_build_root", "global_source_root", "project_build_root", "project_name", "project_source_root", "project_version", "source_root", "version", "stderr", "stdout", "format", "join", "replace", "strip", "substring", "to_lower", "to_upper", "underscorify"], "extended_by": [], "methods": {"contains": {"name": "contains", "description": "Returns `true` if string contains the string specified as the argument.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntarget = 'x86_FreeBSD'\nis_fbsd = target.to_lower().contains('freebsd')\n# is_fbsd now has the boolean value 'true'\n```\n", "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"fragment": {"name": "fragment", "description": "The string fragment to check", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "endswith": {"name": "endswith", "description": "Returns true if string ends with the string specified as the argument.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntarget = 'x86_FreeBSD'\nis_bsd = target.to_lower().endswith('bsd') # boolean value 'true'\n```\n", "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"fragment": {"name": "fragment", "description": "The string fragment to check", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "format": {"name": "format", "description": "Strings can be built using the string formatting functionality.\n\nSee [the Meson syntax entry](Syntax.md#string-formatting) for more\ninformation.\n\n*Since 1.3.0* values other than strings, integers, bools, options,\ndictionaries and lists thereof are deprecated. They were previously printing\nthe internal representation of the raw Python object.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntemplate = 'string: @0@, number: @1@, bool: @2@'\nres = template.format('text', 1, true)\n# res now has value 'string: text, number: 1, bool: true'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {"fmt": {"name": "fmt", "description": "The string to format.\n\nThe formatting works by replacing placeholders of type `@number@` with\nthe corresponding varargs.\n", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": {"name": "value", "description": "The values to replace the @number@ placeholders in the format string.", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}, {"obj": "bool", "holds": []}, {"obj": "str", "holds": []}], "type_str": "int|bool|str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": false}, "join": {"name": "join", "description": "The opposite of split,\nfor example `'.'.join(['a', 'b', 'c']` yields `'a.b.c'`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Similar to the Python str.join()\noutput = ' '.join(['foo', 'bar'])\n# Output value is 'foo bar'\npathsep = ':'\npath = pathsep.join(['/usr/bin', '/bin', '/usr/local/bin'])\n# path now has the value '/usr/bin:/bin:/usr/local/bin'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": {"name": "strings", "description": "The strings to join with the current string.\n\nBefore Meson *0.60.0* this function only accepts a single positional\nargument of the type [[list[str]]].\n", "since": "0.60.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": null, "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "arg_flattening": true}, "replace": {"name": "replace", "description": "Search all occurrences of `old` and replace it with `new`", "since": "0.58.0", "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Replaces all instances of one substring with another\ns = 'semicolons;as;separators'\ns = s.replace('as', 'are')\n# 's' now has the value of 'semicolons;are;separators'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {"old": {"name": "old", "description": "The substring to search", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "new": {"name": "new", "description": "The replacement string", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "split": {"name": "split", "description": "Splits the string at the specified character\n(or whitespace if not set) and returns the parts in an\narray.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Similar to the Python str.split()\ncomponents = 'a b   c d '.split()\n# components now has the value ['a', 'b', 'c', 'd']\ncomponents = 'a b   c d '.split(' ')\n# components now has the value ['a', 'b', '', '', 'c', 'd', '']\n```\n", "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {"split_string": {"name": "split_string", "description": "Specifies the character / substring where to split the string.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "splitlines": {"name": "splitlines", "description": "Splits the string into an array of lines.\nUnlike .split('\\n'), the empty string produced an empty array,\nand if the string ends in a newline, splitlines() doesn't split\non that last newline.\n'\\n', '\\r' and '\\r\\n' are all considered newlines.", "since": "1.2.0", "deprecated": null, "notes": [], "warnings": [], "example": "```meson\noutput = 'hello\\nworld\\n'.splitlines()\n# Output value is ['hello', 'world']\noutput = ''.splitlines()\n# Output value is []\nfs = import('fs')\npaths = fs.read('my_paths.list').splitlines()\n# paths is now the paths listed in 'my_paths.list', or an empty list\n# if 'my_paths.list' is empty\n```\n", "returns": [{"obj": "list", "holds": [{"obj": "str", "holds": []}]}], "returns_str": "list[str]", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "startswith": {"name": "startswith", "description": "Returns true if string starts with the string specified as the argument.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntarget = 'x86_FreeBSD'\nis_x86 = target.startswith('x86') # boolean value 'true'\n```\n", "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"fragment": {"name": "fragment", "description": "The string fragment to check", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "strip": {"name": "strip", "description": "Removes leading/ending characters from the string.\n\nBy default the characters to remove are spaces and newlines.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Similar to the Python str.strip(). Removes leading/ending spaces and newlines\ndefine = ' -Dsomedefine '\nstripped_define = define.strip()\n# 'stripped_define' now has the value '-Dsomedefine'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {"strip_chars": {"name": "strip_chars", "description": "Instead of whitespace, strip all the characters in this string.", "since": "0.43.0", "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "substring": {"name": "substring", "description": "Returns a substring specified from `start` to `end`.\nBoth `start` and `end` arguments are optional, so, for example, `'foobar'.substring()` will return `'foobar'`.\n\nThe method accepts negative values where negative `start` is relative to the end of\nstring `len(string) - start` as well as negative `end`.\n\nIf `start` or `end` are out of bounds, the position of the closest character will be used.\nIf `start` is bigger than `end`, the result will be an empty substring.", "since": "0.56.0", "deprecated": null, "notes": [], "warnings": [], "example": "```meson\n# Similar to the Python str[start:end] syntax\ntarget = 'x86_FreeBSD'\nplatform = target.substring(0, 3) # prefix string value 'x86'\nsystem = target.substring(4) # suffix string value 'FreeBSD'\n```\n\nExample with negative values:\n\n```meson\nstring = 'foobar'\nstring.substring(-5, -3) # => 'oo'\nstring.substring(1, -1) # => 'ooba'\n```\n\nExample with out of bound values:\n\n```meson\nstring = 'foobar'\nstring.substring(64) # => ''\nstring.substring(0, 64) # => 'foobar'\nstring.substring(64, 0) # => ''\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {"start": {"name": "start", "description": "The start position", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}, "end": {"name": "end", "description": "The end position", "since": null, "deprecated": null, "type": [{"obj": "int", "holds": []}], "type_str": "int", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_int": {"name": "to_int", "description": "Converts the string to an int and throws an error if it can't be", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\nversion = '1'\n# Converts the string to an int and throws an error if it can't be\nver_int = version.to_int()\n```\n", "returns": [{"obj": "int", "holds": []}], "returns_str": "int", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_lower": {"name": "to_lower", "description": "Converts all characters to lower case", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntarget = 'x86_FreeBSD'\nlower = target.to_lower() # t now has the value 'x86_freebsd'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "to_upper": {"name": "to_upper", "description": "Converts all characters to upper case", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\ntarget = 'x86_FreeBSD'\nupper = target.to_upper() # t now has the value 'X86_FREEBSD'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "underscorify": {"name": "underscorify", "description": "Creates a string where every non-alphabetical non-number character is replaced with `_`.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\nname = 'Meson Docs.txt#Reference-manual'\n# Replaces all characters other than `a-zA-Z0-9` with `_` (underscore)\n# Useful for substituting into #defines, filenames, etc.\nunderscored = name.underscorify()\n# underscored now has the value 'Meson_Docs_txt_Reference_manual'\n```\n", "returns": [{"obj": "str", "holds": []}], "returns_str": "str", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "version_compare": {"name": "version_compare", "description": "Does semantic version comparison.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": "```meson\nversion = '1.2.3'\n# Compare version numbers semantically\nis_new = version.version_compare('>=2.0')\n# is_new now has the boolean value false\n# Supports the following operators: '>', '<', '>=', '<=', '!=', '==', '='\n```\n\nMeson version comparison conventions include:\n\n```meson\n'3.6'.version_compare('>=3.6.0') == false\n```\n\nIt is best to be unambiguous and specify the full revision level to compare.\n", "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {"compare_string": {"name": "compare_string", "description": "The string to compare to.", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}}}, "structured_src": {"name": "structured_src", "description": "Opaque object returned by [[structured_sources]].", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["structured_sources"], "extended_by": [], "methods": {}}, "subproject": {"name": "subproject", "description": "This object is returned by [[subproject]] and is an opaque object representing it.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": ["subproject"], "extended_by": [], "methods": {"found": {"name": "found", "description": "Returns whether the subproject was successfully setup.", "since": "0.48.0", "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "bool", "holds": []}], "returns_str": "bool", "posargs": {}, "optargs": {}, "kwargs": {}, "varargs": null, "arg_flattening": true}, "get_variable": {"name": "get_variable", "description": "fetches the specified variable from inside the subproject.\nThis is useful to, for instance, get a\n[[declare_dependency]] from the [subproject](Subprojects.md).\n\nIf the variable does not exist, the variable `fallback` is returned.\nIf a fallback is not specified, then attempting to read a non-existing\nvariable will cause a fatal error.", "since": null, "deprecated": null, "notes": [], "warnings": [], "example": null, "returns": [{"obj": "any", "holds": []}], "returns_str": "any", "posargs": {"var_name": {"name": "var_name", "description": "The name of the variable to query", "since": null, "deprecated": null, "type": [{"obj": "str", "holds": []}], "type_str": "str", "required": true, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "optargs": {"fallback": {"name": "fallback", "description": "The fallback value to return if `var_name` does not exist.", "since": null, "deprecated": null, "type": [{"obj": "any", "holds": []}], "type_str": "any", "required": false, "default": "", "min_varargs": null, "max_varargs": null, "notes": [], "warnings": []}}, "kwargs": {}, "varargs": null, "arg_flattening": false}}}, "target_machine": {"name": "target_machine", "description": "Provides information about the target machine -- the machine on which\nthe compiled binary's output will run. Hence, this object should only\nbe used while cross-compiling a compiler. See\n[Cross-compilation](Cross-compilation.md).\n\nIt has the same methods as [[@build_machine]].\n\nWhen all compilation is 'native', all the methods return the same\nvalues as [[@build_machine]] (because the build machine is the host\nmachine and the target machine).\n\nNote that while cross-compiling, it simply returns the values defined\nin the cross-info file. If `target_machine` values are not defined in\nthe cross-info file, `host_machine` values are returned instead.", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "BUILTIN", "is_container": false, "example": null, "extends": "build_machine", "returned_by": [], "extended_by": [], "methods": {}}, "tgt": {"name": "tgt", "description": "Opaque base object for all Meson targets", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "RETURNED", "is_container": false, "example": null, "extends": null, "returned_by": [], "extended_by": ["alias_tgt", "build_tgt", "custom_tgt", "run_tgt"], "methods": {}}, "void": {"name": "void", "description": "Indicates that the function does not return anything.\nSimilar to `void` in C and C++", "since": null, "deprecated": null, "notes": [], "warnings": [], "defined_by_module": null, "object_type": "ELEMENTARY", "is_container": false, "example": null, "extends": null, "returned_by": ["add_global_arguments", "add_global_link_arguments", "add_project_arguments", "add_project_dependencies", "add_project_link_arguments", "add_test_setup", "assert", "benchmark", "debug", "error", "install_data", "install_emptydir", "install_headers", "install_man", "install_subdir", "install_symlink", "message", "project", "set_variable", "subdir", "subdir_done", "summary", "test", "unset_variable", "warning", "merge_from", "set", "set10", "set_quoted", "add_cmake_defines", "append", "prepend", "set", "unset", "add_devenv", "add_dist_script", "add_install_script", "add_postconf_script", "install_dependency_manifest", "override_dependency", "override_find_program"], "extended_by": [], "methods": {}}}, "objects_by_type": {"elementary": ["any", "bool", "dict", "int", "list", "str", "void"], "builtins": ["build_machine", "host_machine", "meson", "target_machine"], "returned": ["alias_tgt", "both_libs", "build_tgt", "cfg_data", "compiler", "custom_idx", "custom_tgt", "dep", "disabler", "env", "exe", "external_program", "extracted_obj", "feature", "file", "generated_list", "generator", "inc", "jar", "lib", "module", "range", "run_tgt", "runresult", "structured_src", "subproject", "tgt"], "modules": {"cmake": ["cmake_options"]}}}