#!/bin/bash

# Avouch Linux installer

DRIVE="${1}"
USERNAME="${2}"
PASSWORD="${3}"
HOSTNAME="${4}"
FULLNAME="${@:5}"
SRCDIR="/run/media/avouch/Avouch/avouch/al01/packages/x86_64"
FILESYSTEM="ext4"
MOUNTPOINT="/mnt"
CHROOTDIR="/mnt"
DATA_DRIVE="${DRIVE}"
EFI_MOUNTPOINT="/boot/efi"
DATA_MOUNTPOINT="${MOUNTPOINT}"
ARCH="$(uname -m)"
BASENAME="$(basename "${PWD}")"
KERVER="4.18.1-avouch"
AVH_REL_STRING="Avouch Linux Release 0.1.0"

PKGFILES=("${PWD}"/gnome/*.install)

### example
# ./avouch-devel "<partition>" "<username>" "<password>" "<hostname>" "<fullname>"
# ./avouch-gnome "/dev/sdb2" "avouch" "Avouch" "avouch-pc" "Avouch"

echo "Drive is    : ${DRIVE}"
echo "Username is : ${USERNAME}"
echo "Password is : ${PASSWORD}"
echo "Hostname is : ${HOSTNAME}"
echo "Fullname is : ${FULLNAME}"

### change to english locale!
export LANG="en_US"

### SUBROUTINES ###
plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

success_msg() {
	local mesg=$1; shift
	printf "${GREEN}==> ${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

info_msg() {
	local mesg=$1; shift
	printf "${BLUE}==> ${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

# chroot_mount()
# prepares target system as a chroot
#
### check for root
check_root () {
	if ! [[ ${UID} -eq 0 ]]; then 
		echo "ERROR: Please run installer as root!"
		exit 1
	fi
}

check_root

# get_uuid()
# converts /dev/[hs]d?[0-9] devices to UUIDs
#
# parameters: device file
# outputs:    UUID on success
#             nothing on failure
# returns:    nothing
get_uuid()
{
    if [ "${DRIVE%%/[hs]d?[0-9]}" != "${DRIVE}" ]; then
        echo "$(blkid -s UUID -o value ${DRIVE})"
    fi
}

get_fstype()
{
    if [ "${DRIVE%%/[hs]d?[0-9]}" != "${DRIVE}" ]; then
        echo "$(blkid -s TYPE -o value ${DRIVE})"
    fi
}

get_uefi_drive(){

	# find the EFI system drive , 
	# grep EFI system drive string, starting with /dev and end at :.
	echo "$(fdisk -l | grep -n 'EFI' | grep -o '/dev[^ ]*')"
}

get_swapdrive(){

	# blkid and find the swap drive , 
	# grep swap drive string starting with /dev and end at :.
	echo "$(blkid | grep -n 'swap' | grep -o '/dev[^:]*')"

}

format_volume () {	
	# First unmount the partition
	if grep -qs $DRIVE /proc/mounts; then
		info_msg "$(gettext "Filesystem is mounted, trying to unmount...")"
		umount -l $DRIVE || exit 1		
	else
		info_msg "$(gettext "Filesystem is not mounted")"
	fi
		
	# formate partition
	info_msg "$(gettext "Formating partition ${DRIVE}...")"
	echo y | mkfs.$FILESYSTEM "${DRIVE}"  || exit 1
}

mount_volume () {
	# format partition
	local fstype="$(get_fstype ${DRIVE})"
	local uefi_drive="$(get_uefi_drive)"

	[ -e "${MOUNTPOINT}" ] || mkdir "${MOUNTPOINT}"
	mount -t ${fstype} $DRIVE $MOUNTPOINT || exit 1

	if [[ "${uefi_drive}" != '' ]];then
		# mount uefi system drive
		mount -t vfat ${uefi_drive} ${EFI_MOUNTPOINT}
	fi

	echo "Mount point is ${MOUNTPOINT}"
	cd "${MOUNTPOINT}" || exit 1

	if [ -d "${MOUNTPOINT}/var/avouch/log" ]; then
		rm -r "${MOUNTPOINT}/var/avouch/log"
	else
		mkdir -p "${MOUNTPOINT}/var/avouch/log"
		touch "${MOUNTPOINT}/var/avouch/log/avouch-installl.log"

	fi
}

chroot_mount(){

	[ -e "${MOUNTPOINT}/sys" ] || mkdir "${MOUNTPOINT}/sys"
	[ -e "${MOUNTPOINT}/proc" ] || mkdir "${MOUNTPOINT}/proc"
	[ -e "${MOUNTPOINT}/dev" ] || mkdir "${MOUNTPOINT}/dev"
	mount -t sysfs sysfs "${MOUNTPOINT}/sys"
	mount -t proc proc "${MOUNTPOINT}/proc"
	mount -o bind /dev "${MOUNTPOINT}/dev"

}

# umount_volume()
# unmount the mount point and slected partition
#
umount_volume(){

	# change directory from mountpoint
	cd /
	umount $MOUNTPOINT/proc
	umount $MOUNTPOINT/sys
	umount $MOUNTPOINT/dev
	# unmount the drive
	umount -l ${MOUNTPOINT}

}

packages_to_install () {

# find total number of files in an array
echo "Total files in array : ${#PKGFILES[*]}"

	for SRCFILES in "${PKGFILES[@]}"
		do  	
			# display the file to be installed
			echo "$SRCFILES"
			# check the file and call the install package function
			if [ -f "${SRCFILES}" ]; then
				# install the packages
				install_packages
				info_msg "$(gettext "Package ${SRCFILES} installed sucessfully")"	
			else
				warning "$(gettext "Packages files ${SRCFILES} not found")"
			fi
		done
			
}

install_packages () {
	
	for FILES in $(grep -v '^#' "${SRCFILES}")
		do  	
		if [ -f "${SRCFILES}" ]; then	
			bsdtar -xf "$SRCDIR/${FILES}"	
			info_msg "$(gettext "Package ${FILES} installed sucessfully")"	
		else
			warning "$(gettext "Packages files ${FILES} not found")"	
		fi	

		#log the entire loop
		done 2>&1 | tee -a "$MOUNTPOINT/var/avouch/log/avouch-installl.log" 

}

fstab_setup(){

	#drive_uuid=( $( echo $(blkid -s UUID -o value ${DRIVE})))
	local drive_uuid="$(get_uuid ${DRIVE})"
	local root_drive="UUID=${drive_uuid}"
	local fstype="$(get_fstype ${DRIVE})"
	local swap_drive="$(get_swapdrive)"


	echo "${root_drive}   /   ${fstype}   defaults   0   1" >> ${MOUNTPOINT}/etc/fstab
	if [ "${swap_drive}" != " " ]; then
		echo "${swap_drive}  none   swap   defaults   0    0" >> ${MOUNTPOINT}/etc/fstab
	else 
		echo "No swap drive found"
	fi

}

genrate_locale(){

	### change to english locale!
	#systemd-nspawn  export LANG="en_US"

	# generating locales
echo "Generating locales"
sed -i 's/#cs_CZ/cs_CZ/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#de_DE/de_DE/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#en_GB/en_GB/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#en_HK/en_HK/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#en_PH/en_PH/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#en_US/en_US/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#en_US/en_US/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#es_MX/es_MX/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#fa_IR/fa_IR/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#fr_FR/fr_FR/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#it_IT/it_IT/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#ja_JP/ja_JP/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#ru_RU/ru_RU/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#tr_TR/tr_TR/g' ${MOUNTPOINT}/etc/locale.gen
sed -i 's/#zh_CN/zh_CN/g' ${MOUNTPOINT}/etc/locale.gen

	chroot ${CHROOTDIR} /usr/bin/locale-gen

	rm ${MOUNTPOINT}/etc/resolv.conf 
	rm ${MOUNTPOINT}/etc/hostname
	echo ${HOSTNAME} > ${MOUNTPOINT}/etc/hostname
	echo "127.0.1.1    localhost.localdomain    ${HOSTNAME}" >> ${MOUNTPOINT}/etc/hosts
	#chroot ${CHROOTDIR} hostnamectl set-hostname "${HOSTNAME}"

	# ca-certificates
	info_msg "$(gettext "Updating ca-certificates...")"	
	#export LC_ALL=C
	chroot ${CHROOTDIR} /usr/bin/update-ca-trust
	#chroot ${CHROOTDIR} /usr/bin/setup-nsssysinit.sh on
	#systemd-nspawn  /usr/bin/ca-legacy install
	chroot ${CHROOTDIR} unbound-anchor -a "/etc/unbound/root.key"

	#touch ${MOUNTPOINT}/etc/passwd-
	chroot ${CHROOTDIR} grpck
	touch ${CHROOTDIR}/etc/passwd-
	chroot ${CHROOTDIR} pwconv
	chroot ${CHROOTDIR} grpconv

}


add_users(){


# rpcbind
#echo "Adding user rpc"
#chroot ${CHROOTDIR} groupadd -r -g 32 rpc >/dev/null
#chroot ${CHROOTDIR} useradd -r -u 32 -g rpc -d /dev/null -s /bin/false -c "Rpcbind Daemon" rpc

# colord
#echo "Adding user colord"
#chroot ${CHROOTDIR} groupadd -g 35 colord
#chroot ${CHROOTDIR} useradd -d /var/lib/colord -u 35 -g colord -s /bin/false colord

# argyllcms
#echo "Adding user argyllcms"
#chroot ${CHROOTDIR} groupadd -g 36 plugdev

# kvm group for qemu
#chroot ${CHROOTDIR} groupadd kvm -f -g 38
#usermod -a -G kvm <username>

# enable services by systemctl preset
echo "Generating systemd preset"
chroot ${CHROOTDIR} systemd-sysusers avouch-sysusers-groups.conf
chroot ${CHROOTDIR} systemd-sysusers avouch-sysusers-users.conf
chroot ${CHROOTDIR} systemd-sysusers avouch-sysusers-membership.conf
chroot ${CHROOTDIR} systemd-sysusers basic.conf
chroot ${CHROOTDIR} systemd-sysusers

chroot ${CHROOTDIR} systemd-tmpfiles --create
#>/dev/null 2>&1 || :
	
# AVAHI
#echo "Adding user avahi"
#chroot ${CHROOTDIR} groupadd -fg 66 avahi
#chroot ${CHROOTDIR} useradd -c "Avahi Daemon Owner" -d /var/run/avahi-daemon -u 66 -g avahi -s /bin/false avahi	

# polkit
#echo "Adding user polkitd"
#chroot ${CHROOTDIR} groupadd -g 70 polkitd
#chroot ${CHROOTDIR} useradd -c 'Policy Kit Daemon' -u 70 -g polkitd -d '/' -s /bin/false polkitd
chroot ${CHROOTDIR} passwd -l polkitd &>/dev/null

# rtkit
#echo "Adding user rtkit"
#chroot ${CHROOTDIR} groupadd -g 71 rtkit 
#chroot ${CHROOTDIR} useradd -u 71 -g rtkit -c 'RealtimeKit' -s /sbin/nologin -d /proc rtkit

	# add stunnel group
	chroot ${CHROOTDIR} groupadd -g 72 stunnel
	# add stunnel user
	chroot ${CHROOTDIR} useradd -u 72 -g stunnel -d /var/run/stunnel -s /bin/false stunnel
	# create chroot dir if necessary.
	chroot ${CHROOTDIR} install -dm770 -o stunnel -g stunnel /var/run/stunnel

  
# GDM
#echo "Adding user gdm"
#chroot ${CHROOTDIR} groupadd -g 80 gdm
#chroot ${CHROOTDIR} useradd -c 'Gnome Display Manager' -u 80 -g gdm -d /var/lib/gdm -s /sbin/nologin gdm
#chroot ${CHROOTDIR} passwd -ql gdm > /dev/null
#chroot ${CHROOTDIR} chown -R 80:80 /var/lib/gdm

#chroot ${CHROOTDIR} mkdir -p /var/log/gdm
#chroot ${CHROOTDIR} chown root:gdm /var/log/gdm

#chroot ${CHROOTDIR} dconf update

# LXDM
chroot ${CHROOTDIR} groupadd -g 81 lxdm
chroot ${CHROOTDIR} useradd -c 'Lightweight X11 Display Manager' -u 81 -g 81 -d /var/lib/lxdm -s /sbin/nologin lxdm
chroot ${CHROOTDIR} passwd -ql lxdm  > /dev/null
chroot ${CHROOTDIR} mkdir -p /var/lib/lxdm
chroot ${CHROOTDIR} chown -R 81:81 /var/lib/lxdm

# SDDM
#chroot ${CHROOTDIR} groupadd -g 82 sddm
#chroot ${CHROOTDIR} useradd -c 'Simple Desktop Display Manager' -u 82 -g 82 -d /var/lib/sddm -s /sbin/nologin sddm
#chroot ${CHROOTDIR} passwd -ql sddm  > /dev/null
#chroot ${CHROOTDIR} mkdir -p /var/lib/sddm
#chroot ${CHROOTDIR} chown -R sddm:sddm /var/lib/sddm

	# create users for opensmtpd
	chroot ${CHROOTDIR} getent group smtpq >/dev/null || groupadd  -r smtpq
	chroot ${CHROOTDIR} getent passwd smtpd >/dev/null || useradd -c "SMTP Daemon" -d /var/empty -u 91 -g 1 -s /bin/nologin smtpd
	chroot ${CHROOTDIR} getent passwd smtpq >/dev/null || useradd -c "SMTPD Queue" -d /var/empty -u 92 -g smtpq -s/bin/nologin smtpq
 
	# create group and users for sendmail
	if grep -q "^smmsp:" ${MOUNTPOINT}/etc/group &> /dev/null ; then
		chroot ${CHROOTDIR} groupmod -g 44 -n smmsp smmsp &> /dev/null
	else
		chroot ${CHROOTDIR} groupadd -g 44 smmsp &> /dev/null
	fi
  
	if grep -q "^smmsp:" ${MOUNTPOINT}/etc/passwd 2> /dev/null ; then
		chroot ${CHROOTDIR} usermod -s /bin/false -c "sendmail user" -d /var/spool/mail -u 93 -g smmsp smmsp &> /dev/null
	else
		chroot ${CHROOTDIR} useradd -s /bin/false -c "sendmail user" -d /var/spool/mail -u 93 -g smmsp -r smmsp &> /dev/null
	fi
	
	chroot ${CHROOTDIR} chown smmsp:smmsp /var/spool/clientmqueue
	chroot ${CHROOTDIR} chown root:smmsp /usr/bin/sendmail
	chroot ${CHROOTDIR} chmod 2555 /usr/bin/sendmail
  
  	# create group and users for postfix
	chroot ${CHROOTDIR} groupadd -g 45 postdrop >/dev/null
	chroot ${CHROOTDIR} groupadd -g 94 postfix  >/dev/null
	chroot ${CHROOTDIR} useradd -u 94 -d /var/spool/postfix -g postfix -s /bin/false postfix >/dev/null

	# create group and users for exim
	chroot ${CHROOTDIR} groupadd -g 46 exim
	chroot ${CHROOTDIR} useradd -c 'Exim MTA' -u 95 -g exim -d /var/spool/exim -s /sbin/nologin exim 

	chroot ${CHROOTDIR} passwd -l exim > /dev/null
	chroot ${CHROOTDIR} chmod u+s /usr/bin/exim
	
	chroot ${CHROOTDIR} groupadd -g 47 vsftpd	
	chroot ${CHROOTDIR} useradd -c "vsftpd User"  -d /dev/null -g vsftpd -s /bin/false -u 47 vsftpd
	
	chroot ${CHROOTDIR} groupadd -g 48 proftpd 
	chroot ${CHROOTDIR} useradd -c proftpd -d /srv/ftp -g proftpd -s /usr/bin/proftpdshell -u 48 proftpd  
  	
# usbmuxd
echo "Adding user usbmux"
chroot ${CHROOTDIR} groupadd -g 110 usbmux
chroot ${CHROOTDIR} useradd -c 'usbmux user' -u 110 -g usbmux -d / -s /sbin/nologin usbmux
chroot ${CHROOTDIR} passwd -l usbmux

# openldap
echo "Adding user ldap"
#chroot ${CHROOTDIR} groupadd -g 120 ldap
#chroot ${CHROOTDIR} useradd -u 120 -g ldap -d /var/lib/openldap -s /bin/false ldap
#chroot ${CHROOTDIR} mkdir -p /var/lib/openldap
#chroot ${CHROOTDIR} chown -R ldap:ldap /var/lib/openldap
#chroot ${CHROOTDIR} systemd-sysusers openldap.conf
#chroot ${CHROOTDIR} systemd-tmpfiles --create openldap.conf

# gnome-initial-setup
echo "Adding user gnome-initial-setup"
chroot ${CHROOTDIR} groupadd -g 130 gnome-initial-setup
chroot ${CHROOTDIR} useradd -rM -c 'GNOME Initial Setup' -u 130 -g 130 -d /var/lib/gnome-initial-setup -s /sbin/nologin gnome-initial-setup
chroot ${CHROOTDIR} passwd -l gnome-initial-setup > /dev/null
chroot ${CHROOTDIR} mkdir -p /var/lib/gnome-initial-setup
chroot ${CHROOTDIR} chown -R 130:130 /var/lib/gnome-initial-setup

# postgresql
  if [ ! -d "${MOUNTPOINT}/var/lib/postgres" ]; then
    mkdir -p "${MOUNTPOINT}/var/lib/postgres"
  fi  
    chroot ${CHROOTDIR} groupadd -g 150 postgres
    chroot ${CHROOTDIR} useradd -c 'PostgreSQL user' -u 150 -g postgres -d '/var/lib/postgres' -s /bin/bash postgres
    chroot ${CHROOTDIR} passwd -l postgres >/dev/null

  chroot ${CHROOTDIR} systemd-tmpfiles --create postgresql.conf
  if [ ! -d "${MOUNTPOINT}/var/lib/postgres/data" ]; then
    mkdir -p "${MOUNTPOINT}/var/lib/postgres/data"
    chroot ${CHROOTDIR} chown postgres:postgres '/var/lib/postgres/data'
  fi

# mariaDB
local datadir="/var/lib/mysql"
#chroot ${CHROOTDIR} groupadd -g 151 mysql
#chroot ${CHROOTDIR} useradd -u 151 -g mysql -d $datadir -s /bin/false mysql

if [[ ! -e $datadir ]]; then
    chroot ${CHROOTDIR} install -dm700 $datadir
    chroot ${CHROOTDIR} /usr/bin/mysql_install_db --user=mysql --basedir=/usr --datadir=$datadir
    chroot ${CHROOTDIR} chown -R mysql:mysql /var/lib/mysql &>/dev/null
    chroot ${CHROOTDIR} systemctl start mariadb.service
    chroot ${CHROOTDIR} /usr/bin/mysqladmin -u root password Avouch
fi

#chroot ${CHROOTDIR} /usr/bin/systemd-tmpfiles --create mysql.conf

#echo ">> If you are migrating from MySQL, don't forget to run 'mysql_upgrade'"
#echo "     after mysqld.service restart." 

# make sure all groups and users are created
#chroot ${CHROOTDIR} systemd-sysusers

## Networkmanager openconnect
chroot ${CHROOTDIR} useradd -r -U -d / -c 'NetworkManager OpenConnect' -s /usr/bin/nologin nm-openconnect


# adbuser group
echo "Adding user adbuser"
chroot ${CHROOTDIR} groupadd -r adbusers

# ceph group
#echo "Adding user ceph"
#chroot ${CHROOTDIR} groupadd -g 300 ceph
#chroot ${CHROOTDIR} mkdir -p /var/lib/ceph
#chroot ${CHROOTDIR} useradd -d /var/lib/ceph -u 300 -g ceph -s /bin/false ceph


# memcached user
  #if ! getent group memcached >/dev/null; then
    chroot ${CHROOTDIR} groupadd --system memcached
  #fi
  #if ! getent passwd memcached >/dev/null; then
    chroot ${CHROOTDIR} useradd --system -c 'memcached user' -g memcached -d / -s /bin/nologin memcached
  #fi
  

echo "Adding user ${USERNAME}"
chroot ${CHROOTDIR} useradd -c "${FULLNAME}" -m "${USERNAME}" -s /bin/bash
chroot ${CHROOTDIR} usermod -a -G wheel "${USERNAME}"

chroot ${CHROOTDIR} passwd -d "${USERNAME}" > /dev/null
$(echo -e "${PASSWORD}\n${PASSWORD}" | chroot ${CHROOTDIR} passwd ${USERNAME})
echo "Password for ${USERNAME} is set ${PASSWORD}"

# give default user sudo privileges
echo "%wheel     ALL=(ALL)     NOPASSWD: ALL" >> "${MOUNTPOINT}/etc/sudoers"

# incase of failure
chroot ${CHROOTDIR} touch /root/.Xauthority
chroot ${CHROOTDIR} touch /home/${USERNAME}/.Xauthority
chroot ${CHROOTDIR} chown ${USERNAME}  /home/${USERNAME}/.Xauthority

}

systemd_setup(){

	echo "Generating systemd machine id"
	chroot ${CHROOTDIR} systemd-machine-id-setup

	echo "updating journalctl cataloge"
	chroot ${CHROOTDIR} /usr/lib/systemd/systemd-random-seed save
	chroot ${CHROOTDIR} journalctl --update-catalog
	
	#echo "creating systemd-sysuser"
	#chroot ${CHROOTDIR} systemd-sysusers
	
	echo "creating systemd-tmpfiles"
	chroot ${CHROOTDIR} systemd-tmpfiles --create

	# Apply ACL to the journal directory
	chroot ${CHROOTDIR} setfacl -Rnm g:wheel:rx,d:g:wheel:rx,g:adm:rx,d:g:adm:rx /var/log/journal/

	# enable services by systemctl preset
	echo "Generating systemd preset"
	chroot ${CHROOTDIR} systemctl preset \
	remote-fs.target \
	getty@.service \
	serial-getty@.service \
	console-getty.service \
	debug-shell.service \
	systemd-timesyncd.service \
	systemd-networkd.service \
	systemd-networkd-wait-online.service \
	systemd-resolved.service \
	lvm2-lvmetad.service \
	lvm2-monitor.service \
	avahi-daemon.service \
	bluetooth.service \
	ModemManager.service \
	NetworkManager.service \
	gdm.service \
	>/dev/null 2>&1 || :
	
	# Enable xdg-user-dirs-update by default
	chroot ${CHROOTDIR} systemctl --global enable xdg-user-dirs-update.service

	# update udev dtabase
	chroot ${CHROOTDIR} udevadm hwdb --update

}

generate_cache(){


	info_msg "$(gettext "Generating ldconfig cache...")"	
	chroot ${CHROOTDIR} /usr/bin/ldconfig

	# fonts cache
	info_msg "$(gettext "Generating fonts cache...")"	
	chroot ${CHROOTDIR} fc-cache -f -v
	chroot ${CHROOTDIR} mkfontdir /usr/share/fonts/*

	# gdk-pixbuf update cache
	info_msg "$(gettext "Generating gdk-pixbuf cache...")"	
	chroot ${CHROOTDIR} /usr/bin/gdk-pixbuf-query-loaders --update-cache
	chroot ${CHROOTDIR} /usr/bin/gdk-pixbuf-query-loaders-32 --update-cache

	# gtk cache
	info_msg "$(gettext "Generating gtk2 cache...")"	
	chroot ${CHROOTDIR} /usr/bin/gtk-query-immodules-2.0 --update-cache
	chroot ${CHROOTDIR} /usr/bin/gtk-query-immodules-2.0-32 --update-cache

	# gtk3 cache
	info_msg "$(gettext "Generating gtk3 cache...")"	
	chroot ${CHROOTDIR} /usr/bin/gtk-query-immodules-3.0 --update-cache

	# glib compile schema
	info_msg "$(gettext "Compiling glib schemas...")"	
	chroot ${CHROOTDIR} /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas

	# icon cache
	info_msg "$(gettext "Generating icone cache...")"	
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/hicolor
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/locolor
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/gnome
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/Adwaita
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/breeze
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/oxygen
	chroot ${CHROOTDIR} /usr/bin/gtk-update-icon-cache -q -t -f /usr/share/icons/Rodent
	chroot ${CHROOTDIR} /usr/bin/xdg-icon-resource forceupdate --theme hicolor

	# vlc cache-gen
	info_msg "$(gettext "Generating vlc cache...")"	
	chroot ${CHROOTDIR} /usr/lib/vlc/vlc-cache-gen /usr/lib/vlc/plugins

	# mime database
	info_msg "$(gettext "Updating mime-database...")"	
	chroot ${CHROOTDIR} /usr/bin/update-mime-database /usr/share/mime

	# desktop database
	info_msg "$(gettext "Updating desktop-database...")"	
	chroot ${CHROOTDIR} /usr/bin/update-desktop-database -q

	# man-db database
	info_msg "$(gettext "Updating man-db database...")"	
	#/usr/bin/mandb --quiet

}

final_config(){

# change policy of gparted
sed -i "s/auth_admin/yes/g" ${MOUNTPOINT}/usr/share/polkit-1/actions/org.avouch.pkexec.gparted.policy

# as gnome-terminal does not support utf language.
cat > ${MOUNTPOINT}/etc/locale.conf << "EOF"
LANG=en_US.UTF-8
EOF


# set plymouth theme to avouch
sed -i "s/spinner/avouch/g" ${MOUNTPOINT}/etc/plymouth/plymouthd.conf

# install info
echo "Installing info files"
	pushd ${MOUNTPOINT}/usr/share/info

	for f in *
	  do install-info $f dir 2>/dev/null
	done
popd

# enable gdm-initial-setup
#if [ -d ${MOUNTPOINT}/etc/gdm/custom.conf ]; then
#	rm -r ${MOUNTPOINT}/etc/gdm/custom.conf
#fi

#cat > ${MOUNTPOINT}/etc/gdm/custom.conf << "EOF"
#[daemon]
#InitialSetupEnable=True
#WaylandEnable=false
#EOF

# fix for polkit until all packagesare updates for polkiy group 70
chown 70:0 "${MOUNTPOINT}/etc/polkit-1/rules.d"
chown 70:0 "${MOUNTPOINT}/usr/share/polkit-1/rules.d"

chmod 700 "${MOUNTPOINT}/etc/polkit-1/rules.d"
chmod 700 "${MOUNTPOINT}/usr/share/polkit-1/rules.d"

# Avouch version
echo "${AVH_REL_STRING}" >> ${MOUNTPOINT}/etc/avouch-release

# set thr theme for root
# so that application gui behave as they look in normal usr
# A temporay fix 
mkdir "${MOUNTPOINT}/root/.themes"
mkdir "${MOUNTPOINT}/root/.icons"
ln -s -t "${MOUNTPOINT}/root/.themes" "/usr/share/themes/Adwaita"
ln -s -t "${MOUNTPOINT}/root/.icons" "/usr/share/icons/Adwaita"

chroot ${CHROOTDIR} chown -Rvf "${USERNAME}:${USERNAME}" "/home/${USERNAME}/"

# shadow enabling
echo "updating shadow passwords"
chroot ${CHROOTDIR} touch /etc/passwd-
chroot ${CHROOTDIR} grpck
chroot ${CHROOTDIR} pwconv
chroot ${CHROOTDIR} grpconv

}

make_initramfs(){
	info_msg "$(gettext "Generating initramfs image")"	
	chroot ${CHROOTDIR} depmod -a ${KERVER}
	chroot ${CHROOTDIR} dracut '/boot/initramfs-linux.img' ${KERVER} --force
}

grub_bios(){
	# extract the base drive from ${DRIVE}
	local grub_drive="${DRIVE%?}"
			
	info_msg "$(gettext 'Installing Grub boot loader for BIOS')"	

	# Install Grub for BIOS
	chroot ${CHROOTDIR} /usr/bin/grub-install ${grub_drive}
}

grub_uefi(){
	info_msg "$(gettext 'Installing Grub boot loader for UEFI')"	
	sudo grub-install --target=x86_64-efi --efi-directory=${EFI_MOUNTPOINT} --boot-directory=${DATA_MOUNTPOINT}/boot  --recheck
}

install_grub(){
	
	sudo mkdir -p ${DATA_MOUNTPOINT}/boot/grub
	
	if [[ -d /sys/firmware/efi ]];then
		grub_uefi
	else 
		grub_bios
	fi
	# os-prober takes too long time, so disable it still if fixed
	sed -i "s/#GRUB_DISABLE_OS_PROBER/GRUB_DISABLE_OS_PROBER/g" ${MOUNTPOINT}/etc/default/grub
		
	info_msg "$(gettext 'Generating grub configuration file')"
	chroot ${CHROOTDIR} /usr/bin/grub-mkconfig -o /boot/grub/grub.cfg

	# enable os-prober
	sed -i "s/GRUB_DISABLE_OS_PROBER/#GRUB_DISABLE_OS_PROBER/g" ${MOUNTPOINT}/etc/default/grub
}

format_volume
mount_volume
packages_to_install
chroot_mount
fstab_setup
genrate_locale
add_users
systemd_setup
generate_cache
final_config
make_initramfs
install_grub
umount_volume
